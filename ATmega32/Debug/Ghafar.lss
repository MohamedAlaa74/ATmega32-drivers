
Ghafar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00005846  000058da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000e0  008000e0  0000595a  2**0
                  ALLOC
  3 .stab         0000822c  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005f46  00000000  00000000  0000db88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00013c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00013dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00015e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00016f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00017e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00018008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000182ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00018b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_1>
       8:	0c 94 37 10 	jmp	0x206e	; 0x206e <__vector_2>
       c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_10>
      2c:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 29 	call	0x521c	; 0x521c <main>
      8a:	0c 94 21 2c 	jmp	0x5842	; 0x5842 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 29 	jmp	0x52a4	; 0x52a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_init>:
 * Name        : UART_init
 * Description : initialize UART module
 * Arguments   :  UART : pointer to UART post-build configurations
 * Return      :  E_OK,E_NOK
 */
Std_ReturnType UART_init(UART_CONF_t *UART){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2d 97       	sbiw	r28, 0x0d	; 13
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
		if (UART == NULL){
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <UART_init+0x28>
			return_value = E_NOK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
     cc4:	c6 c2       	rjmp	.+1420   	; 0x1252 <UART_init+0x5b4>
		}
		else {


	switch (UART->UART_mode) {
     cc6:	ea 81       	ldd	r30, Y+2	; 0x02
     cc8:	fb 81       	ldd	r31, Y+3	; 0x03
     cca:	80 81       	ld	r24, Z
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3d 87       	std	Y+13, r19	; 0x0d
     cd2:	2c 87       	std	Y+12, r18	; 0x0c
     cd4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	a1 f0       	breq	.+40     	; 0xd04 <UART_init+0x66>
     cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cde:	3d 85       	ldd	r19, Y+13	; 0x0d
     ce0:	21 30       	cpi	r18, 0x01	; 1
     ce2:	31 05       	cpc	r19, r1
     ce4:	e9 f4       	brne	.+58     	; 0xd20 <UART_init+0x82>
		case UART_MODE_SYNC :SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	8c 93       	st	X, r24
							 SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UMSEL_BIT);
     cf4:	a0 e4       	ldi	r26, 0x40	; 64
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e4       	ldi	r30, 0x40	; 64
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	8c 93       	st	X, r24
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <UART_init+0x82>
			break;
		case UART_MODE_ASYNC:SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     d04:	a0 e4       	ldi	r26, 0x40	; 64
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e0 e4       	ldi	r30, 0x40	; 64
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	8c 93       	st	X, r24
							 CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UMSEL_BIT);
     d12:	a0 e4       	ldi	r26, 0x40	; 64
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e0 e4       	ldi	r30, 0x40	; 64
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	8c 93       	st	X, r24
			break;
	}


	switch (UART->UART_parity) {
     d20:	ea 81       	ldd	r30, Y+2	; 0x02
     d22:	fb 81       	ldd	r31, Y+3	; 0x03
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3b 87       	std	Y+11, r19	; 0x0b
     d2c:	2a 87       	std	Y+10, r18	; 0x0a
     d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d30:	9b 85       	ldd	r25, Y+11	; 0x0b
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	91 05       	cpc	r25, r1
     d36:	b1 f1       	breq	.+108    	; 0xda4 <UART_init+0x106>
     d38:	2a 85       	ldd	r18, Y+10	; 0x0a
     d3a:	3b 85       	ldd	r19, Y+11	; 0x0b
     d3c:	23 30       	cpi	r18, 0x03	; 3
     d3e:	31 05       	cpc	r19, r1
     d40:	d9 f0       	breq	.+54     	; 0xd78 <UART_init+0xda>
     d42:	8a 85       	ldd	r24, Y+10	; 0x0a
     d44:	9b 85       	ldd	r25, Y+11	; 0x0b
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f0       	breq	.+2      	; 0xd4c <UART_init+0xae>
     d4a:	41 c0       	rjmp	.+130    	; 0xdce <UART_init+0x130>
			case UART_NO_PARITY :      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     d4c:	a0 e4       	ldi	r26, 0x40	; 64
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e0 e4       	ldi	r30, 0x40	; 64
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 68       	ori	r24, 0x80	; 128
     d58:	8c 93       	st	X, r24
								       CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM0_BIT);
     d5a:	a0 e4       	ldi	r26, 0x40	; 64
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e0 e4       	ldi	r30, 0x40	; 64
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 7e       	andi	r24, 0xEF	; 239
     d66:	8c 93       	st	X, r24
								       CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM1_BIT);break;
     d68:	a0 e4       	ldi	r26, 0x40	; 64
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e0 e4       	ldi	r30, 0x40	; 64
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8c 93       	st	X, r24
     d76:	2b c0       	rjmp	.+86     	; 0xdce <UART_init+0x130>

			case UART_ODD_PARITY:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     d78:	a0 e4       	ldi	r26, 0x40	; 64
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	8c 93       	st	X, r24
		     	   	   	   	   	   	   CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM0_BIT);
     d86:	a0 e4       	ldi	r26, 0x40	; 64
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e0 e4       	ldi	r30, 0x40	; 64
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7e       	andi	r24, 0xEF	; 239
     d92:	8c 93       	st	X, r24
		       	   	   	   	   	   	   SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM1_BIT);break;
     d94:	a0 e4       	ldi	r26, 0x40	; 64
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 e4       	ldi	r30, 0x40	; 64
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 62       	ori	r24, 0x20	; 32
     da0:	8c 93       	st	X, r24
     da2:	15 c0       	rjmp	.+42     	; 0xdce <UART_init+0x130>

			case UART_EVEN_PARITY:     SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     da4:	a0 e4       	ldi	r26, 0x40	; 64
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e0 e4       	ldi	r30, 0x40	; 64
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	8c 93       	st	X, r24
									   SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM0_BIT);
     db2:	a0 e4       	ldi	r26, 0x40	; 64
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e0 e4       	ldi	r30, 0x40	; 64
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 61       	ori	r24, 0x10	; 16
     dbe:	8c 93       	st	X, r24
									   SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UPM1_BIT);break;
     dc0:	a0 e4       	ldi	r26, 0x40	; 64
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e0 e4       	ldi	r30, 0x40	; 64
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 62       	ori	r24, 0x20	; 32
     dcc:	8c 93       	st	X, r24
		}
	switch (UART->UART_stop_bits) {
     dce:	ea 81       	ldd	r30, Y+2	; 0x02
     dd0:	fb 81       	ldd	r31, Y+3	; 0x03
     dd2:	85 81       	ldd	r24, Z+5	; 0x05
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	39 87       	std	Y+9, r19	; 0x09
     dda:	28 87       	std	Y+8, r18	; 0x08
     ddc:	88 85       	ldd	r24, Y+8	; 0x08
     dde:	99 85       	ldd	r25, Y+9	; 0x09
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	31 f0       	breq	.+12     	; 0xdf0 <UART_init+0x152>
     de4:	28 85       	ldd	r18, Y+8	; 0x08
     de6:	39 85       	ldd	r19, Y+9	; 0x09
     de8:	21 30       	cpi	r18, 0x01	; 1
     dea:	31 05       	cpc	r19, r1
     dec:	81 f0       	breq	.+32     	; 0xe0e <UART_init+0x170>
     dee:	1d c0       	rjmp	.+58     	; 0xe2a <UART_init+0x18c>
				case UART_STOP_BITS_1 :     SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     df0:	a0 e4       	ldi	r26, 0x40	; 64
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e0 e4       	ldi	r30, 0x40	; 64
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	8c 93       	st	X, r24
									        CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_USBS_BIT);break;
     dfe:	a0 e4       	ldi	r26, 0x40	; 64
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e0 e4       	ldi	r30, 0x40	; 64
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	8c 93       	st	X, r24
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <UART_init+0x18c>


				case UART_STOP_BITS_2:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     e0e:	a0 e4       	ldi	r26, 0x40	; 64
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e0 e4       	ldi	r30, 0x40	; 64
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	8c 93       	st	X, r24
			     	   	   	   	   	   	    SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_USBS_BIT); break;
     e1c:	a0 e4       	ldi	r26, 0x40	; 64
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e0 e4       	ldi	r30, 0x40	; 64
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	8c 93       	st	X, r24

			}
	switch (UART->UART_data_size) {
     e2a:	ea 81       	ldd	r30, Y+2	; 0x02
     e2c:	fb 81       	ldd	r31, Y+3	; 0x03
     e2e:	83 81       	ldd	r24, Z+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3f 83       	std	Y+7, r19	; 0x07
     e36:	2e 83       	std	Y+6, r18	; 0x06
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <UART_init+0x1a6>
     e42:	56 c0       	rjmp	.+172    	; 0xef0 <UART_init+0x252>
     e44:	2e 81       	ldd	r18, Y+6	; 0x06
     e46:	3f 81       	ldd	r19, Y+7	; 0x07
     e48:	23 30       	cpi	r18, 0x03	; 3
     e4a:	31 05       	cpc	r19, r1
     e4c:	54 f4       	brge	.+20     	; 0xe62 <UART_init+0x1c4>
     e4e:	8e 81       	ldd	r24, Y+6	; 0x06
     e50:	9f 81       	ldd	r25, Y+7	; 0x07
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	99 f0       	breq	.+38     	; 0xe7c <UART_init+0x1de>
     e56:	2e 81       	ldd	r18, Y+6	; 0x06
     e58:	3f 81       	ldd	r19, Y+7	; 0x07
     e5a:	21 30       	cpi	r18, 0x01	; 1
     e5c:	31 05       	cpc	r19, r1
     e5e:	59 f1       	breq	.+86     	; 0xeb6 <UART_init+0x218>
     e60:	9d c0       	rjmp	.+314    	; 0xf9c <UART_init+0x2fe>
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <UART_init+0x1d0>
     e6c:	5e c0       	rjmp	.+188    	; 0xf2a <UART_init+0x28c>
     e6e:	2e 81       	ldd	r18, Y+6	; 0x06
     e70:	3f 81       	ldd	r19, Y+7	; 0x07
     e72:	27 30       	cpi	r18, 0x07	; 7
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <UART_init+0x1dc>
     e78:	75 c0       	rjmp	.+234    	; 0xf64 <UART_init+0x2c6>
     e7a:	90 c0       	rjmp	.+288    	; 0xf9c <UART_init+0x2fe>
			case UART_DATA_SIZE_5_BIT :     SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ0_BIT);
     e8a:	a0 e4       	ldi	r26, 0x40	; 64
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e0 e4       	ldi	r30, 0x40	; 64
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ1_BIT);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);break;
     ea6:	aa e2       	ldi	r26, 0x2A	; 42
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e2       	ldi	r30, 0x2A	; 42
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	8c 93       	st	X, r24
     eb4:	73 c0       	rjmp	.+230    	; 0xf9c <UART_init+0x2fe>


			case UART_DATA_SIZE_6_BIT:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     eb6:	a0 e4       	ldi	r26, 0x40	; 64
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e0 e4       	ldi	r30, 0x40	; 64
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	8c 93       	st	X, r24
											SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ0_BIT);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 60       	ori	r24, 0x02	; 2
     ed0:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ1_BIT);
     ed2:	a0 e4       	ldi	r26, 0x40	; 64
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 e4       	ldi	r30, 0x40	; 64
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8b 7f       	andi	r24, 0xFB	; 251
     ede:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);break;
     ee0:	aa e2       	ldi	r26, 0x2A	; 42
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ea e2       	ldi	r30, 0x2A	; 42
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	8c 93       	st	X, r24
     eee:	56 c0       	rjmp	.+172    	; 0xf9c <UART_init+0x2fe>

			case UART_DATA_SIZE_7_BIT:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ0_BIT);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8c 93       	st	X, r24
											SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ1_BIT);
     f0c:	a0 e4       	ldi	r26, 0x40	; 64
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	84 60       	ori	r24, 0x04	; 4
     f18:	8c 93       	st	X, r24
											CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);break;
     f1a:	aa e2       	ldi	r26, 0x2A	; 42
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e2       	ldi	r30, 0x2A	; 42
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8b 7f       	andi	r24, 0xFB	; 251
     f26:	8c 93       	st	X, r24
     f28:	39 c0       	rjmp	.+114    	; 0xf9c <UART_init+0x2fe>

			case UART_DATA_SIZE_8_BIT:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     f2a:	a0 e4       	ldi	r26, 0x40	; 64
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e0 e4       	ldi	r30, 0x40	; 64
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
										    SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ0_BIT);
     f38:	a0 e4       	ldi	r26, 0x40	; 64
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e0 e4       	ldi	r30, 0x40	; 64
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
										    SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ1_BIT);
     f46:	a0 e4       	ldi	r26, 0x40	; 64
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e0 e4       	ldi	r30, 0x40	; 64
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	84 60       	ori	r24, 0x04	; 4
     f52:	8c 93       	st	X, r24
										    CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);break;
     f54:	aa e2       	ldi	r26, 0x2A	; 42
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ea e2       	ldi	r30, 0x2A	; 42
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8b 7f       	andi	r24, 0xFB	; 251
     f60:	8c 93       	st	X, r24
     f62:	1c c0       	rjmp	.+56     	; 0xf9c <UART_init+0x2fe>

			case UART_DATA_SIZE_9_BIT:      SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
     f64:	a0 e4       	ldi	r26, 0x40	; 64
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e0 e4       	ldi	r30, 0x40	; 64
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	8c 93       	st	X, r24
											SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ0_BIT);
     f72:	a0 e4       	ldi	r26, 0x40	; 64
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e0 e4       	ldi	r30, 0x40	; 64
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	8c 93       	st	X, r24
											SET_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_UCSZ1_BIT);
     f80:	a0 e4       	ldi	r26, 0x40	; 64
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e0 e4       	ldi	r30, 0x40	; 64
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	84 60       	ori	r24, 0x04	; 4
     f8c:	8c 93       	st	X, r24
											SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);break;
     f8e:	aa e2       	ldi	r26, 0x2A	; 42
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ea e2       	ldi	r30, 0x2A	; 42
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	8c 93       	st	X, r24
		}
	switch (UART->UART_baud) {
     f9c:	ea 81       	ldd	r30, Y+2	; 0x02
     f9e:	fb 81       	ldd	r31, Y+3	; 0x03
     fa0:	81 81       	ldd	r24, Z+1	; 0x01
     fa2:	92 81       	ldd	r25, Z+2	; 0x02
     fa4:	9d 83       	std	Y+5, r25	; 0x05
     fa6:	8c 83       	std	Y+4, r24	; 0x04
     fa8:	2c 81       	ldd	r18, Y+4	; 0x04
     faa:	3d 81       	ldd	r19, Y+5	; 0x05
     fac:	29 31       	cpi	r18, 0x19	; 25
     fae:	31 05       	cpc	r19, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <UART_init+0x316>
     fb2:	d2 c0       	rjmp	.+420    	; 0x1158 <UART_init+0x4ba>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	8a 31       	cpi	r24, 0x1A	; 26
     fba:	91 05       	cpc	r25, r1
     fbc:	28 f5       	brcc	.+74     	; 0x1008 <UART_init+0x36a>
     fbe:	2c 81       	ldd	r18, Y+4	; 0x04
     fc0:	3d 81       	ldd	r19, Y+5	; 0x05
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	31 05       	cpc	r19, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <UART_init+0x32c>
     fc8:	06 c1       	rjmp	.+524    	; 0x11d6 <UART_init+0x538>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	89 30       	cpi	r24, 0x09	; 9
     fd0:	91 05       	cpc	r25, r1
     fd2:	68 f4       	brcc	.+26     	; 0xfee <UART_init+0x350>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	21 30       	cpi	r18, 0x01	; 1
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <UART_init+0x342>
     fde:	25 c1       	rjmp	.+586    	; 0x122a <UART_init+0x58c>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <UART_init+0x34e>
     fea:	0a c1       	rjmp	.+532    	; 0x1200 <UART_init+0x562>
     fec:	32 c1       	rjmp	.+612    	; 0x1252 <UART_init+0x5b4>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	2c 30       	cpi	r18, 0x0C	; 12
     ff4:	31 05       	cpc	r19, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <UART_init+0x35c>
     ff8:	d9 c0       	rjmp	.+434    	; 0x11ac <UART_init+0x50e>
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	80 31       	cpi	r24, 0x10	; 16
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <UART_init+0x368>
    1004:	be c0       	rjmp	.+380    	; 0x1182 <UART_init+0x4e4>
    1006:	25 c1       	rjmp	.+586    	; 0x1252 <UART_init+0x5b4>
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	24 34       	cpi	r18, 0x44	; 68
    100e:	31 05       	cpc	r19, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <UART_init+0x376>
    1012:	63 c0       	rjmp	.+198    	; 0x10da <UART_init+0x43c>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	85 34       	cpi	r24, 0x45	; 69
    101a:	91 05       	cpc	r25, r1
    101c:	68 f4       	brcc	.+26     	; 0x1038 <UART_init+0x39a>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	3d 81       	ldd	r19, Y+5	; 0x05
    1022:	22 32       	cpi	r18, 0x22	; 34
    1024:	31 05       	cpc	r19, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <UART_init+0x38c>
    1028:	82 c0       	rjmp	.+260    	; 0x112e <UART_init+0x490>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	83 33       	cpi	r24, 0x33	; 51
    1030:	91 05       	cpc	r25, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <UART_init+0x398>
    1034:	67 c0       	rjmp	.+206    	; 0x1104 <UART_init+0x466>
    1036:	0d c1       	rjmp	.+538    	; 0x1252 <UART_init+0x5b4>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	2f 3c       	cpi	r18, 0xCF	; 207
    103e:	31 05       	cpc	r19, r1
    1040:	11 f1       	breq	.+68     	; 0x1086 <UART_init+0x3e8>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	80 3a       	cpi	r24, 0xA0	; 160
    104a:	92 07       	cpc	r25, r18
    104c:	31 f0       	breq	.+12     	; 0x105a <UART_init+0x3bc>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	87 36       	cpi	r24, 0x67	; 103
    1054:	91 05       	cpc	r25, r1
    1056:	61 f1       	breq	.+88     	; 0x10b0 <UART_init+0x412>
    1058:	fc c0       	rjmp	.+504    	; 0x1252 <UART_init+0x5b4>
					case UART_BR_2400 :   CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    105a:	a0 e4       	ldi	r26, 0x40	; 64
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e0 e4       	ldi	r30, 0x40	; 64
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 77       	andi	r24, 0x7F	; 127
    1066:	8c 93       	st	X, r24
					                      ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_2400 >>8));
    1068:	a0 e4       	ldi	r26, 0x40	; 64
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e0 e4       	ldi	r30, 0x40	; 64
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	8c 93       	st	X, r24
										  ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_2400);break;
    1076:	a9 e2       	ldi	r26, 0x29	; 41
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e9 e2       	ldi	r30, 0x29	; 41
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 6a       	ori	r24, 0xA0	; 160
    1082:	8c 93       	st	X, r24
    1084:	e6 c0       	rjmp	.+460    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_4800:     CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    1086:	a0 e4       	ldi	r26, 0x40	; 64
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e0 e4       	ldi	r30, 0x40	; 64
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 77       	andi	r24, 0x7F	; 127
    1092:	8c 93       	st	X, r24
										   ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_4800);
    1094:	a9 e2       	ldi	r26, 0x29	; 41
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e9 e2       	ldi	r30, 0x29	; 41
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8f 6c       	ori	r24, 0xCF	; 207
    10a0:	8c 93       	st	X, r24
										   ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_4800 >>8));break;
    10a2:	a0 e4       	ldi	r26, 0x40	; 64
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e0 e4       	ldi	r30, 0x40	; 64
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8c 93       	st	X, r24
    10ae:	d1 c0       	rjmp	.+418    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_9600:      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    10b0:	a0 e4       	ldi	r26, 0x40	; 64
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e0 e4       	ldi	r30, 0x40	; 64
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 77       	andi	r24, 0x7F	; 127
    10bc:	8c 93       	st	X, r24
					   	   	   	   	   	   	ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_9600);
    10be:	a9 e2       	ldi	r26, 0x29	; 41
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e9 e2       	ldi	r30, 0x29	; 41
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	87 66       	ori	r24, 0x67	; 103
    10ca:	8c 93       	st	X, r24
											ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_9600 >>8));break;
    10cc:	a0 e4       	ldi	r26, 0x40	; 64
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e0 e4       	ldi	r30, 0x40	; 64
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8c 93       	st	X, r24
    10d8:	bc c0       	rjmp	.+376    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_14400 :   CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    10da:	a0 e4       	ldi	r26, 0x40	; 64
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e0 e4       	ldi	r30, 0x40	; 64
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 77       	andi	r24, 0x7F	; 127
    10e6:	8c 93       	st	X, r24
										   ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_14400);
    10e8:	a9 e2       	ldi	r26, 0x29	; 41
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 e2       	ldi	r30, 0x29	; 41
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	84 64       	ori	r24, 0x44	; 68
    10f4:	8c 93       	st	X, r24
										   ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_14400 >>8));break;
    10f6:	a0 e4       	ldi	r26, 0x40	; 64
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e0 e4       	ldi	r30, 0x40	; 64
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8c 93       	st	X, r24
    1102:	a7 c0       	rjmp	.+334    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_19200:     CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    1104:	a0 e4       	ldi	r26, 0x40	; 64
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e0 e4       	ldi	r30, 0x40	; 64
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8f 77       	andi	r24, 0x7F	; 127
    1110:	8c 93       	st	X, r24
										    ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_19200);
    1112:	a9 e2       	ldi	r26, 0x29	; 41
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e9 e2       	ldi	r30, 0x29	; 41
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	83 63       	ori	r24, 0x33	; 51
    111e:	8c 93       	st	X, r24
											ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_19200 >>8));break;
    1120:	a0 e4       	ldi	r26, 0x40	; 64
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e0 e4       	ldi	r30, 0x40	; 64
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8c 93       	st	X, r24
    112c:	92 c0       	rjmp	.+292    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_28800:      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    112e:	a0 e4       	ldi	r26, 0x40	; 64
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e0 e4       	ldi	r30, 0x40	; 64
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8f 77       	andi	r24, 0x7F	; 127
    113a:	8c 93       	st	X, r24
					   	   	   	   	   	     ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_28800);
    113c:	a9 e2       	ldi	r26, 0x29	; 41
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e9 e2       	ldi	r30, 0x29	; 41
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	82 62       	ori	r24, 0x22	; 34
    1148:	8c 93       	st	X, r24
											 ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_28800 >>8));break;
    114a:	a0 e4       	ldi	r26, 0x40	; 64
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e0 e4       	ldi	r30, 0x40	; 64
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8c 93       	st	X, r24
    1156:	7d c0       	rjmp	.+250    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_38400 :      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    1158:	a0 e4       	ldi	r26, 0x40	; 64
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e0 e4       	ldi	r30, 0x40	; 64
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	8c 93       	st	X, r24
											  ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_38400);
    1166:	a9 e2       	ldi	r26, 0x29	; 41
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e9 e2       	ldi	r30, 0x29	; 41
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	89 61       	ori	r24, 0x19	; 25
    1172:	8c 93       	st	X, r24
											  ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_38400 >>8));break;
    1174:	a0 e4       	ldi	r26, 0x40	; 64
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e0 e4       	ldi	r30, 0x40	; 64
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8c 93       	st	X, r24
    1180:	68 c0       	rjmp	.+208    	; 0x1252 <UART_init+0x5b4>


					case UART_BR_57600:     CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    1182:	a0 e4       	ldi	r26, 0x40	; 64
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e0 e4       	ldi	r30, 0x40	; 64
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	8c 93       	st	X, r24
											ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_57600);
    1190:	a9 e2       	ldi	r26, 0x29	; 41
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e9 e2       	ldi	r30, 0x29	; 41
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	8c 93       	st	X, r24
										    ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_57600 >>8));break;
    119e:	a0 e4       	ldi	r26, 0x40	; 64
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e0 e4       	ldi	r30, 0x40	; 64
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	8c 93       	st	X, r24
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <UART_init+0x5b4>


					case UART_BR_76800:      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    11ac:	a0 e4       	ldi	r26, 0x40	; 64
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e0 e4       	ldi	r30, 0x40	; 64
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 77       	andi	r24, 0x7F	; 127
    11b8:	8c 93       	st	X, r24
						   	   	   	   	   	 ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_76800);
    11ba:	a9 e2       	ldi	r26, 0x29	; 41
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e2       	ldi	r30, 0x29	; 41
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8c 60       	ori	r24, 0x0C	; 12
    11c6:	8c 93       	st	X, r24
											 ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_76800 >>8));break;
    11c8:	a0 e4       	ldi	r26, 0x40	; 64
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e0 e4       	ldi	r30, 0x40	; 64
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8c 93       	st	X, r24
    11d4:	3e c0       	rjmp	.+124    	; 0x1252 <UART_init+0x5b4>

					case UART_BR_115200 :   CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    11d6:	a0 e4       	ldi	r26, 0x40	; 64
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e0 e4       	ldi	r30, 0x40	; 64
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 77       	andi	r24, 0x7F	; 127
    11e2:	8c 93       	st	X, r24
											ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_115200);
    11e4:	a9 e2       	ldi	r26, 0x29	; 41
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e9 e2       	ldi	r30, 0x29	; 41
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 60       	ori	r24, 0x08	; 8
    11f0:	8c 93       	st	X, r24
									        ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_115200 >>8));break;
    11f2:	a0 e4       	ldi	r26, 0x40	; 64
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e0 e4       	ldi	r30, 0x40	; 64
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8c 93       	st	X, r24
    11fe:	29 c0       	rjmp	.+82     	; 0x1252 <UART_init+0x5b4>



					case UART_BR_250000:      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    1200:	a0 e4       	ldi	r26, 0x40	; 64
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e0 e4       	ldi	r30, 0x40	; 64
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	8c 93       	st	X, r24
								   	   	      ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_250000);
    120e:	a9 e2       	ldi	r26, 0x29	; 41
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e9 e2       	ldi	r30, 0x29	; 41
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	83 60       	ori	r24, 0x03	; 3
    121a:	8c 93       	st	X, r24
											  ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_250000 >>8));break;
    121c:	a0 e4       	ldi	r26, 0x40	; 64
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e0 e4       	ldi	r30, 0x40	; 64
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8c 93       	st	X, r24
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <UART_init+0x5b4>

					case UART_BR_500000:      CLR_BIT(UART_u8_UCSRC_REG,UART_u8_UCSRC_URSEL_BIT);
    122a:	a0 e4       	ldi	r26, 0x40	; 64
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e0 e4       	ldi	r30, 0x40	; 64
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	8c 93       	st	X, r24
										      ASSIGN_REG(UART_u8_UBRRL_REG,UART_BR_500000);
    1238:	a9 e2       	ldi	r26, 0x29	; 41
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e2       	ldi	r30, 0x29	; 41
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24
											  ASSIGN_REG(UART_u8_UBRRH_REG,(UART_BR_500000 >>8));break;
    1246:	a0 e4       	ldi	r26, 0x40	; 64
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e0 e4       	ldi	r30, 0x40	; 64
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8c 93       	st	X, r24
				}

		}
		return return_value;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	2d 96       	adiw	r28, 0x0d	; 13
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <UART_ASYNC_write_byte>:
 * Arguments   :  UART : pointer to UART post-build configurations
 * 				Copy_u16Data :  DATA will be send
 * Return      :  E_OK,E_NOK
 */

Std_ReturnType UART_ASYNC_write_byte(UART_CONF_t *UART,u16 Copy_u16Data){
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <UART_ASYNC_write_byte+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <UART_ASYNC_write_byte+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9b 83       	std	Y+3, r25	; 0x03
    1276:	8a 83       	std	Y+2, r24	; 0x02
    1278:	7d 83       	std	Y+5, r23	; 0x05
    127a:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
		if ((Copy_u16Data > 0xFFFF )||(UART == NULL)){
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	11 f4       	brne	.+4      	; 0x128c <UART_ASYNC_write_byte+0x26>
			return_value = E_NOK;
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	39 c0       	rjmp	.+114    	; 0x12fe <UART_ASYNC_write_byte+0x98>
		}
		else {
			SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXEN_BIT);
    128c:	aa e2       	ldi	r26, 0x2A	; 42
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ea e2       	ldi	r30, 0x2A	; 42
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	88 60       	ori	r24, 0x08	; 8
    1298:	8c 93       	st	X, r24
			if (UART->UART_data_size == UART_DATA_SIZE_9_BIT){
    129a:	ea 81       	ldd	r30, Y+2	; 0x02
    129c:	fb 81       	ldd	r31, Y+3	; 0x03
    129e:	83 81       	ldd	r24, Z+3	; 0x03
    12a0:	87 30       	cpi	r24, 0x07	; 7
    12a2:	e9 f4       	brne	.+58     	; 0x12de <UART_ASYNC_write_byte+0x78>
				while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)==0);
    12a4:	eb e2       	ldi	r30, 0x2B	; 43
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	82 95       	swap	r24
    12ac:	86 95       	lsr	r24
    12ae:	87 70       	andi	r24, 0x07	; 7
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	81 70       	andi	r24, 0x01	; 1
    12b6:	90 70       	andi	r25, 0x00	; 0
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	a1 f3       	breq	.-24     	; 0x12a4 <UART_ASYNC_write_byte+0x3e>
				ASSIGN_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXB8_BIT,((Copy_u16Data>>8)&0x01));
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	20 81       	ld	r18, Z
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	89 2f       	mov	r24, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	82 2b       	or	r24, r18
    12d2:	8c 93       	st	X, r24
				UART_u8_UDR_REG = (u8)Copy_u16Data;
    12d4:	ec e2       	ldi	r30, 0x2C	; 44
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	80 83       	st	Z, r24
    12dc:	10 c0       	rjmp	.+32     	; 0x12fe <UART_ASYNC_write_byte+0x98>
			}
			else {
				while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)==0);
    12de:	eb e2       	ldi	r30, 0x2B	; 43
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	82 95       	swap	r24
    12e6:	86 95       	lsr	r24
    12e8:	87 70       	andi	r24, 0x07	; 7
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	a1 f3       	breq	.-24     	; 0x12de <UART_ASYNC_write_byte+0x78>
				UART_u8_UDR_REG = Copy_u16Data;
    12f6:	ec e2       	ldi	r30, 0x2C	; 44
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	80 83       	st	Z, r24
			}
		 }
				return return_value;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <UART_ASYNC_read_byte>:
 * Arguments   :  UART : pointer to UART post-build configurations
 * 					Copy_Pu16Data => pointer to variable store received data
 * Return      :  E_OK,E_NOK
 */

Std_ReturnType UART_ASYNC_read_byte(UART_CONF_t *UART,u16 *Copy_Pu16Data){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <UART_ASYNC_read_byte+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <UART_ASYNC_read_byte+0x8>
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	7d 83       	std	Y+5, r23	; 0x05
    1324:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
			if ((Copy_Pu16Data == NULL )||(UART == NULL)){
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	21 f0       	breq	.+8      	; 0x133a <UART_ASYNC_read_byte+0x2a>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	11 f4       	brne	.+4      	; 0x133e <UART_ASYNC_read_byte+0x2e>
				return_value = E_NOK;
    133a:	19 82       	std	Y+1, r1	; 0x01
    133c:	35 c0       	rjmp	.+106    	; 0x13a8 <UART_ASYNC_read_byte+0x98>
			}
			else {
				SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXEN_BIT);
    133e:	aa e2       	ldi	r26, 0x2A	; 42
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	ea e2       	ldi	r30, 0x2A	; 42
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 61       	ori	r24, 0x10	; 16
    134a:	8c 93       	st	X, r24
				if (UART->UART_data_size == UART_DATA_SIZE_9_BIT){
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	83 81       	ldd	r24, Z+3	; 0x03
    1352:	87 30       	cpi	r24, 0x07	; 7
    1354:	d9 f4       	brne	.+54     	; 0x138c <UART_ASYNC_read_byte+0x7c>
					while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT== 0));
    1356:	eb e2       	ldi	r30, 0x2B	; 43
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 23       	and	r24, r24
    135e:	dc f7       	brge	.-10     	; 0x1356 <UART_ASYNC_read_byte+0x46>
				*Copy_Pu16Data =  GET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXB8_BIT);
    1360:	ea e2       	ldi	r30, 0x2A	; 42
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	86 95       	lsr	r24
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	90 70       	andi	r25, 0x00	; 0
    1370:	ec 81       	ldd	r30, Y+4	; 0x04
    1372:	fd 81       	ldd	r31, Y+5	; 0x05
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
				*Copy_Pu16Data = (u8)UART_u8_UDR_REG;
    1378:	ec e2       	ldi	r30, 0x2C	; 44
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	ec 81       	ldd	r30, Y+4	; 0x04
    1384:	fd 81       	ldd	r31, Y+5	; 0x05
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <UART_ASYNC_read_byte+0x98>

				}
				else {
					while(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT)==0);
    138c:	eb e2       	ldi	r30, 0x2B	; 43
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	88 23       	and	r24, r24
    1394:	dc f7       	brge	.-10     	; 0x138c <UART_ASYNC_read_byte+0x7c>

					 *Copy_Pu16Data = (u8) UART_u8_UDR_REG ;
    1396:	ec e2       	ldi	r30, 0x2C	; 44
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	ec 81       	ldd	r30, Y+4	; 0x04
    13a2:	fd 81       	ldd	r31, Y+5	; 0x05
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
				}
			 }
					return return_value;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <UART_ASYNC_write_string>:
 * Description : send string at uart tx pin
 * Arguments   :  UART : pointer to UART post-build configurations
 * 					Copy_Pu8Str => pointer to string will be sent
 * Return      :  E_OK,E_NOK
 */
Std_ReturnType UART_ASYNC_write_string(UART_CONF_t *UART, u16 *Copy_Pu8Str){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <UART_ASYNC_write_string+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <UART_ASYNC_write_string+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	9b 83       	std	Y+3, r25	; 0x03
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	7d 83       	std	Y+5, r23	; 0x05
    13ce:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_Pu8Str == NULL )||(UART == NULL)){
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	21 f0       	breq	.+8      	; 0x13e4 <UART_ASYNC_write_string+0x2a>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	81 f4       	brne	.+32     	; 0x1404 <UART_ASYNC_write_string+0x4a>
				return_value = E_NOK;
    13e4:	19 82       	std	Y+1, r1	; 0x01
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <UART_ASYNC_write_string+0x56>
			}
			else {
				while (*Copy_Pu8Str != '\0'){
					UART_ASYNC_write_byte(UART,*Copy_Pu8Str);
    13e8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ea:	fd 81       	ldd	r31, Y+5	; 0x05
    13ec:	20 81       	ld	r18, Z
    13ee:	31 81       	ldd	r19, Z+1	; 0x01
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	b9 01       	movw	r22, r18
    13f6:	0e 94 33 09 	call	0x1266	; 0x1266 <UART_ASYNC_write_byte>
		                 Copy_Pu8Str++;
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	02 96       	adiw	r24, 0x02	; 2
    1400:	9d 83       	std	Y+5, r25	; 0x05
    1402:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType return_value = E_OK;
	if ((Copy_Pu8Str == NULL )||(UART == NULL)){
				return_value = E_NOK;
			}
			else {
				while (*Copy_Pu8Str != '\0'){
    1404:	ec 81       	ldd	r30, Y+4	; 0x04
    1406:	fd 81       	ldd	r31, Y+5	; 0x05
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	61 f7       	brne	.-40     	; 0x13e8 <UART_ASYNC_write_string+0x2e>
		                 Copy_Pu8Str++;
				}
				}


					return return_value;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <UART_ASYNC_read_string>:
 * Description : receive string at RX pin
 * Arguments   :  UART : pointer to UART post-build configurations
 * 					Copy_Pu8Str => pointer to string store received data
 * Return      :  E_OK,E_NOK
 */
Std_ReturnType UART_ASYNC_read_string(UART_CONF_t *UART ,u16 *Copy_Pu8Str){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <UART_ASYNC_read_string+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <UART_ASYNC_read_string+0x8>
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9b 83       	std	Y+3, r25	; 0x03
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	7d 83       	std	Y+5, r23	; 0x05
    1436:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_Pu8Str == NULL )||(UART == NULL)){
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	21 f0       	breq	.+8      	; 0x144c <UART_ASYNC_read_string+0x2a>
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	71 f4       	brne	.+28     	; 0x1468 <UART_ASYNC_read_string+0x46>
				return_value = E_NOK;
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <UART_ASYNC_read_string+0x52>
			}
	else {
		while (*Copy_Pu8Str != '\0'){
						UART_ASYNC_read_byte(UART,Copy_Pu8Str);
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	b9 01       	movw	r22, r18
    145a:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_ASYNC_read_byte>
						Copy_Pu8Str++;
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	9d 83       	std	Y+5, r25	; 0x05
    1466:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType return_value = E_OK;
	if ((Copy_Pu8Str == NULL )||(UART == NULL)){
				return_value = E_NOK;
			}
	else {
		while (*Copy_Pu8Str != '\0'){
    1468:	ec 81       	ldd	r30, Y+4	; 0x04
    146a:	fd 81       	ldd	r31, Y+5	; 0x05
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	71 f7       	brne	.-36     	; 0x1450 <UART_ASYNC_read_string+0x2e>
						Copy_Pu8Str++;
						}
						}


					return return_value;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <G_INT_Enable>:
/*Name:			G_INT_Enable
 * Description: Enable Global Interrupts
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
  */
Std_ReturnType G_INT_Enable(void){
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
	G_INT_u8_SREG_REG.I_bit = 1;
    1494:	ef e5       	ldi	r30, 0x5F	; 95
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 68       	ori	r24, 0x80	; 128
    149c:	80 83       	st	Z, r24


	return return_value;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <G_INT_Disable>:
/*Name:		G_INT_Disable
* Description: disable Global Interrupts
* Arguments: 	void
* Return :	  	return_value {E_ok,E-NOK}
 */
Std_ReturnType G_INT_Disable(void){
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT  (G_INT_u8_SREG_REG.G_INT_u8_SREG,G_INT_u8_SREG_I_BIT);
    14b6:	af e5       	ldi	r26, 0x5F	; 95
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ef e5       	ldi	r30, 0x5F	; 95
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8f 77       	andi	r24, 0x7F	; 127
    14c2:	8c 93       	st	X, r24

		return return_value;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <GPT_init>:
static Std_ReturnType GPT_INT_enable(GPT_t *GPT);
static Std_ReturnType GPT_set_cbf(const GPT_t *GPT);
static Std_ReturnType GPT_set_mode(GPT_t *GPT);
/*****************************Function definitions ***********************************************************/

Std_ReturnType GPT_init (GPT_t *GPT){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <GPT_init+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
	if (GPT == NULL){
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	11 f4       	brne	.+4      	; 0x14ee <GPT_init+0x20>
		return_value = E_NOK;
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	0e c0       	rjmp	.+28     	; 0x150a <GPT_init+0x3c>
	}
	else {
		G_INT_Enable();
    14ee:	0e 94 43 0a 	call	0x1486	; 0x1486 <G_INT_Enable>
		GPT_INT_enable (GPT);
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <GPT_INT_enable>
		GPT_set_mode(GPT);
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <GPT_set_mode>
		GPT_set_cbf(GPT);
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	9b 81       	ldd	r25, Y+3	; 0x03
    1506:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <GPT_set_cbf>
	}
	return return_value;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <GPT_start_timer>:
/****************************************************************************************************************************************/
Std_ReturnType GPT_start_timer (GPT_t *GPT){
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <GPT_start_timer+0x6>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	9b 83       	std	Y+3, r25	; 0x03
    1526:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	89 83       	std	Y+1, r24	; 0x01
		if (GPT == NULL){
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	11 f4       	brne	.+4      	; 0x1538 <GPT_start_timer+0x20>
			return_value = E_NOK;
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <GPT_start_timer+0x28>
		}
		else {
			GPT_set_prescaler(GPT);
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	0e 94 3e 0c 	call	0x187c	; 0x187c <GPT_set_prescaler>
			}
		return return_value;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <GPT_stop_timer>:


Std_ReturnType GPT_stop_timer (GPT_t *GPT){
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <GPT_stop_timer+0x6>
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9b 83       	std	Y+3, r25	; 0x03
    155c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
			if (GPT == NULL){
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	11 f4       	brne	.+4      	; 0x156e <GPT_stop_timer+0x20>
				return_value = E_NOK;
    156a:	19 82       	std	Y+1, r1	; 0x01
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <GPT_stop_timer+0x28>
			}
			else {
				GPT_disable(GPT);
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	0e 94 a6 0b 	call	0x174c	; 0x174c <GPT_disable>
}
			return return_value;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <GPT_write_value>:

Std_ReturnType GPT_write_value (GPT_t *GPT,u16 value){
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	27 97       	sbiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	9b 83       	std	Y+3, r25	; 0x03
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	7d 83       	std	Y+5, r23	; 0x05
    159e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	89 83       	std	Y+1, r24	; 0x01
		if (GPT == NULL){
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	11 f4       	brne	.+4      	; 0x15b0 <GPT_write_value+0x2c>
			return_value = E_NOK;
    15ac:	19 82       	std	Y+1, r1	; 0x01
    15ae:	23 c0       	rjmp	.+70     	; 0x15f6 <GPT_write_value+0x72>
		}
		else {
			switch (GPT->GPT_num) {
    15b0:	ea 81       	ldd	r30, Y+2	; 0x02
    15b2:	fb 81       	ldd	r31, Y+3	; 0x03
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	e1 f4       	brne	.+56     	; 0x15f6 <GPT_write_value+0x72>
				case GPT_TIMER0:
					switch (GPT->GPT_mode) {
    15be:	ea 81       	ldd	r30, Y+2	; 0x02
    15c0:	fb 81       	ldd	r31, Y+3	; 0x03
    15c2:	83 81       	ldd	r24, Z+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3f 83       	std	Y+7, r19	; 0x07
    15ca:	2e 83       	std	Y+6, r18	; 0x06
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <GPT_write_value+0x5c>
    15d4:	2e 81       	ldd	r18, Y+6	; 0x06
    15d6:	3f 81       	ldd	r19, Y+7	; 0x07
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	31 f0       	breq	.+12     	; 0x15ea <GPT_write_value+0x66>
    15de:	0a c0       	rjmp	.+20     	; 0x15f4 <GPT_write_value+0x70>
						case GPT_NORMAL_MODE:
							GPT_u8_TCNT0_REG = (u8)value;
    15e0:	e2 e5       	ldi	r30, 0x52	; 82
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	80 83       	st	Z, r24
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <GPT_write_value+0x72>
							break;
						case GPT_CTC_MODE:
							GPT_u8_OCR0_REG = (u8)value;
    15ea:	ec e5       	ldi	r30, 0x5C	; 92
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	80 83       	st	Z, r24
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <GPT_write_value+0x72>
							break;
						default : return_value = E_NOK;  break;
    15f4:	19 82       	std	Y+1, r1	; 0x01
					}
					break;
			}
			}
		return return_value;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
		}
    15f8:	27 96       	adiw	r28, 0x07	; 7
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <GPT_read_value>:


Std_ReturnType GPT_read_value (GPT_t *GPT,u16 *value){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	27 97       	sbiw	r28, 0x07	; 7
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	7d 83       	std	Y+5, r23	; 0x05
    1624:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
		if (GPT == NULL){
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	11 f4       	brne	.+4      	; 0x1636 <GPT_read_value+0x2c>
			return_value = E_NOK;
    1632:	19 82       	std	Y+1, r1	; 0x01
    1634:	27 c0       	rjmp	.+78     	; 0x1684 <GPT_read_value+0x7a>
		}
		else {
			switch (GPT->GPT_num) {
    1636:	ea 81       	ldd	r30, Y+2	; 0x02
    1638:	fb 81       	ldd	r31, Y+3	; 0x03
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	01 f5       	brne	.+64     	; 0x1684 <GPT_read_value+0x7a>
				case GPT_TIMER0:
					switch (GPT->GPT_mode) {
    1644:	ea 81       	ldd	r30, Y+2	; 0x02
    1646:	fb 81       	ldd	r31, Y+3	; 0x03
    1648:	83 81       	ldd	r24, Z+3	; 0x03
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3f 83       	std	Y+7, r19	; 0x07
    1650:	2e 83       	std	Y+6, r18	; 0x06
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	31 f0       	breq	.+12     	; 0x1666 <GPT_read_value+0x5c>
    165a:	2e 81       	ldd	r18, Y+6	; 0x06
    165c:	3f 81       	ldd	r19, Y+7	; 0x07
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	41 f0       	breq	.+16     	; 0x1674 <GPT_read_value+0x6a>
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <GPT_read_value+0x78>
						case GPT_NORMAL_MODE:
							*(u8*)value = GPT_u8_TCNT0_REG ;
    1666:	ec 81       	ldd	r30, Y+4	; 0x04
    1668:	fd 81       	ldd	r31, Y+5	; 0x05
    166a:	a2 e5       	ldi	r26, 0x52	; 82
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	8c 91       	ld	r24, X
    1670:	80 83       	st	Z, r24
    1672:	08 c0       	rjmp	.+16     	; 0x1684 <GPT_read_value+0x7a>
							break;
						case GPT_CTC_MODE:
							*(u8*)value =	GPT_u8_OCR0_REG ;
    1674:	ec 81       	ldd	r30, Y+4	; 0x04
    1676:	fd 81       	ldd	r31, Y+5	; 0x05
    1678:	ac e5       	ldi	r26, 0x5C	; 92
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	8c 91       	ld	r24, X
    167e:	80 83       	st	Z, r24
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <GPT_read_value+0x7a>
							break;
						default : return_value = E_NOK;  break;
    1682:	19 82       	std	Y+1, r1	; 0x01
					}
					break;
			}
			}
		return return_value;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1686:	27 96       	adiw	r28, 0x07	; 7
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <__vector_11>:


/******************** timer0 overflow ISR *****************************************************/
void __vector_11(void) __attribute((signal,used));
void __vector_11(void)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
 GPT_INT_HANDLER.GPT_0_INT_OVF_HANDLER ();
    16c2:	e0 91 e3 00 	lds	r30, 0x00E3
    16c6:	f0 91 e4 00 	lds	r31, 0x00E4
    16ca:	09 95       	icall
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_10>:
/******************** timer0 CTC ISR *********************************************************/
void __vector_10(void) __attribute((signal,used));
void __vector_10(void){
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	 GPT_INT_HANDLER.GPT_0_INT_CTC_HANDLER ();
    171c:	e0 91 e5 00 	lds	r30, 0x00E5
    1720:	f0 91 e6 00 	lds	r31, 0x00E6
    1724:	09 95       	icall

}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <GPT_disable>:



/*********************************************helper functions************************************************************/

static Std_ReturnType GPT_disable(GPT_t *GPT){
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <GPT_disable+0x6>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01
		if (GPT == NULL){
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	11 f4       	brne	.+4      	; 0x176c <GPT_disable+0x20>
			return_value = E_NOK;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	1c c0       	rjmp	.+56     	; 0x17a4 <GPT_disable+0x58>
		}
		else {
			switch (GPT->GPT_num) {
    176c:	ea 81       	ldd	r30, Y+2	; 0x02
    176e:	fb 81       	ldd	r31, Y+3	; 0x03
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	a9 f4       	brne	.+42     	; 0x17a4 <GPT_disable+0x58>
				case GPT_TIMER0:
				CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8e 7f       	andi	r24, 0xFE	; 254
    1786:	8c 93       	st	X, r24
				CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    1788:	a3 e5       	ldi	r26, 0x53	; 83
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e3 e5       	ldi	r30, 0x53	; 83
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8d 7f       	andi	r24, 0xFD	; 253
    1794:	8c 93       	st	X, r24
				CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8b 7f       	andi	r24, 0xFB	; 251
    17a2:	8c 93       	st	X, r24
				break;
			}

		}
		return return_value;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <GPT_set_mode>:

static Std_ReturnType GPT_set_mode(GPT_t *GPT){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <GPT_set_mode+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <GPT_set_mode+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9b 83       	std	Y+3, r25	; 0x03
    17c2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
			if (GPT == NULL){
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <GPT_set_mode+0x20>
				return_value = E_NOK;
    17d0:	19 82       	std	Y+1, r1	; 0x01
			}
	switch (GPT->GPT_num) {
    17d2:	ea 81       	ldd	r30, Y+2	; 0x02
    17d4:	fb 81       	ldd	r31, Y+3	; 0x03
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	09 f0       	breq	.+2      	; 0x17e2 <GPT_set_mode+0x30>
    17e0:	44 c0       	rjmp	.+136    	; 0x186a <GPT_set_mode+0xb8>
		case GPT_TIMER0:
			switch (GPT->GPT_mode) {
    17e2:	ea 81       	ldd	r30, Y+2	; 0x02
    17e4:	fb 81       	ldd	r31, Y+3	; 0x03
    17e6:	83 81       	ldd	r24, Z+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3d 83       	std	Y+5, r19	; 0x05
    17ee:	2c 83       	std	Y+4, r18	; 0x04
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	9d 81       	ldd	r25, Y+5	; 0x05
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	31 f0       	breq	.+12     	; 0x1804 <GPT_set_mode+0x52>
    17f8:	2c 81       	ldd	r18, Y+4	; 0x04
    17fa:	3d 81       	ldd	r19, Y+5	; 0x05
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	d1 f0       	breq	.+52     	; 0x1836 <GPT_set_mode+0x84>
    1802:	32 c0       	rjmp	.+100    	; 0x1868 <GPT_set_mode+0xb6>
				case GPT_NORMAL_MODE:

					CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_WGM00_BIT);
    1804:	a3 e5       	ldi	r26, 0x53	; 83
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e3 e5       	ldi	r30, 0x53	; 83
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 7b       	andi	r24, 0xBF	; 191
    1810:	8c 93       	st	X, r24
					CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_WGM01_BIT);
    1812:	a3 e5       	ldi	r26, 0x53	; 83
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e3 e5       	ldi	r30, 0x53	; 83
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	87 7f       	andi	r24, 0xF7	; 247
    181e:	8c 93       	st	X, r24
					ASSIGN_REG(GPT_u8_TCNT0_REG,(u8)GPT->GPT_preload_value);
    1820:	a2 e5       	ldi	r26, 0x52	; 82
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e2 e5       	ldi	r30, 0x52	; 82
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	90 81       	ld	r25, Z
    182a:	ea 81       	ldd	r30, Y+2	; 0x02
    182c:	fb 81       	ldd	r31, Y+3	; 0x03
    182e:	85 81       	ldd	r24, Z+5	; 0x05
    1830:	89 2b       	or	r24, r25
    1832:	8c 93       	st	X, r24
    1834:	1a c0       	rjmp	.+52     	; 0x186a <GPT_set_mode+0xb8>

					break;
				case GPT_CTC_MODE:
					CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_WGM00_BIT);
    1836:	a3 e5       	ldi	r26, 0x53	; 83
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e3 e5       	ldi	r30, 0x53	; 83
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	8c 93       	st	X, r24
					SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_WGM01_BIT);
    1844:	a3 e5       	ldi	r26, 0x53	; 83
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e3 e5       	ldi	r30, 0x53	; 83
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 60       	ori	r24, 0x08	; 8
    1850:	8c 93       	st	X, r24
					ASSIGN_REG(GPT_u8_OCR0_REG,(u8)GPT->GPT_compare_match_value);
    1852:	ac e5       	ldi	r26, 0x5C	; 92
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ec e5       	ldi	r30, 0x5C	; 92
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	90 81       	ld	r25, Z
    185c:	ea 81       	ldd	r30, Y+2	; 0x02
    185e:	fb 81       	ldd	r31, Y+3	; 0x03
    1860:	86 81       	ldd	r24, Z+6	; 0x06
    1862:	89 2b       	or	r24, r25
    1864:	8c 93       	st	X, r24
    1866:	01 c0       	rjmp	.+2      	; 0x186a <GPT_set_mode+0xb8>
					break;
				default : return_value = E_NOK;  break;
    1868:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return return_value ;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GPT_set_prescaler>:

static Std_ReturnType GPT_set_prescaler(GPT_t *GPT){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GPT_set_prescaler+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPT_set_prescaler+0x8>
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	9b 83       	std	Y+3, r25	; 0x03
    188c:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01

	if (GPT == NULL){
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	11 f4       	brne	.+4      	; 0x189e <GPT_set_prescaler+0x22>
			return_value = E_NOK;
    189a:	19 82       	std	Y+1, r1	; 0x01
    189c:	f2 c0       	rjmp	.+484    	; 0x1a82 <GPT_set_prescaler+0x206>
		}
		else {
		switch (GPT->GPT_num) {
    189e:	ea 81       	ldd	r30, Y+2	; 0x02
    18a0:	fb 81       	ldd	r31, Y+3	; 0x03
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	09 f0       	breq	.+2      	; 0x18ae <GPT_set_prescaler+0x32>
    18ac:	ea c0       	rjmp	.+468    	; 0x1a82 <GPT_set_prescaler+0x206>
			case GPT_TIMER0:
			switch (GPT->GPT_clk) {
    18ae:	ea 81       	ldd	r30, Y+2	; 0x02
    18b0:	fb 81       	ldd	r31, Y+3	; 0x03
    18b2:	84 81       	ldd	r24, Z+4	; 0x04
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3d 83       	std	Y+5, r19	; 0x05
    18ba:	2c 83       	std	Y+4, r18	; 0x04
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	91 05       	cpc	r25, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <GPT_set_prescaler+0x4c>
    18c6:	70 c0       	rjmp	.+224    	; 0x19a8 <GPT_set_prescaler+0x12c>
    18c8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ca:	3d 81       	ldd	r19, Y+5	; 0x05
    18cc:	24 30       	cpi	r18, 0x04	; 4
    18ce:	31 05       	cpc	r19, r1
    18d0:	84 f4       	brge	.+32     	; 0x18f2 <GPT_set_prescaler+0x76>
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	d1 f1       	breq	.+116    	; 0x1950 <GPT_set_prescaler+0xd4>
    18dc:	2c 81       	ldd	r18, Y+4	; 0x04
    18de:	3d 81       	ldd	r19, Y+5	; 0x05
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <GPT_set_prescaler+0x6c>
    18e6:	4a c0       	rjmp	.+148    	; 0x197c <GPT_set_prescaler+0x100>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	d1 f0       	breq	.+52     	; 0x1924 <GPT_set_prescaler+0xa8>
    18f0:	c8 c0       	rjmp	.+400    	; 0x1a82 <GPT_set_prescaler+0x206>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	25 30       	cpi	r18, 0x05	; 5
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <GPT_set_prescaler+0x82>
    18fc:	81 c0       	rjmp	.+258    	; 0x1a00 <GPT_set_prescaler+0x184>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	91 05       	cpc	r25, r1
    1906:	0c f4       	brge	.+2      	; 0x190a <GPT_set_prescaler+0x8e>
    1908:	65 c0       	rjmp	.+202    	; 0x19d4 <GPT_set_prescaler+0x158>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	26 30       	cpi	r18, 0x06	; 6
    1910:	31 05       	cpc	r19, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <GPT_set_prescaler+0x9a>
    1914:	8b c0       	rjmp	.+278    	; 0x1a2c <GPT_set_prescaler+0x1b0>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	87 30       	cpi	r24, 0x07	; 7
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <GPT_set_prescaler+0xa6>
    1920:	9b c0       	rjmp	.+310    	; 0x1a58 <GPT_set_prescaler+0x1dc>
    1922:	af c0       	rjmp	.+350    	; 0x1a82 <GPT_set_prescaler+0x206>
				case  GPT_NO_CLK :
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    1924:	a3 e5       	ldi	r26, 0x53	; 83
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e3 e5       	ldi	r30, 0x53	; 83
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8e 7f       	andi	r24, 0xFE	; 254
    1930:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    1932:	a3 e5       	ldi	r26, 0x53	; 83
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e3 e5       	ldi	r30, 0x53	; 83
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8d 7f       	andi	r24, 0xFD	; 253
    193e:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1940:	a3 e5       	ldi	r26, 0x53	; 83
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e3 e5       	ldi	r30, 0x53	; 83
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8b 7f       	andi	r24, 0xFB	; 251
    194c:	8c 93       	st	X, r24
    194e:	99 c0       	rjmp	.+306    	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_PRESCALER_1 :
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    1950:	a3 e5       	ldi	r26, 0x53	; 83
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e3 e5       	ldi	r30, 0x53	; 83
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    195e:	a3 e5       	ldi	r26, 0x53	; 83
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e3 e5       	ldi	r30, 0x53	; 83
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    196c:	a3 e5       	ldi	r26, 0x53	; 83
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e3 e5       	ldi	r30, 0x53	; 83
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8b 7f       	andi	r24, 0xFB	; 251
    1978:	8c 93       	st	X, r24
    197a:	83 c0       	rjmp	.+262    	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_PRESCALER_8 :
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    197c:	a3 e5       	ldi	r26, 0x53	; 83
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e3 e5       	ldi	r30, 0x53	; 83
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    198a:	a3 e5       	ldi	r26, 0x53	; 83
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e3 e5       	ldi	r30, 0x53	; 83
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1998:	a3 e5       	ldi	r26, 0x53	; 83
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e3 e5       	ldi	r30, 0x53	; 83
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8b 7f       	andi	r24, 0xFB	; 251
    19a4:	8c 93       	st	X, r24
    19a6:	6d c0       	rjmp	.+218    	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_PRESCALER_64 :
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    19a8:	a3 e5       	ldi	r26, 0x53	; 83
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e3 e5       	ldi	r30, 0x53	; 83
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    19b6:	a3 e5       	ldi	r26, 0x53	; 83
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e3 e5       	ldi	r30, 0x53	; 83
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    19c4:	a3 e5       	ldi	r26, 0x53	; 83
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e3 e5       	ldi	r30, 0x53	; 83
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8b 7f       	andi	r24, 0xFB	; 251
    19d0:	8c 93       	st	X, r24
    19d2:	57 c0       	rjmp	.+174    	; 0x1a82 <GPT_set_prescaler+0x206>
									break;

				case  GPT_PRESCALER_256 :
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    19d4:	a3 e5       	ldi	r26, 0x53	; 83
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e3 e5       	ldi	r30, 0x53	; 83
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8d 7f       	andi	r24, 0xFD	; 253
    19ee:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    19f0:	a3 e5       	ldi	r26, 0x53	; 83
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e5       	ldi	r30, 0x53	; 83
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	84 60       	ori	r24, 0x04	; 4
    19fc:	8c 93       	st	X, r24
    19fe:	41 c0       	rjmp	.+130    	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_PRESCALER_1024 :
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    1a00:	a3 e5       	ldi	r26, 0x53	; 83
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e3 e5       	ldi	r30, 0x53	; 83
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	8c 93       	st	X, r24
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    1a0e:	a3 e5       	ldi	r26, 0x53	; 83
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e3 e5       	ldi	r30, 0x53	; 83
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8d 7f       	andi	r24, 0xFD	; 253
    1a1a:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1a1c:	a3 e5       	ldi	r26, 0x53	; 83
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e3 e5       	ldi	r30, 0x53	; 83
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	84 60       	ori	r24, 0x04	; 4
    1a28:	8c 93       	st	X, r24
    1a2a:	2b c0       	rjmp	.+86     	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_EXT_CLK_FALLING :
									CLR_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    1a2c:	a3 e5       	ldi	r26, 0x53	; 83
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e3 e5       	ldi	r30, 0x53	; 83
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8e 7f       	andi	r24, 0xFE	; 254
    1a38:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    1a3a:	a3 e5       	ldi	r26, 0x53	; 83
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e5       	ldi	r30, 0x53	; 83
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	8c 93       	st	X, r24
    1a56:	15 c0       	rjmp	.+42     	; 0x1a82 <GPT_set_prescaler+0x206>
									break;
				case  GPT_EXT_CLK_RISING :
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS00_BIT);
    1a58:	a3 e5       	ldi	r26, 0x53	; 83
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e5       	ldi	r30, 0x53	; 83
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS01_BIT);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	8c 93       	st	X, r24
									SET_BIT(GPT_u8_TCCR0_REG,GPT_u8_TCCR0_CS02_BIT);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	8c 93       	st	X, r24
									break;
}
			break;
		}
		}
	return return_value ;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <GPT_INT_enable>:

static Std_ReturnType GPT_INT_enable(GPT_t *GPT){
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <GPT_INT_enable+0x6>
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GPT_INT_enable+0x8>
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
			if (GPT == NULL){
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <GPT_INT_enable+0x22>
				return_value = E_NOK;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	27 c0       	rjmp	.+78     	; 0x1b04 <GPT_INT_enable+0x70>
			}
			else {
				switch (GPT->GPT_num) {
    1ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	01 f5       	brne	.+64     	; 0x1b04 <GPT_INT_enable+0x70>
					case GPT_TIMER0:
						switch(GPT->GPT_mode){
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	83 81       	ldd	r24, Z+3	; 0x03
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3d 83       	std	Y+5, r19	; 0x05
    1ad0:	2c 83       	std	Y+4, r18	; 0x04
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <GPT_INT_enable+0x52>
    1ada:	2c 81       	ldd	r18, Y+4	; 0x04
    1adc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	49 f0       	breq	.+18     	; 0x1af6 <GPT_INT_enable+0x62>
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <GPT_INT_enable+0x70>
						case GPT_NORMAL_MODE: SET_BIT(GPT_u8_TIMSK_REG,GPT_u8_TIMSK_TOIE0_BIT);break;
    1ae6:	a9 e5       	ldi	r26, 0x59	; 89
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e9 e5       	ldi	r30, 0x59	; 89
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	81 60       	ori	r24, 0x01	; 1
    1af2:	8c 93       	st	X, r24
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <GPT_INT_enable+0x70>
						case GPT_CTC_MODE:    SET_BIT(GPT_u8_TIMSK_REG,GPT_u8_TIMSK_OCIE0_BIT);break;
    1af6:	a9 e5       	ldi	r26, 0x59	; 89
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e9 e5       	ldi	r30, 0x59	; 89
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	82 60       	ori	r24, 0x02	; 2
    1b02:	8c 93       	st	X, r24
						}
					break;
				}

			}
			return return_value;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <GPT_set_cbf>:

static Std_ReturnType GPT_set_cbf(const GPT_t *GPT){
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPT_set_cbf+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <GPT_set_cbf+0x8>
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9b 83       	std	Y+3, r25	; 0x03
    1b26:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
			if (GPT == NULL){
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	11 f4       	brne	.+4      	; 0x1b38 <GPT_set_cbf+0x22>
				return_value = E_NOK;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	29 c0       	rjmp	.+82     	; 0x1b8a <GPT_set_cbf+0x74>
			}
			else {
				switch (GPT->GPT_num) {
    1b38:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	11 f5       	brne	.+68     	; 0x1b8a <GPT_set_cbf+0x74>
					case GPT_TIMER0:
						switch(GPT->GPT_mode){
    1b46:	ea 81       	ldd	r30, Y+2	; 0x02
    1b48:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4a:	83 81       	ldd	r24, Z+3	; 0x03
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3d 83       	std	Y+5, r19	; 0x05
    1b52:	2c 83       	std	Y+4, r18	; 0x04
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <GPT_set_cbf+0x52>
    1b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	51 f0       	breq	.+20     	; 0x1b7a <GPT_set_cbf+0x64>
    1b66:	11 c0       	rjmp	.+34     	; 0x1b8a <GPT_set_cbf+0x74>
						case GPT_NORMAL_MODE: GPT_INT_HANDLER.GPT_0_INT_OVF_HANDLER = GPT->APP_TIMER0_INT_HANDLER; break;
    1b68:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	90 93 e4 00 	sts	0x00E4, r25
    1b74:	80 93 e3 00 	sts	0x00E3, r24
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <GPT_set_cbf+0x74>
						case GPT_CTC_MODE:    GPT_INT_HANDLER.GPT_0_INT_CTC_HANDLER = GPT->APP_TIMER0_INT_HANDLER ;break ;
    1b7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	90 93 e6 00 	sts	0x00E6, r25
    1b86:	80 93 e5 00 	sts	0x00E5, r24
						}
					break;
				}

			}
			return return_value;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <EXT_INT_Enable>:
/*Name         :			EXT_INT_Enable
 * Description :      Enable External interrupt peripherals
 * Arguments   : 	  interrupt -> pointer to Ext interrupt configurations
 * Return      :	  	return_value {E_ok,E-NOK}
  */
Std_ReturnType EXT_INT_Enable(const EXT_INT_CONF_t *interrupt) {
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <EXT_INT_Enable+0x6>
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	9b 83       	std	Y+3, r25	; 0x03
    1baa:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_NOK;
    1bac:	19 82       	std	Y+1, r1	; 0x01
	if (interrupt == NULL) {
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <EXT_INT_Enable+0x1e>
		return_value = E_NOK;
    1bb6:	19 82       	std	Y+1, r1	; 0x01
    1bb8:	17 c0       	rjmp	.+46     	; 0x1be8 <EXT_INT_Enable+0x4c>
	}

	else {
		return_value = G_INT_Enable();
    1bba:	0e 94 43 0a 	call	0x1486	; 0x1486 <G_INT_Enable>
    1bbe:	89 83       	std	Y+1, r24	; 0x01
		return_value = EXT_INT_INTX_pin_inint(interrupt);
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <EXT_INT_INTX_pin_inint>
    1bc8:	89 83       	std	Y+1, r24	; 0x01
		return_value = EXT_INT_INTX_enable(interrupt);
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <EXT_INT_INTX_enable>
    1bd2:	89 83       	std	Y+1, r24	; 0x01
		return_value = EXT_INT_INTX_mode_init(interrupt);
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <EXT_INT_INTX_mode_init>
    1bdc:	89 83       	std	Y+1, r24	; 0x01
		return_value = EXT_INT_INTX_CBF(interrupt);
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <EXT_INT_INTX_CBF>
    1be6:	89 83       	std	Y+1, r24	; 0x01
	}
	return return_value;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <EXT_INT_disable>:
/*Name         :			EXT_INT_Enable
 * Description :      Disable External interrupt peripherals
 * Arguments   : 	  interrupt -> pointer to Ext interrupt configurations
 * Return      :	  	return_value {E_ok,E-NOK}
  */
	Std_ReturnType EXT_INT_disable(EXT_INT_CONF_t *interrupt) {
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <EXT_INT_disable+0x6>
    1bfc:	0f 92       	push	r0
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
		Std_ReturnType return_value = E_NOK;
    1c06:	19 82       	std	Y+1, r1	; 0x01
		if (interrupt == NULL) {
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	11 f4       	brne	.+4      	; 0x1c14 <EXT_INT_disable+0x1e>
			return_value = E_NOK;
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <EXT_INT_disable+0x28>
		} else {

			return_value = EXT_INT_INTX_disable(interrupt);
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	0e 94 57 0e 	call	0x1cae	; 0x1cae <EXT_INT_INTX_disable>
    1c1c:	89 83       	std	Y+1, r24	; 0x01

		}

		return return_value;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <EXT_INT_INTX_enable>:

/**************************************************helper functions********************************************************************************************/
/*******************************************************************************************************************************************/
	static Std_ReturnType EXT_INT_INTX_enable(const EXT_INT_CONF_t *interrupt) {
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <EXT_INT_INTX_enable+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <EXT_INT_INTX_enable+0x8>
    1c34:	0f 92       	push	r0
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9b 83       	std	Y+3, r25	; 0x03
    1c3c:	8a 83       	std	Y+2, r24	; 0x02

		Std_ReturnType return_value = E_NOK;
    1c3e:	19 82       	std	Y+1, r1	; 0x01
		switch (interrupt->type) {
    1c40:	ea 81       	ldd	r30, Y+2	; 0x02
    1c42:	fb 81       	ldd	r31, Y+3	; 0x03
    1c44:	83 81       	ldd	r24, Z+3	; 0x03
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3d 83       	std	Y+5, r19	; 0x05
    1c4c:	2c 83       	std	Y+4, r18	; 0x04
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	9d 81       	ldd	r25, Y+5	; 0x05
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	89 f0       	breq	.+34     	; 0x1c7a <EXT_INT_INTX_enable+0x4e>
    1c58:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	a1 f0       	breq	.+40     	; 0x1c8a <EXT_INT_INTX_enable+0x5e>
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9d 81       	ldd	r25, Y+5	; 0x05
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	c1 f4       	brne	.+48     	; 0x1c9a <EXT_INT_INTX_enable+0x6e>
		case EXT_INT_0:
			SET_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT0_Bit);
    1c6a:	ab e5       	ldi	r26, 0x5B	; 91
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e5       	ldi	r30, 0x5B	; 91
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 64       	ori	r24, 0x40	; 64
    1c76:	8c 93       	st	X, r24
    1c78:	11 c0       	rjmp	.+34     	; 0x1c9c <EXT_INT_INTX_enable+0x70>
			break;
		case EXT_INT_1:
			SET_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT1_Bit);
    1c7a:	ab e5       	ldi	r26, 0x5B	; 91
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e5       	ldi	r30, 0x5B	; 91
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	8c 93       	st	X, r24
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <EXT_INT_INTX_enable+0x70>
			break;
		case EXT_INT_2:
			SET_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT2_Bit);
    1c8a:	ab e5       	ldi	r26, 0x5B	; 91
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	eb e5       	ldi	r30, 0x5B	; 91
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 62       	ori	r24, 0x20	; 32
    1c96:	8c 93       	st	X, r24
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <EXT_INT_INTX_enable+0x70>
			break;
		default:
			return_value = E_NOK;
    1c9a:	19 82       	std	Y+1, r1	; 0x01

		}
		return return_value;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <EXT_INT_INTX_disable>:

	/***************************************************************************************************************/
	static Std_ReturnType EXT_INT_INTX_disable(const EXT_INT_CONF_t *interrupt) {
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <EXT_INT_INTX_disable+0x6>
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <EXT_INT_INTX_disable+0x8>
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	9b 83       	std	Y+3, r25	; 0x03
    1cbe:	8a 83       	std	Y+2, r24	; 0x02

		Std_ReturnType return_value = E_NOK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
		switch (interrupt->type) {
    1cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc6:	83 81       	ldd	r24, Z+3	; 0x03
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3d 83       	std	Y+5, r19	; 0x05
    1cce:	2c 83       	std	Y+4, r18	; 0x04
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	89 f0       	breq	.+34     	; 0x1cfc <EXT_INT_INTX_disable+0x4e>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	a1 f0       	breq	.+40     	; 0x1d0c <EXT_INT_INTX_disable+0x5e>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	c1 f4       	brne	.+48     	; 0x1d1c <EXT_INT_INTX_disable+0x6e>
		case EXT_INT_0:
			CLR_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT0_Bit);
    1cec:	ab e5       	ldi	r26, 0x5B	; 91
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	eb e5       	ldi	r30, 0x5B	; 91
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 7b       	andi	r24, 0xBF	; 191
    1cf8:	8c 93       	st	X, r24
    1cfa:	11 c0       	rjmp	.+34     	; 0x1d1e <EXT_INT_INTX_disable+0x70>
			break;
		case EXT_INT_1:
			CLR_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT1_Bit);
    1cfc:	ab e5       	ldi	r26, 0x5B	; 91
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e5       	ldi	r30, 0x5B	; 91
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 77       	andi	r24, 0x7F	; 127
    1d08:	8c 93       	st	X, r24
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <EXT_INT_INTX_disable+0x70>
			break;
		case EXT_INT_2:
			CLR_BIT(EXT_INT_u8_GICR_REG.EXT_INT_u8_GICR, INT2_Bit);
    1d0c:	ab e5       	ldi	r26, 0x5B	; 91
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	eb e5       	ldi	r30, 0x5B	; 91
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7d       	andi	r24, 0xDF	; 223
    1d18:	8c 93       	st	X, r24
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <EXT_INT_INTX_disable+0x70>
			break;
		default:
			return_value = E_NOK;
    1d1c:	19 82       	std	Y+1, r1	; 0x01

		}
		return return_value;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <EXT_INT_INTX_mode_init>:
	/********************************************************************************************************************/
	static Std_ReturnType EXT_INT_INTX_mode_init(const EXT_INT_CONF_t *interrupt) {
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	2b 97       	sbiw	r28, 0x0b	; 11
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	9b 83       	std	Y+3, r25	; 0x03
    1d46:	8a 83       	std	Y+2, r24	; 0x02
		Std_ReturnType return_value = E_NOK;
    1d48:	19 82       	std	Y+1, r1	; 0x01
		switch (interrupt->type) {
    1d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d4e:	83 81       	ldd	r24, Z+3	; 0x03
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3b 87       	std	Y+11, r19	; 0x0b
    1d56:	2a 87       	std	Y+10, r18	; 0x0a
    1d58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <EXT_INT_INTX_mode_init+0x34>
    1d62:	68 c0       	rjmp	.+208    	; 0x1e34 <EXT_INT_INTX_mode_init+0x104>
    1d64:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d66:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <EXT_INT_INTX_mode_init+0x40>
    1d6e:	bf c0       	rjmp	.+382    	; 0x1eee <EXT_INT_INTX_mode_init+0x1be>
    1d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <EXT_INT_INTX_mode_init+0x4a>
    1d78:	dd c0       	rjmp	.+442    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>

		case EXT_INT_0:
			switch (interrupt->mode) {
    1d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d7e:	84 81       	ldd	r24, Z+4	; 0x04
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	39 87       	std	Y+9, r19	; 0x09
    1d86:	28 87       	std	Y+8, r18	; 0x08
    1d88:	88 85       	ldd	r24, Y+8	; 0x08
    1d8a:	99 85       	ldd	r25, Y+9	; 0x09
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	21 f1       	breq	.+72     	; 0x1dda <EXT_INT_INTX_mode_init+0xaa>
    1d92:	28 85       	ldd	r18, Y+8	; 0x08
    1d94:	39 85       	ldd	r19, Y+9	; 0x09
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <EXT_INT_INTX_mode_init+0x76>
    1d9c:	88 85       	ldd	r24, Y+8	; 0x08
    1d9e:	99 85       	ldd	r25, Y+9	; 0x09
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <EXT_INT_INTX_mode_init+0x8c>
    1da4:	c7 c0       	rjmp	.+398    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
    1da6:	28 85       	ldd	r18, Y+8	; 0x08
    1da8:	39 85       	ldd	r19, Y+9	; 0x09
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	21 f1       	breq	.+72     	; 0x1df8 <EXT_INT_INTX_mode_init+0xc8>
    1db0:	88 85       	ldd	r24, Y+8	; 0x08
    1db2:	99 85       	ldd	r25, Y+9	; 0x09
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	71 f1       	breq	.+92     	; 0x1e16 <EXT_INT_INTX_mode_init+0xe6>
    1dba:	bc c0       	rjmp	.+376    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
			case EXT_INT_u8_LOW_LEVEL:
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1dbc:	a5 e5       	ldi	r26, 0x55	; 85
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e5       	ldi	r30, 0x55	; 85
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1dca:	a5 e5       	ldi	r26, 0x55	; 85
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e5       	ldi	r30, 0x55	; 85
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8d 7f       	andi	r24, 0xFD	; 253
    1dd6:	8c 93       	st	X, r24
    1dd8:	ad c0       	rjmp	.+346    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_ANY_CHANGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1dda:	a5 e5       	ldi	r26, 0x55	; 85
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e5       	ldi	r30, 0x55	; 85
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1de8:	a5 e5       	ldi	r26, 0x55	; 85
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e5       	ldi	r30, 0x55	; 85
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	8d 7f       	andi	r24, 0xFD	; 253
    1df4:	8c 93       	st	X, r24
    1df6:	9e c0       	rjmp	.+316    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1df8:	a5 e5       	ldi	r26, 0x55	; 85
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e5       	ldi	r30, 0x55	; 85
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8e 7f       	andi	r24, 0xFE	; 254
    1e04:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1e06:	a5 e5       	ldi	r26, 0x55	; 85
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e5       	ldi	r30, 0x55	; 85
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	82 60       	ori	r24, 0x02	; 2
    1e12:	8c 93       	st	X, r24
    1e14:	8f c0       	rjmp	.+286    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1e16:	a5 e5       	ldi	r26, 0x55	; 85
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e5 e5       	ldi	r30, 0x55	; 85
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	81 60       	ori	r24, 0x01	; 1
    1e22:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1e24:	a5 e5       	ldi	r26, 0x55	; 85
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e5       	ldi	r30, 0x55	; 85
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	8c 93       	st	X, r24
    1e32:	80 c0       	rjmp	.+256    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;
			}
			break;

		case EXT_INT_1:
			switch (interrupt->mode) {
    1e34:	ea 81       	ldd	r30, Y+2	; 0x02
    1e36:	fb 81       	ldd	r31, Y+3	; 0x03
    1e38:	84 81       	ldd	r24, Z+4	; 0x04
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3f 83       	std	Y+7, r19	; 0x07
    1e40:	2e 83       	std	Y+6, r18	; 0x06
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	21 f1       	breq	.+72     	; 0x1e94 <EXT_INT_INTX_mode_init+0x164>
    1e4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <EXT_INT_INTX_mode_init+0x130>
    1e56:	8e 81       	ldd	r24, Y+6	; 0x06
    1e58:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	61 f0       	breq	.+24     	; 0x1e76 <EXT_INT_INTX_mode_init+0x146>
    1e5e:	6a c0       	rjmp	.+212    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
    1e60:	2e 81       	ldd	r18, Y+6	; 0x06
    1e62:	3f 81       	ldd	r19, Y+7	; 0x07
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	21 f1       	breq	.+72     	; 0x1eb2 <EXT_INT_INTX_mode_init+0x182>
    1e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	91 05       	cpc	r25, r1
    1e72:	71 f1       	breq	.+92     	; 0x1ed0 <EXT_INT_INTX_mode_init+0x1a0>
    1e74:	5f c0       	rjmp	.+190    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
			case EXT_INT_u8_LOW_LEVEL:
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1e76:	a5 e5       	ldi	r26, 0x55	; 85
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e5       	ldi	r30, 0x55	; 85
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1e84:	a5 e5       	ldi	r26, 0x55	; 85
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e5       	ldi	r30, 0x55	; 85
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8d 7f       	andi	r24, 0xFD	; 253
    1e90:	8c 93       	st	X, r24
    1e92:	50 c0       	rjmp	.+160    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_ANY_CHANGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1e94:	a5 e5       	ldi	r26, 0x55	; 85
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e5       	ldi	r30, 0x55	; 85
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1ea2:	a5 e5       	ldi	r26, 0x55	; 85
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8d 7f       	andi	r24, 0xFD	; 253
    1eae:	8c 93       	st	X, r24
    1eb0:	41 c0       	rjmp	.+130    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1eb2:	a5 e5       	ldi	r26, 0x55	; 85
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e5 e5       	ldi	r30, 0x55	; 85
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8e 7f       	andi	r24, 0xFE	; 254
    1ebe:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1ec0:	a5 e5       	ldi	r26, 0x55	; 85
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e5       	ldi	r30, 0x55	; 85
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	8c 93       	st	X, r24
    1ece:	32 c0       	rjmp	.+100    	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;

			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC00_Bit);
    1ed0:	a5 e5       	ldi	r26, 0x55	; 85
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e5       	ldi	r30, 0x55	; 85
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	81 60       	ori	r24, 0x01	; 1
    1edc:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG.EXT_INT_u8_MCUCR, ISC01_Bit);
    1ede:	a5 e5       	ldi	r26, 0x55	; 85
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e5       	ldi	r30, 0x55	; 85
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	8c 93       	st	X, r24
    1eec:	23 c0       	rjmp	.+70     	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>
				break;
			}
			break;

		case EXT_INT_2:
			switch (interrupt->mode) {
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	84 81       	ldd	r24, Z+4	; 0x04
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	3d 83       	std	Y+5, r19	; 0x05
    1efa:	2c 83       	std	Y+4, r18	; 0x04
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	82 30       	cpi	r24, 0x02	; 2
    1f02:	91 05       	cpc	r25, r1
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <EXT_INT_INTX_mode_init+0x1e2>
    1f06:	2c 81       	ldd	r18, Y+4	; 0x04
    1f08:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0a:	23 30       	cpi	r18, 0x03	; 3
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	49 f0       	breq	.+18     	; 0x1f22 <EXT_INT_INTX_mode_init+0x1f2>
    1f10:	10 c0       	rjmp	.+32     	; 0x1f32 <EXT_INT_INTX_mode_init+0x202>

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCSR_REG.EXT_INT_u8_MCUCSR, ISC2_Bit);
    1f12:	a4 e5       	ldi	r26, 0x54	; 84
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e4 e5       	ldi	r30, 0x54	; 84
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 7b       	andi	r24, 0xBF	; 191
    1f1e:	8c 93       	st	X, r24
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>

				break;

			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCSR_REG.EXT_INT_u8_MCUCSR, ISC2_Bit);
    1f22:	a4 e5       	ldi	r26, 0x54	; 84
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e4 e5       	ldi	r30, 0x54	; 84
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 64       	ori	r24, 0x40	; 64
    1f2e:	8c 93       	st	X, r24
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <EXT_INT_INTX_mode_init+0x204>

				break;
			default:
				return_value = E_NOK;
    1f32:	19 82       	std	Y+1, r1	; 0x01

			}
			break;
		}

		return return_value;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1f36:	2b 96       	adiw	r28, 0x0b	; 11
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <EXT_INT_INTX_pin_inint>:

	/***************************************************************************************************************************/
	static Std_ReturnType EXT_INT_INTX_pin_inint(
			const EXT_INT_CONF_t *interrupt) {
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <EXT_INT_INTX_pin_inint+0x6>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9b 83       	std	Y+3, r25	; 0x03
    1f56:	8a 83       	std	Y+2, r24	; 0x02
		Std_ReturnType return_value = E_NOK;
    1f58:	19 82       	std	Y+1, r1	; 0x01
		return_value = DIO_write_pin_direction(&interrupt->pin);
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DIO_write_pin_direction>
    1f62:	89 83       	std	Y+1, r24	; 0x01
		return return_value;}
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <EXT_INT_INTX_CBF>:

	static Std_ReturnType EXT_INT_INTX_CBF(const EXT_INT_CONF_t *interrupt) {
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <EXT_INT_INTX_CBF+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <EXT_INT_INTX_CBF+0x8>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02

			Std_ReturnType return_value = E_OK;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	89 83       	std	Y+1, r24	; 0x01
			if (interrupt == NULL){
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	11 f4       	brne	.+4      	; 0x1f94 <EXT_INT_INTX_CBF+0x22>
				return_value = E_NOK;
    1f90:	19 82       	std	Y+1, r1	; 0x01
    1f92:	31 c0       	rjmp	.+98     	; 0x1ff6 <EXT_INT_INTX_CBF+0x84>
			}
			else {


			switch (interrupt->type) {
    1f94:	ea 81       	ldd	r30, Y+2	; 0x02
    1f96:	fb 81       	ldd	r31, Y+3	; 0x03
    1f98:	83 81       	ldd	r24, Z+3	; 0x03
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	3d 83       	std	Y+5, r19	; 0x05
    1fa0:	2c 83       	std	Y+4, r18	; 0x04
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	91 05       	cpc	r25, r1
    1faa:	91 f0       	breq	.+36     	; 0x1fd0 <EXT_INT_INTX_CBF+0x5e>
    1fac:	2c 81       	ldd	r18, Y+4	; 0x04
    1fae:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb0:	22 30       	cpi	r18, 0x02	; 2
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	b1 f0       	breq	.+44     	; 0x1fe2 <EXT_INT_INTX_CBF+0x70>
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	d9 f4       	brne	.+54     	; 0x1ff4 <EXT_INT_INTX_CBF+0x82>
			case EXT_INT_0:
				EXT_INT_handler.EXT_INT0_handler = interrupt->APP_INT_handler;
    1fbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc2:	81 81       	ldd	r24, Z+1	; 0x01
    1fc4:	92 81       	ldd	r25, Z+2	; 0x02
    1fc6:	90 93 f0 00 	sts	0x00F0, r25
    1fca:	80 93 ef 00 	sts	0x00EF, r24
    1fce:	13 c0       	rjmp	.+38     	; 0x1ff6 <EXT_INT_INTX_CBF+0x84>

				break;
			case EXT_INT_1:
				EXT_INT_handler.EXT_INT1_handler = interrupt->APP_INT_handler;
    1fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	92 81       	ldd	r25, Z+2	; 0x02
    1fd8:	90 93 f2 00 	sts	0x00F2, r25
    1fdc:	80 93 f1 00 	sts	0x00F1, r24
    1fe0:	0a c0       	rjmp	.+20     	; 0x1ff6 <EXT_INT_INTX_CBF+0x84>

				break;
			case EXT_INT_2:
				EXT_INT_handler.EXT_INT2_handler = interrupt->APP_INT_handler;
    1fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe6:	81 81       	ldd	r24, Z+1	; 0x01
    1fe8:	92 81       	ldd	r25, Z+2	; 0x02
    1fea:	90 93 f4 00 	sts	0x00F4, r25
    1fee:	80 93 f3 00 	sts	0x00F3, r24
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <EXT_INT_INTX_CBF+0x84>

				break;
			default:
				return_value = E_NOK;
    1ff4:	19 82       	std	Y+1, r1	; 0x01
			}
			}
			return return_value;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <__vector_1>:
	/***************************************************************************************************************/

	void __vector_1(void) __attribute((signal,used));
	 void __vector_1(void){
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	2f 93       	push	r18
    2014:	3f 93       	push	r19
    2016:	4f 93       	push	r20
    2018:	5f 93       	push	r21
    201a:	6f 93       	push	r22
    201c:	7f 93       	push	r23
    201e:	8f 93       	push	r24
    2020:	9f 93       	push	r25
    2022:	af 93       	push	r26
    2024:	bf 93       	push	r27
    2026:	ef 93       	push	r30
    2028:	ff 93       	push	r31
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	 if (EXT_INT_handler.EXT_INT0_handler != NULL){;
    2032:	80 91 ef 00 	lds	r24, 0x00EF
    2036:	90 91 f0 00 	lds	r25, 0x00F0
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	29 f0       	breq	.+10     	; 0x2048 <__vector_1+0x40>
	 EXT_INT_handler.EXT_INT0_handler();
    203e:	e0 91 ef 00 	lds	r30, 0x00EF
    2042:	f0 91 f0 00 	lds	r31, 0x00F0
    2046:	09 95       	icall
		 }
	 }
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	ff 91       	pop	r31
    204e:	ef 91       	pop	r30
    2050:	bf 91       	pop	r27
    2052:	af 91       	pop	r26
    2054:	9f 91       	pop	r25
    2056:	8f 91       	pop	r24
    2058:	7f 91       	pop	r23
    205a:	6f 91       	pop	r22
    205c:	5f 91       	pop	r21
    205e:	4f 91       	pop	r20
    2060:	3f 91       	pop	r19
    2062:	2f 91       	pop	r18
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <__vector_2>:
	 /*INT1 ISR*/
	 void __vector_2(void) __attribute((signal,used));
	 void __vector_2(void)
	 {
    206e:	1f 92       	push	r1
    2070:	0f 92       	push	r0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	0f 92       	push	r0
    2076:	11 24       	eor	r1, r1
    2078:	2f 93       	push	r18
    207a:	3f 93       	push	r19
    207c:	4f 93       	push	r20
    207e:	5f 93       	push	r21
    2080:	6f 93       	push	r22
    2082:	7f 93       	push	r23
    2084:	8f 93       	push	r24
    2086:	9f 93       	push	r25
    2088:	af 93       	push	r26
    208a:	bf 93       	push	r27
    208c:	ef 93       	push	r30
    208e:	ff 93       	push	r31
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
		 if (EXT_INT_handler.EXT_INT1_handler != NULL){;
    2098:	80 91 f1 00 	lds	r24, 0x00F1
    209c:	90 91 f2 00 	lds	r25, 0x00F2
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	29 f0       	breq	.+10     	; 0x20ae <__vector_2+0x40>
	 EXT_INT_handler.EXT_INT1_handler();
    20a4:	e0 91 f1 00 	lds	r30, 0x00F1
    20a8:	f0 91 f2 00 	lds	r31, 0x00F2
    20ac:	09 95       	icall
		 }
	 }
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_3>:
	 /*INT2 ISR*/
	 void __vector_3(void) __attribute((signal,used));
	 void __vector_3(void)
	 {
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	2f 93       	push	r18
    20e0:	3f 93       	push	r19
    20e2:	4f 93       	push	r20
    20e4:	5f 93       	push	r21
    20e6:	6f 93       	push	r22
    20e8:	7f 93       	push	r23
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
		 if (EXT_INT_handler.EXT_INT2_handler != NULL){;
    20fe:	80 91 f3 00 	lds	r24, 0x00F3
    2102:	90 91 f4 00 	lds	r25, 0x00F4
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	29 f0       	breq	.+10     	; 0x2114 <__vector_3+0x40>
		 EXT_INT_handler.EXT_INT2_handler();
    210a:	e0 91 f3 00 	lds	r30, 0x00F3
    210e:	f0 91 f4 00 	lds	r31, 0x00F4
    2112:	09 95       	icall
			 }
		 }
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <EEPROM_WriteByte>:
 * Description : Write byte in specific address in EEPROM
 * Arguments   :  Copy_u16Address : Address to write data in  RANGE (0x000: 0x3FF)
 * 				  Copy_u8Data     : Data will be written in EEPROM ADDRESS
 * Return      :  E_OK,E_NOK
 */
Std_ReturnType EEPROM_WriteByte( u16 Copy_u16Address , u8 Copy_u8Data) {
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <EEPROM_WriteByte+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <EEPROM_WriteByte+0x8>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	9b 83       	std	Y+3, r25	; 0x03
    2148:	8a 83       	std	Y+2, r24	; 0x02
    214a:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u16Address > EEPROM_MAX_ADDRESS)||(Copy_u8Data>255)){
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	24 e0       	ldi	r18, 0x04	; 4
    2156:	80 30       	cpi	r24, 0x00	; 0
    2158:	92 07       	cpc	r25, r18
    215a:	10 f0       	brcs	.+4      	; 0x2160 <EEPROM_WriteByte+0x26>
		return_value = E_NOK;
    215c:	19 82       	std	Y+1, r1	; 0x01
    215e:	1c c0       	rjmp	.+56     	; 0x2198 <EEPROM_WriteByte+0x5e>
	}
	else {
		while (GET_BIT(EEPROM_u8_EECR_REG,EEPROM_u8_EECR_EEWE_BIT));
    2160:	ec e3       	ldi	r30, 0x3C	; 60
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	86 95       	lsr	r24
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	81 70       	andi	r24, 0x01	; 1
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	88 23       	and	r24, r24
    2172:	b1 f7       	brne	.-20     	; 0x2160 <EEPROM_WriteByte+0x26>

		EEPROM_u16_EEARL_REG =  Copy_u16Address ;
    2174:	ee e3       	ldi	r30, 0x3E	; 62
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	80 83       	st	Z, r24
		EEPROM_u16_EEARH_REG =  ((Copy_u16Address >>8) &0x03);
    217c:	ef e3       	ldi	r30, 0x3F	; 63
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	89 2f       	mov	r24, r25
    2186:	99 27       	eor	r25, r25
    2188:	83 70       	andi	r24, 0x03	; 3
    218a:	80 83       	st	Z, r24
		EEPROM_u8_EEDR_REG =Copy_u8Data;
    218c:	ed e3       	ldi	r30, 0x3D	; 61
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	80 83       	st	Z, r24

		__asm__
    2194:	e2 9a       	sbi	0x1c, 2	; 28
		(
				"sbi 0x1c, 2;"
		);
		__asm__
    2196:	e1 9a       	sbi	0x1c, 1	; 28
				"sbi 0x1c, 1;"
		);

	}

	return return_value ;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <EEPROM_ReadByte>:
 * Description : read byte from specific address in EEPROM
 * Arguments   :  Copy_u16Address : Address to write data in  RANGE (0x000: 0x3FF)
 * 				  Copy_pu8Data : pointer to address of Data will be read from EEPROM ADDRESS
 * Return      :  E_OK,E_NOK
 */
Std_ReturnType EEPROM_ReadByte( u16 Copy_u16Address, u8 *Copy_pu8Data){
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <EEPROM_ReadByte+0x6>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <EEPROM_ReadByte+0x8>
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	9b 83       	std	Y+3, r25	; 0x03
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	7d 83       	std	Y+5, r23	; 0x05
    21bc:	6c 83       	std	Y+4, r22	; 0x04

	Std_ReturnType return_value = E_OK;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u16Address > EEPROM_MAX_ADDRESS)||(Copy_pu8Data==NULL)){
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	24 e0       	ldi	r18, 0x04	; 4
    21c8:	80 30       	cpi	r24, 0x00	; 0
    21ca:	92 07       	cpc	r25, r18
    21cc:	20 f4       	brcc	.+8      	; 0x21d6 <EEPROM_ReadByte+0x2e>
    21ce:	8c 81       	ldd	r24, Y+4	; 0x04
    21d0:	9d 81       	ldd	r25, Y+5	; 0x05
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	11 f4       	brne	.+4      	; 0x21da <EEPROM_ReadByte+0x32>
		return_value = E_NOK;
    21d6:	19 82       	std	Y+1, r1	; 0x01
    21d8:	23 c0       	rjmp	.+70     	; 0x2220 <EEPROM_ReadByte+0x78>
	}
	else {
		while (GET_BIT(EEPROM_u8_EECR_REG,EEPROM_u8_EECR_EEWE_BIT));
    21da:	ec e3       	ldi	r30, 0x3C	; 60
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	86 95       	lsr	r24
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	81 70       	andi	r24, 0x01	; 1
    21e8:	90 70       	andi	r25, 0x00	; 0
    21ea:	88 23       	and	r24, r24
    21ec:	b1 f7       	brne	.-20     	; 0x21da <EEPROM_ReadByte+0x32>
				EEPROM_u16_EEARL_REG =  Copy_u16Address ;
    21ee:	ee e3       	ldi	r30, 0x3E	; 62
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	80 83       	st	Z, r24
				EEPROM_u16_EEARH_REG =  ((Copy_u16Address >>8) &0x03);
    21f6:	ef e3       	ldi	r30, 0x3F	; 63
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	89 2f       	mov	r24, r25
    2200:	99 27       	eor	r25, r25
    2202:	83 70       	andi	r24, 0x03	; 3
    2204:	80 83       	st	Z, r24
				SET_BIT(EEPROM_u8_EECR_REG,EEPROM_u8_EECR_EERE_BIT);
    2206:	ac e3       	ldi	r26, 0x3C	; 60
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ec e3       	ldi	r30, 0x3C	; 60
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	81 60       	ori	r24, 0x01	; 1
    2212:	8c 93       	st	X, r24
				*Copy_pu8Data = EEPROM_u8_EEDR_REG;
    2214:	ed e3       	ldi	r30, 0x3D	; 61
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	ec 81       	ldd	r30, Y+4	; 0x04
    221c:	fd 81       	ldd	r31, Y+5	; 0x05
    221e:	80 83       	st	Z, r24

	}

	return return_value ;
    2220:	89 81       	ldd	r24, Y+1	; 0x01
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <DIO_init>:
/*Name:			DIO_u8Init
 * Description: Initialize all MCU Pins
 * Arguments: 	vid
 * Return :	  	return_value {E_ok,E-NOK}
 */
Std_ReturnType DIO_init(void) {
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	89 83       	std	Y+1, r24	; 0x01
	//Define new values
#define DIO_u8_OUTPUT_LOW		1
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		0
	*DDR_registers[DIO_PORTA] = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6,
    2240:	e0 91 6c 00 	lds	r30, 0x006C
    2244:	f0 91 6d 00 	lds	r31, 0x006D
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	80 83       	st	Z, r24
			DIO_u8_PORTA_PIN5, DIO_u8_PORTA_PIN4, DIO_u8_PORTA_PIN3,
			DIO_u8_PORTA_PIN2, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);
	*DDR_registers[DIO_PORTB] = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6,
    224c:	e0 91 6e 00 	lds	r30, 0x006E
    2250:	f0 91 6f 00 	lds	r31, 0x006F
    2254:	8f ef       	ldi	r24, 0xFF	; 255
    2256:	80 83       	st	Z, r24
			DIO_u8_PORTB_PIN5, DIO_u8_PORTB_PIN4, DIO_u8_PORTB_PIN3,
			DIO_u8_PORTB_PIN2, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);
	*DDR_registers[DIO_PORTC] = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6,
    2258:	e0 91 70 00 	lds	r30, 0x0070
    225c:	f0 91 71 00 	lds	r31, 0x0071
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	80 83       	st	Z, r24
			DIO_u8_PORTC_PIN5, DIO_u8_PORTC_PIN4, DIO_u8_PORTC_PIN3,
			DIO_u8_PORTC_PIN2, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);
	*DDR_registers[DIO_PORTD] = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6,
    2264:	e0 91 72 00 	lds	r30, 0x0072
    2268:	f0 91 73 00 	lds	r31, 0x0073
    226c:	8b ef       	ldi	r24, 0xFB	; 251
    226e:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_LOW		0
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		1

*PORT_registers[DIO_PORTA]=CONC(DIO_u8_PORTA_PIN7,DIO_u8_PORTA_PIN6
    2270:	e0 91 74 00 	lds	r30, 0x0074
    2274:	f0 91 75 00 	lds	r31, 0x0075
    2278:	10 82       	st	Z, r1
		,DIO_u8_PORTA_PIN5,DIO_u8_PORTA_PIN4
		,DIO_u8_PORTA_PIN3,DIO_u8_PORTA_PIN2
		,DIO_u8_PORTA_PIN1,DIO_u8_PORTA_PIN0);
*PORT_registers[DIO_PORTB]=CONC(DIO_u8_PORTB_PIN7,DIO_u8_PORTB_PIN6
    227a:	e0 91 76 00 	lds	r30, 0x0076
    227e:	f0 91 77 00 	lds	r31, 0x0077
    2282:	10 82       	st	Z, r1
		,DIO_u8_PORTB_PIN5,DIO_u8_PORTB_PIN4
		,DIO_u8_PORTB_PIN3,DIO_u8_PORTB_PIN2
		,DIO_u8_PORTB_PIN1,DIO_u8_PORTB_PIN0);
*PORT_registers[DIO_PORTC]=CONC(DIO_u8_PORTC_PIN7,DIO_u8_PORTC_PIN6
    2284:	e0 91 78 00 	lds	r30, 0x0078
    2288:	f0 91 79 00 	lds	r31, 0x0079
    228c:	10 82       	st	Z, r1
		,DIO_u8_PORTC_PIN5,DIO_u8_PORTC_PIN4
		,DIO_u8_PORTC_PIN3,DIO_u8_PORTC_PIN2
		,DIO_u8_PORTC_PIN1,DIO_u8_PORTC_PIN0);
*PORT_registers[DIO_PORTD]=CONC(DIO_u8_PORTD_PIN7,DIO_u8_PORTD_PIN6
    228e:	e0 91 7a 00 	lds	r30, 0x007A
    2292:	f0 91 7b 00 	lds	r31, 0x007B
    2296:	84 e0       	ldi	r24, 0x04	; 4
    2298:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	2
#define DIO_u8_INPUT_PULLUP		3


return return_value;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
}
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <DIO_write_pin_direction>:
/* name          DIO_write_pin_direction
 * description   Set PIN Direction
 * arguments     first =>  pinconfig : pointer to struct of pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType DIO_write_pin_direction(const DIO_pin_config_t *pinconfig) {
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <DIO_write_pin_direction+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <DIO_write_pin_direction+0x8>
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType return_value = E_OK;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
if ((NULL == pinconfig) || (pinconfig->port > DIO_PORTD)
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	a1 f0       	breq	.+40     	; 0x22ea <DIO_write_pin_direction+0x46>
    22c2:	ea 81       	ldd	r30, Y+2	; 0x02
    22c4:	fb 81       	ldd	r31, Y+3	; 0x03
    22c6:	80 81       	ld	r24, Z
    22c8:	83 70       	andi	r24, 0x03	; 3
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	84 30       	cpi	r24, 0x04	; 4
    22d0:	91 05       	cpc	r25, r1
    22d2:	5c f4       	brge	.+22     	; 0x22ea <DIO_write_pin_direction+0x46>
    22d4:	ea 81       	ldd	r30, Y+2	; 0x02
    22d6:	fb 81       	ldd	r31, Y+3	; 0x03
    22d8:	80 81       	ld	r24, Z
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	87 70       	andi	r24, 0x07	; 7
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	91 05       	cpc	r25, r1
    22e8:	14 f0       	brlt	.+4      	; 0x22ee <DIO_write_pin_direction+0x4a>
		|| (pinconfig->pin > DIO_PIN7)) {
	return_value = E_NOK;
    22ea:	19 82       	std	Y+1, r1	; 0x01
    22ec:	78 c0       	rjmp	.+240    	; 0x23de <DIO_write_pin_direction+0x13a>
} else {
	switch (pinconfig->direction) {
    22ee:	ea 81       	ldd	r30, Y+2	; 0x02
    22f0:	fb 81       	ldd	r31, Y+3	; 0x03
    22f2:	80 81       	ld	r24, Z
    22f4:	82 95       	swap	r24
    22f6:	86 95       	lsr	r24
    22f8:	86 95       	lsr	r24
    22fa:	83 70       	andi	r24, 0x03	; 3
    22fc:	81 70       	andi	r24, 0x01	; 1
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	3d 83       	std	Y+5, r19	; 0x05
    2304:	2c 83       	std	Y+4, r18	; 0x04
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	b1 f1       	breq	.+108    	; 0x237a <DIO_write_pin_direction+0xd6>
    230e:	2c 81       	ldd	r18, Y+4	; 0x04
    2310:	3d 81       	ldd	r19, Y+5	; 0x05
    2312:	21 30       	cpi	r18, 0x01	; 1
    2314:	31 05       	cpc	r19, r1
    2316:	09 f0       	breq	.+2      	; 0x231a <DIO_write_pin_direction+0x76>
    2318:	61 c0       	rjmp	.+194    	; 0x23dc <DIO_write_pin_direction+0x138>
	case DIO_OUTPUT:
		SET_BIT(*DDR_registers[pinconfig->port], pinconfig->pin);
    231a:	ea 81       	ldd	r30, Y+2	; 0x02
    231c:	fb 81       	ldd	r31, Y+3	; 0x03
    231e:	80 81       	ld	r24, Z
    2320:	83 70       	andi	r24, 0x03	; 3
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	fc 01       	movw	r30, r24
    232c:	e4 59       	subi	r30, 0x94	; 148
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	a0 81       	ld	r26, Z
    2332:	b1 81       	ldd	r27, Z+1	; 0x01
    2334:	ea 81       	ldd	r30, Y+2	; 0x02
    2336:	fb 81       	ldd	r31, Y+3	; 0x03
    2338:	80 81       	ld	r24, Z
    233a:	83 70       	andi	r24, 0x03	; 3
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	fc 01       	movw	r30, r24
    2346:	e4 59       	subi	r30, 0x94	; 148
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	01 90       	ld	r0, Z+
    234c:	f0 81       	ld	r31, Z
    234e:	e0 2d       	mov	r30, r0
    2350:	80 81       	ld	r24, Z
    2352:	48 2f       	mov	r20, r24
    2354:	ea 81       	ldd	r30, Y+2	; 0x02
    2356:	fb 81       	ldd	r31, Y+3	; 0x03
    2358:	80 81       	ld	r24, Z
    235a:	86 95       	lsr	r24
    235c:	86 95       	lsr	r24
    235e:	87 70       	andi	r24, 0x07	; 7
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <DIO_write_pin_direction+0xcc>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <DIO_write_pin_direction+0xc8>
    2374:	84 2b       	or	r24, r20
    2376:	8c 93       	st	X, r24
    2378:	32 c0       	rjmp	.+100    	; 0x23de <DIO_write_pin_direction+0x13a>
		break;
	case DIO_INPUT:
		CLR_BIT(*DDR_registers[pinconfig->port], pinconfig->pin);
    237a:	ea 81       	ldd	r30, Y+2	; 0x02
    237c:	fb 81       	ldd	r31, Y+3	; 0x03
    237e:	80 81       	ld	r24, Z
    2380:	83 70       	andi	r24, 0x03	; 3
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	fc 01       	movw	r30, r24
    238c:	e4 59       	subi	r30, 0x94	; 148
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	a0 81       	ld	r26, Z
    2392:	b1 81       	ldd	r27, Z+1	; 0x01
    2394:	ea 81       	ldd	r30, Y+2	; 0x02
    2396:	fb 81       	ldd	r31, Y+3	; 0x03
    2398:	80 81       	ld	r24, Z
    239a:	83 70       	andi	r24, 0x03	; 3
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e4 59       	subi	r30, 0x94	; 148
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	01 90       	ld	r0, Z+
    23ac:	f0 81       	ld	r31, Z
    23ae:	e0 2d       	mov	r30, r0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	ea 81       	ldd	r30, Y+2	; 0x02
    23b6:	fb 81       	ldd	r31, Y+3	; 0x03
    23b8:	80 81       	ld	r24, Z
    23ba:	86 95       	lsr	r24
    23bc:	86 95       	lsr	r24
    23be:	87 70       	andi	r24, 0x07	; 7
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <DIO_write_pin_direction+0x12c>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <DIO_write_pin_direction+0x128>
    23d4:	80 95       	com	r24
    23d6:	84 23       	and	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	01 c0       	rjmp	.+2      	; 0x23de <DIO_write_pin_direction+0x13a>
		break;
	default:
		return_value = E_NOK;
    23dc:	19 82       	std	Y+1, r1	; 0x01
	}
}

return return_value;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <DIO_read_pin_direction>:
 * arguments     first =>  pinconfig
 *               second => direction_status
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_read_pin_direction(DIO_pin_config_t *pinconfig,
	DiO_direction_t *direction_status) {
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <DIO_read_pin_direction+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <DIO_read_pin_direction+0x8>
    23f8:	0f 92       	push	r0
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9b 83       	std	Y+3, r25	; 0x03
    2400:	8a 83       	std	Y+2, r24	; 0x02
    2402:	7d 83       	std	Y+5, r23	; 0x05
    2404:	6c 83       	std	Y+4, r22	; 0x04
Std_ReturnType return_value = E_OK;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	89 83       	std	Y+1, r24	; 0x01
if ((pinconfig == NULL) || (direction_status == NULL)
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	c1 f0       	breq	.+48     	; 0x2442 <DIO_read_pin_direction+0x52>
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	a1 f0       	breq	.+40     	; 0x2442 <DIO_read_pin_direction+0x52>
    241a:	ea 81       	ldd	r30, Y+2	; 0x02
    241c:	fb 81       	ldd	r31, Y+3	; 0x03
    241e:	80 81       	ld	r24, Z
    2420:	86 95       	lsr	r24
    2422:	86 95       	lsr	r24
    2424:	87 70       	andi	r24, 0x07	; 7
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	88 30       	cpi	r24, 0x08	; 8
    242c:	91 05       	cpc	r25, r1
    242e:	4c f4       	brge	.+18     	; 0x2442 <DIO_read_pin_direction+0x52>
    2430:	ea 81       	ldd	r30, Y+2	; 0x02
    2432:	fb 81       	ldd	r31, Y+3	; 0x03
    2434:	80 81       	ld	r24, Z
    2436:	83 70       	andi	r24, 0x03	; 3
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	91 05       	cpc	r25, r1
    2440:	14 f0       	brlt	.+4      	; 0x2446 <DIO_read_pin_direction+0x56>
		|| (pinconfig->pin > DIO_PIN7) || (pinconfig->port > DIO_PORTD)) {
	return_value = E_NOK;
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	24 c0       	rjmp	.+72     	; 0x248e <DIO_read_pin_direction+0x9e>
} else {
	*direction_status = GET_BIT(*DDR_registers[pinconfig->port],
    2446:	ea 81       	ldd	r30, Y+2	; 0x02
    2448:	fb 81       	ldd	r31, Y+3	; 0x03
    244a:	80 81       	ld	r24, Z
    244c:	83 70       	andi	r24, 0x03	; 3
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	fc 01       	movw	r30, r24
    2458:	e4 59       	subi	r30, 0x94	; 148
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	01 90       	ld	r0, Z+
    245e:	f0 81       	ld	r31, Z
    2460:	e0 2d       	mov	r30, r0
    2462:	80 81       	ld	r24, Z
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	ea 81       	ldd	r30, Y+2	; 0x02
    246a:	fb 81       	ldd	r31, Y+3	; 0x03
    246c:	80 81       	ld	r24, Z
    246e:	86 95       	lsr	r24
    2470:	86 95       	lsr	r24
    2472:	87 70       	andi	r24, 0x07	; 7
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a9 01       	movw	r20, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <DIO_read_pin_direction+0x90>
    247c:	55 95       	asr	r21
    247e:	47 95       	ror	r20
    2480:	8a 95       	dec	r24
    2482:	e2 f7       	brpl	.-8      	; 0x247c <DIO_read_pin_direction+0x8c>
    2484:	ca 01       	movw	r24, r20
    2486:	81 70       	andi	r24, 0x01	; 1
    2488:	ec 81       	ldd	r30, Y+4	; 0x04
    248a:	fd 81       	ldd	r31, Y+5	; 0x05
    248c:	80 83       	st	Z, r24
			pinconfig->pin);
}

return return_value;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <DIO_write_pin_logic>:
 * arguments     first =>  pinconfig
 *               second => logic
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_write_pin_logic(const DIO_pin_config_t *pinconfig,
	DIO_logic_t logic) {
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <DIO_write_pin_logic+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <DIO_write_pin_logic+0x8>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <DIO_write_pin_logic+0xa>
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9b 83       	std	Y+3, r25	; 0x03
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    24b2:	6c 83       	std	Y+4, r22	; 0x04
Std_ReturnType return_value = E_OK;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	89 83       	std	Y+1, r24	; 0x01
if ((NULL == pinconfig) || (pinconfig->port > DIO_PORTD)
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	a1 f0       	breq	.+40     	; 0x24e8 <DIO_write_pin_logic+0x48>
    24c0:	ea 81       	ldd	r30, Y+2	; 0x02
    24c2:	fb 81       	ldd	r31, Y+3	; 0x03
    24c4:	80 81       	ld	r24, Z
    24c6:	83 70       	andi	r24, 0x03	; 3
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	91 05       	cpc	r25, r1
    24d0:	5c f4       	brge	.+22     	; 0x24e8 <DIO_write_pin_logic+0x48>
    24d2:	ea 81       	ldd	r30, Y+2	; 0x02
    24d4:	fb 81       	ldd	r31, Y+3	; 0x03
    24d6:	80 81       	ld	r24, Z
    24d8:	86 95       	lsr	r24
    24da:	86 95       	lsr	r24
    24dc:	87 70       	andi	r24, 0x07	; 7
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	88 30       	cpi	r24, 0x08	; 8
    24e4:	91 05       	cpc	r25, r1
    24e6:	14 f0       	brlt	.+4      	; 0x24ec <DIO_write_pin_logic+0x4c>
		|| (pinconfig->pin > DIO_PIN7)) {
	return_value = E_NOK;
    24e8:	19 82       	std	Y+1, r1	; 0x01
    24ea:	71 c0       	rjmp	.+226    	; 0x25ce <DIO_write_pin_logic+0x12e>
} else {
	switch (logic) {
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	3e 83       	std	Y+6, r19	; 0x06
    24f4:	2d 83       	std	Y+5, r18	; 0x05
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	b1 f1       	breq	.+108    	; 0x256a <DIO_write_pin_logic+0xca>
    24fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2500:	3e 81       	ldd	r19, Y+6	; 0x06
    2502:	21 30       	cpi	r18, 0x01	; 1
    2504:	31 05       	cpc	r19, r1
    2506:	09 f0       	breq	.+2      	; 0x250a <DIO_write_pin_logic+0x6a>
    2508:	61 c0       	rjmp	.+194    	; 0x25cc <DIO_write_pin_logic+0x12c>
	case DIO_HIGH:
		SET_BIT(*PORT_registers[pinconfig->port], pinconfig->pin);
    250a:	ea 81       	ldd	r30, Y+2	; 0x02
    250c:	fb 81       	ldd	r31, Y+3	; 0x03
    250e:	80 81       	ld	r24, Z
    2510:	83 70       	andi	r24, 0x03	; 3
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	fc 01       	movw	r30, r24
    251c:	ec 58       	subi	r30, 0x8C	; 140
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	a0 81       	ld	r26, Z
    2522:	b1 81       	ldd	r27, Z+1	; 0x01
    2524:	ea 81       	ldd	r30, Y+2	; 0x02
    2526:	fb 81       	ldd	r31, Y+3	; 0x03
    2528:	80 81       	ld	r24, Z
    252a:	83 70       	andi	r24, 0x03	; 3
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	fc 01       	movw	r30, r24
    2536:	ec 58       	subi	r30, 0x8C	; 140
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	01 90       	ld	r0, Z+
    253c:	f0 81       	ld	r31, Z
    253e:	e0 2d       	mov	r30, r0
    2540:	80 81       	ld	r24, Z
    2542:	48 2f       	mov	r20, r24
    2544:	ea 81       	ldd	r30, Y+2	; 0x02
    2546:	fb 81       	ldd	r31, Y+3	; 0x03
    2548:	80 81       	ld	r24, Z
    254a:	86 95       	lsr	r24
    254c:	86 95       	lsr	r24
    254e:	87 70       	andi	r24, 0x07	; 7
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	02 2e       	mov	r0, r18
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <DIO_write_pin_logic+0xc0>
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <DIO_write_pin_logic+0xbc>
    2564:	84 2b       	or	r24, r20
    2566:	8c 93       	st	X, r24
    2568:	32 c0       	rjmp	.+100    	; 0x25ce <DIO_write_pin_logic+0x12e>
		break;
	case DIO_LOW:
		CLR_BIT(*PORT_registers[pinconfig->port], pinconfig->pin);
    256a:	ea 81       	ldd	r30, Y+2	; 0x02
    256c:	fb 81       	ldd	r31, Y+3	; 0x03
    256e:	80 81       	ld	r24, Z
    2570:	83 70       	andi	r24, 0x03	; 3
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	fc 01       	movw	r30, r24
    257c:	ec 58       	subi	r30, 0x8C	; 140
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	a0 81       	ld	r26, Z
    2582:	b1 81       	ldd	r27, Z+1	; 0x01
    2584:	ea 81       	ldd	r30, Y+2	; 0x02
    2586:	fb 81       	ldd	r31, Y+3	; 0x03
    2588:	80 81       	ld	r24, Z
    258a:	83 70       	andi	r24, 0x03	; 3
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	fc 01       	movw	r30, r24
    2596:	ec 58       	subi	r30, 0x8C	; 140
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	01 90       	ld	r0, Z+
    259c:	f0 81       	ld	r31, Z
    259e:	e0 2d       	mov	r30, r0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	ea 81       	ldd	r30, Y+2	; 0x02
    25a6:	fb 81       	ldd	r31, Y+3	; 0x03
    25a8:	80 81       	ld	r24, Z
    25aa:	86 95       	lsr	r24
    25ac:	86 95       	lsr	r24
    25ae:	87 70       	andi	r24, 0x07	; 7
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_write_pin_logic+0x120>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_write_pin_logic+0x11c>
    25c4:	80 95       	com	r24
    25c6:	84 23       	and	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <DIO_write_pin_logic+0x12e>
		break;
	default:
		return_value = E_NOK;
    25cc:	19 82       	std	Y+1, r1	; 0x01
	}
}

return return_value;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d0:	26 96       	adiw	r28, 0x06	; 6
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <DIO_read_pin_logic>:
/*******************************************************************************************************************************/
Std_ReturnType DIO_read_pin_logic(const DIO_pin_config_t *pinconfig,
	DIO_logic_t*logic_status) {
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <DIO_read_pin_logic+0x6>
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <DIO_read_pin_logic+0x8>
    25ea:	0f 92       	push	r0
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9b 83       	std	Y+3, r25	; 0x03
    25f2:	8a 83       	std	Y+2, r24	; 0x02
    25f4:	7d 83       	std	Y+5, r23	; 0x05
    25f6:	6c 83       	std	Y+4, r22	; 0x04
Std_ReturnType return_value = E_OK;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
if ((pinconfig == NULL) || (logic_status == NULL) || (pinconfig->pin > DIO_PIN7)
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	c1 f0       	breq	.+48     	; 0x2634 <DIO_read_pin_logic+0x52>
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	9d 81       	ldd	r25, Y+5	; 0x05
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	a1 f0       	breq	.+40     	; 0x2634 <DIO_read_pin_logic+0x52>
    260c:	ea 81       	ldd	r30, Y+2	; 0x02
    260e:	fb 81       	ldd	r31, Y+3	; 0x03
    2610:	80 81       	ld	r24, Z
    2612:	86 95       	lsr	r24
    2614:	86 95       	lsr	r24
    2616:	87 70       	andi	r24, 0x07	; 7
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	88 30       	cpi	r24, 0x08	; 8
    261e:	91 05       	cpc	r25, r1
    2620:	4c f4       	brge	.+18     	; 0x2634 <DIO_read_pin_logic+0x52>
    2622:	ea 81       	ldd	r30, Y+2	; 0x02
    2624:	fb 81       	ldd	r31, Y+3	; 0x03
    2626:	80 81       	ld	r24, Z
    2628:	83 70       	andi	r24, 0x03	; 3
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	84 30       	cpi	r24, 0x04	; 4
    2630:	91 05       	cpc	r25, r1
    2632:	14 f0       	brlt	.+4      	; 0x2638 <DIO_read_pin_logic+0x56>
		|| (pinconfig->port > DIO_PORTD)) {
	return_value = E_NOK;
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	24 c0       	rjmp	.+72     	; 0x2680 <DIO_read_pin_logic+0x9e>
} else {
	*logic_status = GET_BIT(*PIN_registers[pinconfig->port], pinconfig->pin);
    2638:	ea 81       	ldd	r30, Y+2	; 0x02
    263a:	fb 81       	ldd	r31, Y+3	; 0x03
    263c:	80 81       	ld	r24, Z
    263e:	83 70       	andi	r24, 0x03	; 3
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	fc 01       	movw	r30, r24
    264a:	e4 58       	subi	r30, 0x84	; 132
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	01 90       	ld	r0, Z+
    2650:	f0 81       	ld	r31, Z
    2652:	e0 2d       	mov	r30, r0
    2654:	80 81       	ld	r24, Z
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	ea 81       	ldd	r30, Y+2	; 0x02
    265c:	fb 81       	ldd	r31, Y+3	; 0x03
    265e:	80 81       	ld	r24, Z
    2660:	86 95       	lsr	r24
    2662:	86 95       	lsr	r24
    2664:	87 70       	andi	r24, 0x07	; 7
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a9 01       	movw	r20, r18
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <DIO_read_pin_logic+0x90>
    266e:	55 95       	asr	r21
    2670:	47 95       	ror	r20
    2672:	8a 95       	dec	r24
    2674:	e2 f7       	brpl	.-8      	; 0x266e <DIO_read_pin_logic+0x8c>
    2676:	ca 01       	movw	r24, r20
    2678:	81 70       	andi	r24, 0x01	; 1
    267a:	ec 81       	ldd	r30, Y+4	; 0x04
    267c:	fd 81       	ldd	r31, Y+5	; 0x05
    267e:	80 83       	st	Z, r24
}

return return_value;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <DIO_toggle_pin_logic>:
/* name   DIO_toggle_pin_logic
 * description   toggle PIN logic
 * arguments     first =>  pinconfig      options (PORTA, PORTB,PORTC,PORTD)
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_toggle_pin_logic	(DIO_pin_config_t *pinconfig) {
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <DIO_toggle_pin_logic+0x6>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	9b 83       	std	Y+3, r25	; 0x03
    26a0:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType return_value = E_OK;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
if ((pinconfig == NULL) || (pinconfig->pin > DIO_PIN7)
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	9b 81       	ldd	r25, Y+3	; 0x03
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	a1 f0       	breq	.+40     	; 0x26d6 <DIO_toggle_pin_logic+0x44>
    26ae:	ea 81       	ldd	r30, Y+2	; 0x02
    26b0:	fb 81       	ldd	r31, Y+3	; 0x03
    26b2:	80 81       	ld	r24, Z
    26b4:	86 95       	lsr	r24
    26b6:	86 95       	lsr	r24
    26b8:	87 70       	andi	r24, 0x07	; 7
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	88 30       	cpi	r24, 0x08	; 8
    26c0:	91 05       	cpc	r25, r1
    26c2:	4c f4       	brge	.+18     	; 0x26d6 <DIO_toggle_pin_logic+0x44>
    26c4:	ea 81       	ldd	r30, Y+2	; 0x02
    26c6:	fb 81       	ldd	r31, Y+3	; 0x03
    26c8:	80 81       	ld	r24, Z
    26ca:	83 70       	andi	r24, 0x03	; 3
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	91 05       	cpc	r25, r1
    26d4:	14 f0       	brlt	.+4      	; 0x26da <DIO_toggle_pin_logic+0x48>
		|| (pinconfig->port > DIO_PORTD)) {
	return_value = E_NOK;
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	2f c0       	rjmp	.+94     	; 0x2738 <DIO_toggle_pin_logic+0xa6>
} else {
	TGL_BIT(*PORT_registers[pinconfig->port], pinconfig->pin);
    26da:	ea 81       	ldd	r30, Y+2	; 0x02
    26dc:	fb 81       	ldd	r31, Y+3	; 0x03
    26de:	80 81       	ld	r24, Z
    26e0:	83 70       	andi	r24, 0x03	; 3
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	fc 01       	movw	r30, r24
    26ec:	ec 58       	subi	r30, 0x8C	; 140
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	a0 81       	ld	r26, Z
    26f2:	b1 81       	ldd	r27, Z+1	; 0x01
    26f4:	ea 81       	ldd	r30, Y+2	; 0x02
    26f6:	fb 81       	ldd	r31, Y+3	; 0x03
    26f8:	80 81       	ld	r24, Z
    26fa:	83 70       	andi	r24, 0x03	; 3
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	fc 01       	movw	r30, r24
    2706:	ec 58       	subi	r30, 0x8C	; 140
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	01 90       	ld	r0, Z+
    270c:	f0 81       	ld	r31, Z
    270e:	e0 2d       	mov	r30, r0
    2710:	80 81       	ld	r24, Z
    2712:	48 2f       	mov	r20, r24
    2714:	ea 81       	ldd	r30, Y+2	; 0x02
    2716:	fb 81       	ldd	r31, Y+3	; 0x03
    2718:	80 81       	ld	r24, Z
    271a:	86 95       	lsr	r24
    271c:	86 95       	lsr	r24
    271e:	87 70       	andi	r24, 0x07	; 7
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	02 2e       	mov	r0, r18
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <DIO_toggle_pin_logic+0x9e>
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	0a 94       	dec	r0
    2732:	e2 f7       	brpl	.-8      	; 0x272c <DIO_toggle_pin_logic+0x9a>
    2734:	84 27       	eor	r24, r20
    2736:	8c 93       	st	X, r24
}
return return_value;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
}
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <DIO_write_port_direction>:
 * description   Set port Direction
 * arguments     first =>  port :
 * 				 second=>  direction :
 * return        (E_OK,E_NOK)
 */
Std_ReturnType DIO_write_port_direction(DIO_port_index_t port, u8 direction) {
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <DIO_write_port_direction+0x6>
    274c:	00 d0       	rcall	.+0      	; 0x274e <DIO_write_port_direction+0x8>
    274e:	0f 92       	push	r0
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	8a 83       	std	Y+2, r24	; 0x02
    2756:	6b 83       	std	Y+3, r22	; 0x03
Std_ReturnType return_value = E_OK;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	89 83       	std	Y+1, r24	; 0x01
if ((direction > DIO_OUTPUT) || (port > DIO_PORTD)) {
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	82 30       	cpi	r24, 0x02	; 2
    2760:	18 f4       	brcc	.+6      	; 0x2768 <DIO_write_port_direction+0x22>
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	84 30       	cpi	r24, 0x04	; 4
    2766:	10 f0       	brcs	.+4      	; 0x276c <DIO_write_port_direction+0x26>
	return_value = E_NOK;
    2768:	19 82       	std	Y+1, r1	; 0x01
    276a:	29 c0       	rjmp	.+82     	; 0x27be <DIO_write_port_direction+0x78>
} else {
	switch (direction) {
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3d 83       	std	Y+5, r19	; 0x05
    2774:	2c 83       	std	Y+4, r18	; 0x04
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	9d 81       	ldd	r25, Y+5	; 0x05
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	31 f0       	breq	.+12     	; 0x278a <DIO_write_port_direction+0x44>
    277e:	2c 81       	ldd	r18, Y+4	; 0x04
    2780:	3d 81       	ldd	r19, Y+5	; 0x05
    2782:	21 30       	cpi	r18, 0x01	; 1
    2784:	31 05       	cpc	r19, r1
    2786:	71 f0       	breq	.+28     	; 0x27a4 <DIO_write_port_direction+0x5e>
    2788:	1a c0       	rjmp	.+52     	; 0x27be <DIO_write_port_direction+0x78>
	case DIO_INPUT:
		*DDR_registers[port] = DIO_u8_LOW;
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	fc 01       	movw	r30, r24
    2796:	e4 59       	subi	r30, 0x94	; 148
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	01 90       	ld	r0, Z+
    279c:	f0 81       	ld	r31, Z
    279e:	e0 2d       	mov	r30, r0
    27a0:	10 82       	st	Z, r1
    27a2:	0d c0       	rjmp	.+26     	; 0x27be <DIO_write_port_direction+0x78>
		break;
	case DIO_OUTPUT:
		*DDR_registers[port] = DIO_u8_HIGH;
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	fc 01       	movw	r30, r24
    27b0:	e4 59       	subi	r30, 0x94	; 148
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	01 90       	ld	r0, Z+
    27b6:	f0 81       	ld	r31, Z
    27b8:	e0 2d       	mov	r30, r0
    27ba:	8f ef       	ldi	r24, 0xFF	; 255
    27bc:	80 83       	st	Z, r24
		break;
	}
}
return return_value;
    27be:	89 81       	ldd	r24, Y+1	; 0x01

}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <DIO_read_port_direction>:
 * arguments     first =>  port
 *               second => direction_status
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_read_port_direction(DIO_port_index_t port,
	u8 *direction_status) {
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <DIO_read_port_direction+0x6>
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <DIO_read_port_direction+0x8>
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	8a 83       	std	Y+2, r24	; 0x02
    27de:	7c 83       	std	Y+4, r23	; 0x04
    27e0:	6b 83       	std	Y+3, r22	; 0x03
Std_ReturnType return_value = E_OK;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	89 83       	std	Y+1, r24	; 0x01
if (port > DIO_PORTD) {
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	84 30       	cpi	r24, 0x04	; 4
    27ea:	10 f0       	brcs	.+4      	; 0x27f0 <DIO_read_port_direction+0x20>
	return_value = E_NOK;
    27ec:	19 82       	std	Y+1, r1	; 0x01
    27ee:	1b c0       	rjmp	.+54     	; 0x2826 <DIO_read_port_direction+0x56>
} else {
	*direction_status = GET_REG(*DDR_registers[port]);
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	fc 01       	movw	r30, r24
    27fc:	e4 59       	subi	r30, 0x94	; 148
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	a0 81       	ld	r26, Z
    2802:	b1 81       	ldd	r27, Z+1	; 0x01
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	fc 01       	movw	r30, r24
    2810:	e4 59       	subi	r30, 0x94	; 148
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	01 90       	ld	r0, Z+
    2816:	f0 81       	ld	r31, Z
    2818:	e0 2d       	mov	r30, r0
    281a:	80 81       	ld	r24, Z
    281c:	8c 93       	st	X, r24
    281e:	8c 91       	ld	r24, X
    2820:	eb 81       	ldd	r30, Y+3	; 0x03
    2822:	fc 81       	ldd	r31, Y+4	; 0x04
    2824:	80 83       	st	Z, r24

}
return return_value;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <DIO_write_port_logic>:
 * description   Set PIN logic
 * arguments     first =>  pinconfig
 *               second => logic
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_write_port_logic(DIO_port_index_t port, u8 logic) {
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <DIO_write_port_logic+0x6>
    283c:	00 d0       	rcall	.+0      	; 0x283e <DIO_write_port_logic+0x8>
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	6b 83       	std	Y+3, r22	; 0x03
Std_ReturnType return_value = E_OK;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	89 83       	std	Y+1, r24	; 0x01
if ((logic > DIO_u8_HIGH) || (port > DIO_PORTD)) {
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	84 30       	cpi	r24, 0x04	; 4
    2850:	10 f0       	brcs	.+4      	; 0x2856 <DIO_write_port_logic+0x20>
	return_value = E_NOK;
    2852:	19 82       	std	Y+1, r1	; 0x01
    2854:	28 c0       	rjmp	.+80     	; 0x28a6 <DIO_write_port_logic+0x70>
} else {
	switch (logic) {
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	3d 83       	std	Y+5, r19	; 0x05
    285e:	2c 83       	std	Y+4, r18	; 0x04
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	9d 81       	ldd	r25, Y+5	; 0x05
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	99 f0       	breq	.+38     	; 0x288e <DIO_write_port_logic+0x58>
    2868:	2c 81       	ldd	r18, Y+4	; 0x04
    286a:	3d 81       	ldd	r19, Y+5	; 0x05
    286c:	2f 3f       	cpi	r18, 0xFF	; 255
    286e:	31 05       	cpc	r19, r1
    2870:	d1 f4       	brne	.+52     	; 0x28a6 <DIO_write_port_logic+0x70>
	case DIO_u8_HIGH:
		*PORT_registers[port] = DIO_u8_HIGH;
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	fc 01       	movw	r30, r24
    287e:	ec 58       	subi	r30, 0x8C	; 140
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	01 90       	ld	r0, Z+
    2884:	f0 81       	ld	r31, Z
    2886:	e0 2d       	mov	r30, r0
    2888:	8f ef       	ldi	r24, 0xFF	; 255
    288a:	80 83       	st	Z, r24
    288c:	0c c0       	rjmp	.+24     	; 0x28a6 <DIO_write_port_logic+0x70>
		break;
	case DIO_u8_LOW:
		*PORT_registers[port] = DIO_u8_LOW;
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	fc 01       	movw	r30, r24
    289a:	ec 58       	subi	r30, 0x8C	; 140
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	10 82       	st	Z, r1
		break;
	}
}

return return_value;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <DIO_read_port_logic>:
 * description   read PIN logic
 * arguments     first =>  port      options (PORTA, PORTB,PORTC,PORTD)
 *               second => *logic_status
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_read_port_logic(DIO_port_index_t port, u8 *logic_status) {
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <DIO_read_port_logic+0x6>
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <DIO_read_port_logic+0x8>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	8a 83       	std	Y+2, r24	; 0x02
    28c6:	7c 83       	std	Y+4, r23	; 0x04
    28c8:	6b 83       	std	Y+3, r22	; 0x03

Std_ReturnType return_value = E_OK;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	89 83       	std	Y+1, r24	; 0x01
if (port > DIO_PORTD) {
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	84 30       	cpi	r24, 0x04	; 4
    28d2:	10 f0       	brcs	.+4      	; 0x28d8 <DIO_read_port_logic+0x20>
	return_value = E_NOK;
    28d4:	19 82       	std	Y+1, r1	; 0x01
    28d6:	1b c0       	rjmp	.+54     	; 0x290e <DIO_read_port_logic+0x56>
} else {
	*logic_status = GET_REG(*PIN_registers[port]);
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	fc 01       	movw	r30, r24
    28e4:	e4 58       	subi	r30, 0x84	; 132
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	a0 81       	ld	r26, Z
    28ea:	b1 81       	ldd	r27, Z+1	; 0x01
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	fc 01       	movw	r30, r24
    28f8:	e4 58       	subi	r30, 0x84	; 132
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	01 90       	ld	r0, Z+
    28fe:	f0 81       	ld	r31, Z
    2900:	e0 2d       	mov	r30, r0
    2902:	80 81       	ld	r24, Z
    2904:	8c 93       	st	X, r24
    2906:	8c 91       	ld	r24, X
    2908:	eb 81       	ldd	r30, Y+3	; 0x03
    290a:	fc 81       	ldd	r31, Y+4	; 0x04
    290c:	80 83       	st	Z, r24

}
return return_value;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <DIO_toggle_port_logic>:
/* name   DIO_toggle_port_logic
 * description   toggle port logic
 * arguments     first =>  port
 * return   (E_OK,E_NOK)
 */
Std_ReturnType DIO_toggle_port_logic(DIO_port_index_t port) {
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <DIO_toggle_port_logic+0x6>
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	8a 83       	std	Y+2, r24	; 0x02
Std_ReturnType return_value = E_OK;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	89 83       	std	Y+1, r24	; 0x01
if (port > DIO_PORTD) {
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	10 f0       	brcs	.+4      	; 0x2938 <DIO_toggle_port_logic+0x1a>
	return_value = E_NOK;
    2934:	19 82       	std	Y+1, r1	; 0x01
    2936:	18 c0       	rjmp	.+48     	; 0x2968 <DIO_toggle_port_logic+0x4a>
} else {
	TGL_REG(*PORT_registers[port]);
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	fc 01       	movw	r30, r24
    2944:	ec 58       	subi	r30, 0x8C	; 140
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	a0 81       	ld	r26, Z
    294a:	b1 81       	ldd	r27, Z+1	; 0x01
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	fc 01       	movw	r30, r24
    2958:	ec 58       	subi	r30, 0x8C	; 140
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	01 90       	ld	r0, Z+
    295e:	f0 81       	ld	r31, Z
    2960:	e0 2d       	mov	r30, r0
    2962:	80 81       	ld	r24, Z
    2964:	80 95       	com	r24
    2966:	8c 93       	st	X, r24
}
return return_value;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
}
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <ADC_init>:
 * Arguments   :  Copy_u16Address : Address to write data in  RANGE (0x000: 0x3FF)
 * 				  Copy_u8Data     : Data will be written in EEPROM ADDRESS
 * Return      :  E_OK,E_NOK
 */

Std_ReturnType ADC_init(ADC_CONF_t *ADC){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <ADC_init+0x6>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	9b 83       	std	Y+3, r25	; 0x03
    2982:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	9b 81       	ldd	r25, Y+3	; 0x03
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	11 f4       	brne	.+4      	; 0x2994 <ADC_init+0x20>
		return_value = E_NOK;
    2990:	19 82       	std	Y+1, r1	; 0x01
    2992:	20 c0       	rjmp	.+64     	; 0x29d4 <ADC_init+0x60>
	}
	else {
		ADC_pin_init(ADC);
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	0e 94 66 15 	call	0x2acc	; 0x2acc <ADC_pin_init>
		ADC_set_ch(ADC);
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <ADC_set_ch>
		ADC_set_v_ref(ADC);
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <ADC_set_v_ref>
		ADC_set_adjusment(ADC);
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	0e 94 88 16 	call	0x2d10	; 0x2d10 <ADC_set_adjusment>
		ADC_set_prescaler(ADC);
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	9b 81       	ldd	r25, Y+3	; 0x03
    29b8:	0e 94 27 18 	call	0x304e	; 0x304e <ADC_set_prescaler>
		ADC_set_trigger_source(ADC);
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	9b 81       	ldd	r25, Y+3	; 0x03
    29c0:	0e 94 21 17 	call	0x2e42	; 0x2e42 <ADC_set_trigger_source>
		ADC_enable();
    29c4:	0e 94 3d 19 	call	0x327a	; 0x327a <ADC_enable>
#if ADC_INTERRUPT_FEATURE == ADC_INT_ON
		G_INT_Enable();
    29c8:	0e 94 43 0a 	call	0x1486	; 0x1486 <G_INT_Enable>
		ADC_INT_enable(ADC);
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	0e 94 12 19 	call	0x3224	; 0x3224 <ADC_INT_enable>
#endif
	}
	return return_value;
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <ADC_read_value_polling>:
 * Arguments   :  Copy_u16Address : Address to write data in  RANGE (0x000: 0x3FF)
 * 				  Copy_pu8Data : pointer to address of Data will be read from EEPROM ADDRESS
 * Return      :  E_OK,E_NOK
 */

Std_ReturnType ADC_read_value_polling(ADC_CONF_t *ADC,u16 *Copy_pu16DigitalValue){
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <ADC_read_value_polling+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <ADC_read_value_polling+0x8>
    29ea:	0f 92       	push	r0
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	9b 83       	std	Y+3, r25	; 0x03
    29f2:	8a 83       	std	Y+2, r24	; 0x02
    29f4:	7d 83       	std	Y+5, r23	; 0x05
    29f6:	6c 83       	std	Y+4, r22	; 0x04

	Std_ReturnType return_value = E_OK;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	89 83       	std	Y+1, r24	; 0x01
		if ((ADC == NULL)||(Copy_pu16DigitalValue == NULL)){
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	21 f0       	breq	.+8      	; 0x2a0c <ADC_read_value_polling+0x2a>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	11 f4       	brne	.+4      	; 0x2a10 <ADC_read_value_polling+0x2e>
			return_value = E_NOK;
    2a0c:	19 82       	std	Y+1, r1	; 0x01
    2a0e:	21 c0       	rjmp	.+66     	; 0x2a52 <ADC_read_value_polling+0x70>
		}
		else {
	ADC_start_conversion();
    2a10:	0e 94 2a 19 	call	0x3254	; 0x3254 <ADC_start_conversion>
	while (GET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADSC_BIT)==ZERO_INIT);
    2a14:	e6 e2       	ldi	r30, 0x26	; 38
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	82 95       	swap	r24
    2a1c:	86 95       	lsr	r24
    2a1e:	86 95       	lsr	r24
    2a20:	83 70       	andi	r24, 0x03	; 3
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	81 70       	andi	r24, 0x01	; 1
    2a28:	90 70       	andi	r25, 0x00	; 0
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	99 f3       	breq	.-26     	; 0x2a14 <ADC_read_value_polling+0x32>
	*Copy_pu16DigitalValue = (u16)ADC_u8_ADCL_REG |(ADC_u8_ADCH_REG<<8) ;
    2a2e:	e4 e2       	ldi	r30, 0x24	; 36
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	e5 e2       	ldi	r30, 0x25	; 37
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	98 2f       	mov	r25, r24
    2a44:	88 27       	eor	r24, r24
    2a46:	82 2b       	or	r24, r18
    2a48:	93 2b       	or	r25, r19
    2a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    2a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
}
		return return_value;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <ADC_read_value_INTERRUPT>:
 * Arguments   :  Copy_u16Address : Address to write data in  RANGE (0x000: 0x3FF)
 * 				  Copy_pu8Data : pointer to address of Data will be read from EEPROM ADDRESS
 * Return      :  E_OK,E_NOK
 */

Std_ReturnType ADC_read_value_INTERRUPT(ADC_CONF_t *ADC,u16 *Copy_pu16DigitalValue){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <ADC_read_value_INTERRUPT+0x6>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <ADC_read_value_INTERRUPT+0x8>
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	9b 83       	std	Y+3, r25	; 0x03
    2a74:	8a 83       	std	Y+2, r24	; 0x02
    2a76:	7d 83       	std	Y+5, r23	; 0x05
    2a78:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_OK;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	89 83       	std	Y+1, r24	; 0x01
		if (ADC == NULL){
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <ADC_read_value_INTERRUPT+0x26>
			return_value = E_NOK;
    2a86:	19 82       	std	Y+1, r1	; 0x01
    2a88:	18 c0       	rjmp	.+48     	; 0x2aba <ADC_read_value_INTERRUPT+0x56>
		}
		else {
	        ADC_start_conversion();
    2a8a:	0e 94 2a 19 	call	0x3254	; 0x3254 <ADC_start_conversion>
	        ADC_set_cbf(ADC);
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	9b 81       	ldd	r25, Y+3	; 0x03
    2a92:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_cbf>
	        *Copy_pu16DigitalValue = (u16)ADC_u8_ADCL_REG |(ADC_u8_ADCH_REG<<8) ;
    2a96:	e4 e2       	ldi	r30, 0x24	; 36
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	e5 e2       	ldi	r30, 0x25	; 37
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	98 2f       	mov	r25, r24
    2aac:	88 27       	eor	r24, r24
    2aae:	82 2b       	or	r24, r18
    2ab0:	93 2b       	or	r25, r19
    2ab2:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab4:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	80 83       	st	Z, r24

}
		return return_value;
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <ADC_pin_init>:



/**********************************************************************************************************************/
/******************************************helper functions************************************************************/
static Std_ReturnType ADC_pin_init(ADC_CONF_t *ADC) {
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <ADC_pin_init+0x6>
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9b 83       	std	Y+3, r25	; 0x03
    2ada:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	11 f4       	brne	.+4      	; 0x2aec <ADC_pin_init+0x20>
		return_value = E_NOK;
    2ae8:	19 82       	std	Y+1, r1	; 0x01
    2aea:	05 c0       	rjmp	.+10     	; 0x2af6 <ADC_pin_init+0x2a>
	} else {
		DIO_write_pin_direction(&ADC->ADC_pin);
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	02 96       	adiw	r24, 0x02	; 2
    2af2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DIO_write_pin_direction>
	}
	return return_value;
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <ADC_set_ch>:
/**********************************************************************************************************************/

static Std_ReturnType ADC_set_ch(ADC_CONF_t *ADC) {
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <ADC_set_ch+0x6>
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <ADC_set_ch+0x8>
    2b0c:	0f 92       	push	r0
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	9b 83       	std	Y+3, r25	; 0x03
    2b14:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <ADC_set_ch+0x22>
		return_value = E_NOK;
    2b22:	19 82       	std	Y+1, r1	; 0x01
    2b24:	ec c0       	rjmp	.+472    	; 0x2cfe <ADC_set_ch+0x1fa>
	} else {
		switch (ADC->ADC_channel) {
    2b26:	ea 81       	ldd	r30, Y+2	; 0x02
    2b28:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2a:	83 81       	ldd	r24, Z+3	; 0x03
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3d 83       	std	Y+5, r19	; 0x05
    2b32:	2c 83       	std	Y+4, r18	; 0x04
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	9d 81       	ldd	r25, Y+5	; 0x05
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <ADC_set_ch+0x3c>
    2b3e:	70 c0       	rjmp	.+224    	; 0x2c20 <ADC_set_ch+0x11c>
    2b40:	2c 81       	ldd	r18, Y+4	; 0x04
    2b42:	3d 81       	ldd	r19, Y+5	; 0x05
    2b44:	24 30       	cpi	r18, 0x04	; 4
    2b46:	31 05       	cpc	r19, r1
    2b48:	84 f4       	brge	.+32     	; 0x2b6a <ADC_set_ch+0x66>
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	91 05       	cpc	r25, r1
    2b52:	d1 f1       	breq	.+116    	; 0x2bc8 <ADC_set_ch+0xc4>
    2b54:	2c 81       	ldd	r18, Y+4	; 0x04
    2b56:	3d 81       	ldd	r19, Y+5	; 0x05
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	0c f0       	brlt	.+2      	; 0x2b60 <ADC_set_ch+0x5c>
    2b5e:	4a c0       	rjmp	.+148    	; 0x2bf4 <ADC_set_ch+0xf0>
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	9d 81       	ldd	r25, Y+5	; 0x05
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	d1 f0       	breq	.+52     	; 0x2b9c <ADC_set_ch+0x98>
    2b68:	c9 c0       	rjmp	.+402    	; 0x2cfc <ADC_set_ch+0x1f8>
    2b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6e:	25 30       	cpi	r18, 0x05	; 5
    2b70:	31 05       	cpc	r19, r1
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <ADC_set_ch+0x72>
    2b74:	81 c0       	rjmp	.+258    	; 0x2c78 <ADC_set_ch+0x174>
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	85 30       	cpi	r24, 0x05	; 5
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	0c f4       	brge	.+2      	; 0x2b82 <ADC_set_ch+0x7e>
    2b80:	65 c0       	rjmp	.+202    	; 0x2c4c <ADC_set_ch+0x148>
    2b82:	2c 81       	ldd	r18, Y+4	; 0x04
    2b84:	3d 81       	ldd	r19, Y+5	; 0x05
    2b86:	26 30       	cpi	r18, 0x06	; 6
    2b88:	31 05       	cpc	r19, r1
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <ADC_set_ch+0x8a>
    2b8c:	8b c0       	rjmp	.+278    	; 0x2ca4 <ADC_set_ch+0x1a0>
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	87 30       	cpi	r24, 0x07	; 7
    2b94:	91 05       	cpc	r25, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <ADC_set_ch+0x96>
    2b98:	9b c0       	rjmp	.+310    	; 0x2cd0 <ADC_set_ch+0x1cc>
    2b9a:	b0 c0       	rjmp	.+352    	; 0x2cfc <ADC_set_ch+0x1f8>
		case ADC_CHANNEL0:
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2b9c:	a7 e2       	ldi	r26, 0x27	; 39
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e7 e2       	ldi	r30, 0x27	; 39
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	8e 7f       	andi	r24, 0xFE	; 254
    2ba8:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2baa:	a7 e2       	ldi	r26, 0x27	; 39
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e7 e2       	ldi	r30, 0x27	; 39
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	8d 7f       	andi	r24, 0xFD	; 253
    2bb6:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2bb8:	a7 e2       	ldi	r26, 0x27	; 39
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e7 e2       	ldi	r30, 0x27	; 39
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8b 7f       	andi	r24, 0xFB	; 251
    2bc4:	8c 93       	st	X, r24
    2bc6:	9b c0       	rjmp	.+310    	; 0x2cfe <ADC_set_ch+0x1fa>
			break;
		case ADC_CHANNEL1:
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2bc8:	a7 e2       	ldi	r26, 0x27	; 39
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e7 e2       	ldi	r30, 0x27	; 39
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	81 60       	ori	r24, 0x01	; 1
    2bd4:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2bd6:	a7 e2       	ldi	r26, 0x27	; 39
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	e7 e2       	ldi	r30, 0x27	; 39
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	8d 7f       	andi	r24, 0xFD	; 253
    2be2:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2be4:	a7 e2       	ldi	r26, 0x27	; 39
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e7 e2       	ldi	r30, 0x27	; 39
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	8b 7f       	andi	r24, 0xFB	; 251
    2bf0:	8c 93       	st	X, r24
    2bf2:	85 c0       	rjmp	.+266    	; 0x2cfe <ADC_set_ch+0x1fa>

			break;
		case ADC_CHANNEL2:
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2bf4:	a7 e2       	ldi	r26, 0x27	; 39
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e7 e2       	ldi	r30, 0x27	; 39
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8e 7f       	andi	r24, 0xFE	; 254
    2c00:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2c02:	a7 e2       	ldi	r26, 0x27	; 39
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e7 e2       	ldi	r30, 0x27	; 39
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	82 60       	ori	r24, 0x02	; 2
    2c0e:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2c10:	a7 e2       	ldi	r26, 0x27	; 39
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e7 e2       	ldi	r30, 0x27	; 39
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	8b 7f       	andi	r24, 0xFB	; 251
    2c1c:	8c 93       	st	X, r24
    2c1e:	6f c0       	rjmp	.+222    	; 0x2cfe <ADC_set_ch+0x1fa>
			break;

		case ADC_CHANNEL3:
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2c20:	a7 e2       	ldi	r26, 0x27	; 39
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e7 e2       	ldi	r30, 0x27	; 39
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	81 60       	ori	r24, 0x01	; 1
    2c2c:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2c2e:	a7 e2       	ldi	r26, 0x27	; 39
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e7 e2       	ldi	r30, 0x27	; 39
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	82 60       	ori	r24, 0x02	; 2
    2c3a:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2c3c:	a7 e2       	ldi	r26, 0x27	; 39
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e7 e2       	ldi	r30, 0x27	; 39
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	8b 7f       	andi	r24, 0xFB	; 251
    2c48:	8c 93       	st	X, r24
    2c4a:	59 c0       	rjmp	.+178    	; 0x2cfe <ADC_set_ch+0x1fa>
			break;
		case ADC_CHANNEL4:
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2c4c:	a7 e2       	ldi	r26, 0x27	; 39
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e7 e2       	ldi	r30, 0x27	; 39
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	8e 7f       	andi	r24, 0xFE	; 254
    2c58:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2c5a:	a7 e2       	ldi	r26, 0x27	; 39
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e7 e2       	ldi	r30, 0x27	; 39
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8d 7f       	andi	r24, 0xFD	; 253
    2c66:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2c68:	a7 e2       	ldi	r26, 0x27	; 39
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e7 e2       	ldi	r30, 0x27	; 39
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	84 60       	ori	r24, 0x04	; 4
    2c74:	8c 93       	st	X, r24
    2c76:	43 c0       	rjmp	.+134    	; 0x2cfe <ADC_set_ch+0x1fa>
			break;
		case ADC_CHANNEL5:
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2c78:	a7 e2       	ldi	r26, 0x27	; 39
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e7 e2       	ldi	r30, 0x27	; 39
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	81 60       	ori	r24, 0x01	; 1
    2c84:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2c86:	a7 e2       	ldi	r26, 0x27	; 39
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e7 e2       	ldi	r30, 0x27	; 39
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	8d 7f       	andi	r24, 0xFD	; 253
    2c92:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2c94:	a7 e2       	ldi	r26, 0x27	; 39
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e7 e2       	ldi	r30, 0x27	; 39
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	84 60       	ori	r24, 0x04	; 4
    2ca0:	8c 93       	st	X, r24
    2ca2:	2d c0       	rjmp	.+90     	; 0x2cfe <ADC_set_ch+0x1fa>

			break;
		case ADC_CHANNEL6:
			CLR_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2ca4:	a7 e2       	ldi	r26, 0x27	; 39
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e7 e2       	ldi	r30, 0x27	; 39
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8e 7f       	andi	r24, 0xFE	; 254
    2cb0:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2cb2:	a7 e2       	ldi	r26, 0x27	; 39
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e7 e2       	ldi	r30, 0x27	; 39
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	82 60       	ori	r24, 0x02	; 2
    2cbe:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2cc0:	a7 e2       	ldi	r26, 0x27	; 39
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e7 e2       	ldi	r30, 0x27	; 39
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	84 60       	ori	r24, 0x04	; 4
    2ccc:	8c 93       	st	X, r24
    2cce:	17 c0       	rjmp	.+46     	; 0x2cfe <ADC_set_ch+0x1fa>
			break;
		case ADC_CHANNEL7:
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX0_BIT);
    2cd0:	a7 e2       	ldi	r26, 0x27	; 39
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e7 e2       	ldi	r30, 0x27	; 39
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	81 60       	ori	r24, 0x01	; 1
    2cdc:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX1_BIT);
    2cde:	a7 e2       	ldi	r26, 0x27	; 39
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e7 e2       	ldi	r30, 0x27	; 39
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	82 60       	ori	r24, 0x02	; 2
    2cea:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG,ADC_u8_ADMUX_MUX2_BIT);
    2cec:	a7 e2       	ldi	r26, 0x27	; 39
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e7 e2       	ldi	r30, 0x27	; 39
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	84 60       	ori	r24, 0x04	; 4
    2cf8:	8c 93       	st	X, r24
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <ADC_set_ch+0x1fa>

			break;
		default:
			return_value = E_NOK;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return return_value;
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <ADC_set_adjusment>:
/**********************************************************************************************************************/
static Std_ReturnType ADC_set_adjusment(ADC_CONF_t *ADC) {
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <ADC_set_adjusment+0x6>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <ADC_set_adjusment+0x8>
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	9b 83       	std	Y+3, r25	; 0x03
    2d20:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	11 f4       	brne	.+4      	; 0x2d32 <ADC_set_adjusment+0x22>
		return_value = E_NOK;
    2d2e:	19 82       	std	Y+1, r1	; 0x01
    2d30:	22 c0       	rjmp	.+68     	; 0x2d76 <ADC_set_adjusment+0x66>
	} else {
		switch (ADC->ADC_adjust) {
    2d32:	ea 81       	ldd	r30, Y+2	; 0x02
    2d34:	fb 81       	ldd	r31, Y+3	; 0x03
    2d36:	86 81       	ldd	r24, Z+6	; 0x06
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	3d 83       	std	Y+5, r19	; 0x05
    2d3e:	2c 83       	std	Y+4, r18	; 0x04
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	31 f0       	breq	.+12     	; 0x2d54 <ADC_set_adjusment+0x44>
    2d48:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4c:	21 30       	cpi	r18, 0x01	; 1
    2d4e:	31 05       	cpc	r19, r1
    2d50:	49 f0       	breq	.+18     	; 0x2d64 <ADC_set_adjusment+0x54>
    2d52:	10 c0       	rjmp	.+32     	; 0x2d74 <ADC_set_adjusment+0x64>
		case ADC_RIGHT_ADJUST:
			CLR_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_ADLAR_BIT);
    2d54:	a7 e2       	ldi	r26, 0x27	; 39
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e7 e2       	ldi	r30, 0x27	; 39
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	8f 7d       	andi	r24, 0xDF	; 223
    2d60:	8c 93       	st	X, r24
    2d62:	09 c0       	rjmp	.+18     	; 0x2d76 <ADC_set_adjusment+0x66>
			break;
		case ADC_LEFT_ADJUST:
			SET_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_ADLAR_BIT);
    2d64:	a7 e2       	ldi	r26, 0x27	; 39
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e7 e2       	ldi	r30, 0x27	; 39
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	80 62       	ori	r24, 0x20	; 32
    2d70:	8c 93       	st	X, r24
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <ADC_set_adjusment+0x66>
			break;
		default:
			return_value = E_NOK;
    2d74:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return return_value;
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <ADC_set_v_ref>:
/********************************************************************************************************************/
static Std_ReturnType ADC_set_v_ref(ADC_CONF_t *ADC) {
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <ADC_set_v_ref+0x6>
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <ADC_set_v_ref+0x8>
    2d90:	0f 92       	push	r0
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	9b 83       	std	Y+3, r25	; 0x03
    2d98:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	11 f4       	brne	.+4      	; 0x2daa <ADC_set_v_ref+0x22>
		return_value = E_NOK;
    2da6:	19 82       	std	Y+1, r1	; 0x01
    2da8:	43 c0       	rjmp	.+134    	; 0x2e30 <ADC_set_v_ref+0xa8>
	} else {
		switch (ADC->ADC_V_reference) {
    2daa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dac:	fb 81       	ldd	r31, Y+3	; 0x03
    2dae:	84 81       	ldd	r24, Z+4	; 0x04
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3d 83       	std	Y+5, r19	; 0x05
    2db6:	2c 83       	std	Y+4, r18	; 0x04
    2db8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dba:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	c1 f0       	breq	.+48     	; 0x2df2 <ADC_set_v_ref+0x6a>
    2dc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc6:	23 30       	cpi	r18, 0x03	; 3
    2dc8:	31 05       	cpc	r19, r1
    2dca:	11 f1       	breq	.+68     	; 0x2e10 <ADC_set_v_ref+0x88>
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	69 f5       	brne	.+90     	; 0x2e2e <ADC_set_v_ref+0xa6>
		case ADC_V_REFERENCE_AREF:
			CLR_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS0_BIT);
    2dd4:	a7 e2       	ldi	r26, 0x27	; 39
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e7 e2       	ldi	r30, 0x27	; 39
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	8f 7b       	andi	r24, 0xBF	; 191
    2de0:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS1_BIT);
    2de2:	a7 e2       	ldi	r26, 0x27	; 39
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e7 e2       	ldi	r30, 0x27	; 39
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	8f 77       	andi	r24, 0x7F	; 127
    2dee:	8c 93       	st	X, r24
    2df0:	1f c0       	rjmp	.+62     	; 0x2e30 <ADC_set_v_ref+0xa8>
			break;
		case ADC_V_REFERENCE_AVCC:
			SET_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS0_BIT);
    2df2:	a7 e2       	ldi	r26, 0x27	; 39
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e7 e2       	ldi	r30, 0x27	; 39
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	80 64       	ori	r24, 0x40	; 64
    2dfe:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS1_BIT);
    2e00:	a7 e2       	ldi	r26, 0x27	; 39
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e7 e2       	ldi	r30, 0x27	; 39
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	8f 77       	andi	r24, 0x7F	; 127
    2e0c:	8c 93       	st	X, r24
    2e0e:	10 c0       	rjmp	.+32     	; 0x2e30 <ADC_set_v_ref+0xa8>
			break;
		case ADC_V_REFERENCE_INTERNAL_2_56:
			SET_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS0_BIT);
    2e10:	a7 e2       	ldi	r26, 0x27	; 39
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e7 e2       	ldi	r30, 0x27	; 39
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 64       	ori	r24, 0x40	; 64
    2e1c:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADMUX_REG, ADC_u8_ADMUX_REFS1_BIT);
    2e1e:	a7 e2       	ldi	r26, 0x27	; 39
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e7 e2       	ldi	r30, 0x27	; 39
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	80 68       	ori	r24, 0x80	; 128
    2e2a:	8c 93       	st	X, r24
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <ADC_set_v_ref+0xa8>
			break;
		default:
			return_value = E_NOK;
    2e2e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return return_value;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <ADC_set_trigger_source>:
/*********************************************************************************************************************/
static Std_ReturnType ADC_set_trigger_source(ADC_CONF_t *ADC)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <ADC_set_trigger_source+0x6>
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <ADC_set_trigger_source+0x8>
    2e4a:	0f 92       	push	r0
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9b 83       	std	Y+3, r25	; 0x03
    2e52:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <ADC_set_trigger_source+0x22>
		return_value = E_NOK;
    2e60:	19 82       	std	Y+1, r1	; 0x01
    2e62:	ec c0       	rjmp	.+472    	; 0x303c <ADC_set_trigger_source+0x1fa>
	} else {
		switch (ADC->ADC_trigger_src) {
    2e64:	ea 81       	ldd	r30, Y+2	; 0x02
    2e66:	fb 81       	ldd	r31, Y+3	; 0x03
    2e68:	87 81       	ldd	r24, Z+7	; 0x07
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	3d 83       	std	Y+5, r19	; 0x05
    2e70:	2c 83       	std	Y+4, r18	; 0x04
    2e72:	8c 81       	ldd	r24, Y+4	; 0x04
    2e74:	9d 81       	ldd	r25, Y+5	; 0x05
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	91 05       	cpc	r25, r1
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <ADC_set_trigger_source+0x3c>
    2e7c:	70 c0       	rjmp	.+224    	; 0x2f5e <ADC_set_trigger_source+0x11c>
    2e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e80:	3d 81       	ldd	r19, Y+5	; 0x05
    2e82:	24 30       	cpi	r18, 0x04	; 4
    2e84:	31 05       	cpc	r19, r1
    2e86:	84 f4       	brge	.+32     	; 0x2ea8 <ADC_set_trigger_source+0x66>
    2e88:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	91 05       	cpc	r25, r1
    2e90:	d1 f1       	breq	.+116    	; 0x2f06 <ADC_set_trigger_source+0xc4>
    2e92:	2c 81       	ldd	r18, Y+4	; 0x04
    2e94:	3d 81       	ldd	r19, Y+5	; 0x05
    2e96:	22 30       	cpi	r18, 0x02	; 2
    2e98:	31 05       	cpc	r19, r1
    2e9a:	0c f0       	brlt	.+2      	; 0x2e9e <ADC_set_trigger_source+0x5c>
    2e9c:	4a c0       	rjmp	.+148    	; 0x2f32 <ADC_set_trigger_source+0xf0>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	d1 f0       	breq	.+52     	; 0x2eda <ADC_set_trigger_source+0x98>
    2ea6:	c9 c0       	rjmp	.+402    	; 0x303a <ADC_set_trigger_source+0x1f8>
    2ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    2eac:	25 30       	cpi	r18, 0x05	; 5
    2eae:	31 05       	cpc	r19, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <ADC_set_trigger_source+0x72>
    2eb2:	81 c0       	rjmp	.+258    	; 0x2fb6 <ADC_set_trigger_source+0x174>
    2eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb8:	85 30       	cpi	r24, 0x05	; 5
    2eba:	91 05       	cpc	r25, r1
    2ebc:	0c f4       	brge	.+2      	; 0x2ec0 <ADC_set_trigger_source+0x7e>
    2ebe:	65 c0       	rjmp	.+202    	; 0x2f8a <ADC_set_trigger_source+0x148>
    2ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec4:	26 30       	cpi	r18, 0x06	; 6
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <ADC_set_trigger_source+0x8a>
    2eca:	8b c0       	rjmp	.+278    	; 0x2fe2 <ADC_set_trigger_source+0x1a0>
    2ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ece:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed0:	87 30       	cpi	r24, 0x07	; 7
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <ADC_set_trigger_source+0x96>
    2ed6:	9b c0       	rjmp	.+310    	; 0x300e <ADC_set_trigger_source+0x1cc>
    2ed8:	b0 c0       	rjmp	.+352    	; 0x303a <ADC_set_trigger_source+0x1f8>

	case ADC_FREE_RUNNING:
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2eda:	a0 e5       	ldi	r26, 0x50	; 80
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e0 e5       	ldi	r30, 0x50	; 80
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8f 7d       	andi	r24, 0xDF	; 223
    2ee6:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2ee8:	a0 e5       	ldi	r26, 0x50	; 80
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e0 e5       	ldi	r30, 0x50	; 80
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	8f 7b       	andi	r24, 0xBF	; 191
    2ef4:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2ef6:	a0 e5       	ldi	r26, 0x50	; 80
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e0 e5       	ldi	r30, 0x50	; 80
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	8f 77       	andi	r24, 0x7F	; 127
    2f02:	8c 93       	st	X, r24
    2f04:	9b c0       	rjmp	.+310    	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	case ADC_ANALOG_COMP:
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2f06:	a0 e5       	ldi	r26, 0x50	; 80
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e0 e5       	ldi	r30, 0x50	; 80
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	80 62       	ori	r24, 0x20	; 32
    2f12:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2f14:	a0 e5       	ldi	r26, 0x50	; 80
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e0 e5       	ldi	r30, 0x50	; 80
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	8f 7b       	andi	r24, 0xBF	; 191
    2f20:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2f22:	a0 e5       	ldi	r26, 0x50	; 80
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e0 e5       	ldi	r30, 0x50	; 80
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8f 77       	andi	r24, 0x7F	; 127
    2f2e:	8c 93       	st	X, r24
    2f30:	85 c0       	rjmp	.+266    	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;

	case ADC_EXT_INT0:
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2f32:	a0 e5       	ldi	r26, 0x50	; 80
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e0 e5       	ldi	r30, 0x50	; 80
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 7d       	andi	r24, 0xDF	; 223
    2f3e:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2f40:	a0 e5       	ldi	r26, 0x50	; 80
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e0 e5       	ldi	r30, 0x50	; 80
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	80 64       	ori	r24, 0x40	; 64
    2f4c:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2f4e:	a0 e5       	ldi	r26, 0x50	; 80
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e0 e5       	ldi	r30, 0x50	; 80
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 77       	andi	r24, 0x7F	; 127
    2f5a:	8c 93       	st	X, r24
    2f5c:	6f c0       	rjmp	.+222    	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	case ADC_TIM0_COMP_MATCH:
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2f5e:	a0 e5       	ldi	r26, 0x50	; 80
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e0 e5       	ldi	r30, 0x50	; 80
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	80 62       	ori	r24, 0x20	; 32
    2f6a:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2f6c:	a0 e5       	ldi	r26, 0x50	; 80
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e0 e5       	ldi	r30, 0x50	; 80
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	80 64       	ori	r24, 0x40	; 64
    2f78:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2f7a:	a0 e5       	ldi	r26, 0x50	; 80
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e0 e5       	ldi	r30, 0x50	; 80
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8f 77       	andi	r24, 0x7F	; 127
    2f86:	8c 93       	st	X, r24
    2f88:	59 c0       	rjmp	.+178    	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	case ADC_TIM0_OVF:
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2f8a:	a0 e5       	ldi	r26, 0x50	; 80
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e0 e5       	ldi	r30, 0x50	; 80
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	8f 7d       	andi	r24, 0xDF	; 223
    2f96:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2f98:	a0 e5       	ldi	r26, 0x50	; 80
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e0 e5       	ldi	r30, 0x50	; 80
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	8f 7b       	andi	r24, 0xBF	; 191
    2fa4:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2fa6:	a0 e5       	ldi	r26, 0x50	; 80
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e0 e5       	ldi	r30, 0x50	; 80
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	80 68       	ori	r24, 0x80	; 128
    2fb2:	8c 93       	st	X, r24
    2fb4:	43 c0       	rjmp	.+134    	; 0x303c <ADC_set_trigger_source+0x1fa>

		break;
	case ADC_TIM1_COMP_MATCH:
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2fb6:	a0 e5       	ldi	r26, 0x50	; 80
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e0 e5       	ldi	r30, 0x50	; 80
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	80 62       	ori	r24, 0x20	; 32
    2fc2:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2fc4:	a0 e5       	ldi	r26, 0x50	; 80
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e0 e5       	ldi	r30, 0x50	; 80
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	8f 7b       	andi	r24, 0xBF	; 191
    2fd0:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2fd2:	a0 e5       	ldi	r26, 0x50	; 80
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e0 e5       	ldi	r30, 0x50	; 80
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 68       	ori	r24, 0x80	; 128
    2fde:	8c 93       	st	X, r24
    2fe0:	2d c0       	rjmp	.+90     	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	case ADC_TIM1_OVF:
		CLR_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    2fe2:	a0 e5       	ldi	r26, 0x50	; 80
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e0 e5       	ldi	r30, 0x50	; 80
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	8f 7d       	andi	r24, 0xDF	; 223
    2fee:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    2ff0:	a0 e5       	ldi	r26, 0x50	; 80
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e0 e5       	ldi	r30, 0x50	; 80
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	80 64       	ori	r24, 0x40	; 64
    2ffc:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    2ffe:	a0 e5       	ldi	r26, 0x50	; 80
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e0 e5       	ldi	r30, 0x50	; 80
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	80 68       	ori	r24, 0x80	; 128
    300a:	8c 93       	st	X, r24
    300c:	17 c0       	rjmp	.+46     	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	case ADC_TIM1_CAPTURE:
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS0_BIT);
    300e:	a0 e5       	ldi	r26, 0x50	; 80
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e0 e5       	ldi	r30, 0x50	; 80
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	80 62       	ori	r24, 0x20	; 32
    301a:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS1_BIT);
    301c:	a0 e5       	ldi	r26, 0x50	; 80
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e0 e5       	ldi	r30, 0x50	; 80
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	80 64       	ori	r24, 0x40	; 64
    3028:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_SFIOR_REG,ADC_u8_SFIOR_ADTS2_BIT);
    302a:	a0 e5       	ldi	r26, 0x50	; 80
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e0 e5       	ldi	r30, 0x50	; 80
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	80 68       	ori	r24, 0x80	; 128
    3036:	8c 93       	st	X, r24
    3038:	01 c0       	rjmp	.+2      	; 0x303c <ADC_set_trigger_source+0x1fa>
		break;
	default:
		return_value = E_NOK;
    303a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return return_value;
    303c:	89 81       	ldd	r24, Y+1	; 0x01
}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <ADC_set_prescaler>:

/****************************************************************************************************************************/
static Std_ReturnType ADC_set_prescaler(ADC_CONF_t *ADC) {
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <ADC_set_prescaler+0x6>
    3054:	00 d0       	rcall	.+0      	; 0x3056 <ADC_set_prescaler+0x8>
    3056:	0f 92       	push	r0
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	9b 83       	std	Y+3, r25	; 0x03
    305e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	89 83       	std	Y+1, r24	; 0x01
	if (ADC == NULL) {
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	11 f4       	brne	.+4      	; 0x3070 <ADC_set_prescaler+0x22>
		return_value = E_NOK;
    306c:	19 82       	std	Y+1, r1	; 0x01
    306e:	d1 c0       	rjmp	.+418    	; 0x3212 <ADC_set_prescaler+0x1c4>
	} else {
		switch (ADC->ADC_prescaler) {
    3070:	ea 81       	ldd	r30, Y+2	; 0x02
    3072:	fb 81       	ldd	r31, Y+3	; 0x03
    3074:	85 81       	ldd	r24, Z+5	; 0x05
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	3d 83       	std	Y+5, r19	; 0x05
    307c:	2c 83       	std	Y+4, r18	; 0x04
    307e:	8c 81       	ldd	r24, Y+4	; 0x04
    3080:	9d 81       	ldd	r25, Y+5	; 0x05
    3082:	84 30       	cpi	r24, 0x04	; 4
    3084:	91 05       	cpc	r25, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <ADC_set_prescaler+0x3c>
    3088:	6b c0       	rjmp	.+214    	; 0x3160 <ADC_set_prescaler+0x112>
    308a:	2c 81       	ldd	r18, Y+4	; 0x04
    308c:	3d 81       	ldd	r19, Y+5	; 0x05
    308e:	25 30       	cpi	r18, 0x05	; 5
    3090:	31 05       	cpc	r19, r1
    3092:	8c f4       	brge	.+34     	; 0x30b6 <ADC_set_prescaler+0x68>
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	9d 81       	ldd	r25, Y+5	; 0x05
    3098:	82 30       	cpi	r24, 0x02	; 2
    309a:	91 05       	cpc	r25, r1
    309c:	a9 f1       	breq	.+106    	; 0x3108 <ADC_set_prescaler+0xba>
    309e:	2c 81       	ldd	r18, Y+4	; 0x04
    30a0:	3d 81       	ldd	r19, Y+5	; 0x05
    30a2:	23 30       	cpi	r18, 0x03	; 3
    30a4:	31 05       	cpc	r19, r1
    30a6:	0c f0       	brlt	.+2      	; 0x30aa <ADC_set_prescaler+0x5c>
    30a8:	45 c0       	rjmp	.+138    	; 0x3134 <ADC_set_prescaler+0xe6>
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	9d 81       	ldd	r25, Y+5	; 0x05
    30ae:	81 30       	cpi	r24, 0x01	; 1
    30b0:	91 05       	cpc	r25, r1
    30b2:	a1 f0       	breq	.+40     	; 0x30dc <ADC_set_prescaler+0x8e>
    30b4:	ad c0       	rjmp	.+346    	; 0x3210 <ADC_set_prescaler+0x1c2>
    30b6:	2c 81       	ldd	r18, Y+4	; 0x04
    30b8:	3d 81       	ldd	r19, Y+5	; 0x05
    30ba:	26 30       	cpi	r18, 0x06	; 6
    30bc:	31 05       	cpc	r19, r1
    30be:	09 f4       	brne	.+2      	; 0x30c2 <ADC_set_prescaler+0x74>
    30c0:	7b c0       	rjmp	.+246    	; 0x31b8 <ADC_set_prescaler+0x16a>
    30c2:	8c 81       	ldd	r24, Y+4	; 0x04
    30c4:	9d 81       	ldd	r25, Y+5	; 0x05
    30c6:	86 30       	cpi	r24, 0x06	; 6
    30c8:	91 05       	cpc	r25, r1
    30ca:	0c f4       	brge	.+2      	; 0x30ce <ADC_set_prescaler+0x80>
    30cc:	5f c0       	rjmp	.+190    	; 0x318c <ADC_set_prescaler+0x13e>
    30ce:	2c 81       	ldd	r18, Y+4	; 0x04
    30d0:	3d 81       	ldd	r19, Y+5	; 0x05
    30d2:	27 30       	cpi	r18, 0x07	; 7
    30d4:	31 05       	cpc	r19, r1
    30d6:	09 f4       	brne	.+2      	; 0x30da <ADC_set_prescaler+0x8c>
    30d8:	85 c0       	rjmp	.+266    	; 0x31e4 <ADC_set_prescaler+0x196>
    30da:	9a c0       	rjmp	.+308    	; 0x3210 <ADC_set_prescaler+0x1c2>
		case ADC_PRESCALER_2:
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    30dc:	a6 e2       	ldi	r26, 0x26	; 38
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e6 e2       	ldi	r30, 0x26	; 38
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    30ea:	a6 e2       	ldi	r26, 0x26	; 38
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e6 e2       	ldi	r30, 0x26	; 38
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	8d 7f       	andi	r24, 0xFD	; 253
    30f6:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    30f8:	a6 e2       	ldi	r26, 0x26	; 38
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e6 e2       	ldi	r30, 0x26	; 38
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	8b 7f       	andi	r24, 0xFB	; 251
    3104:	8c 93       	st	X, r24
    3106:	85 c0       	rjmp	.+266    	; 0x3212 <ADC_set_prescaler+0x1c4>
			break;
		case ADC_PRESCALER_4:
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    3108:	a6 e2       	ldi	r26, 0x26	; 38
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e6 e2       	ldi	r30, 0x26	; 38
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	8e 7f       	andi	r24, 0xFE	; 254
    3114:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    3116:	a6 e2       	ldi	r26, 0x26	; 38
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e6 e2       	ldi	r30, 0x26	; 38
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	82 60       	ori	r24, 0x02	; 2
    3122:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    3124:	a6 e2       	ldi	r26, 0x26	; 38
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e6 e2       	ldi	r30, 0x26	; 38
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8b 7f       	andi	r24, 0xFB	; 251
    3130:	8c 93       	st	X, r24
    3132:	6f c0       	rjmp	.+222    	; 0x3212 <ADC_set_prescaler+0x1c4>
			break;

		case ADC_PRESCALER_8:
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    3134:	a6 e2       	ldi	r26, 0x26	; 38
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e6 e2       	ldi	r30, 0x26	; 38
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8e 7f       	andi	r24, 0xFE	; 254
    3140:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    3142:	a6 e2       	ldi	r26, 0x26	; 38
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e6 e2       	ldi	r30, 0x26	; 38
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	82 60       	ori	r24, 0x02	; 2
    314e:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    3150:	a6 e2       	ldi	r26, 0x26	; 38
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e6 e2       	ldi	r30, 0x26	; 38
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	84 60       	ori	r24, 0x04	; 4
    315c:	8c 93       	st	X, r24
    315e:	59 c0       	rjmp	.+178    	; 0x3212 <ADC_set_prescaler+0x1c4>
			break;
		case ADC_PRESCALER_16:
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    3160:	a6 e2       	ldi	r26, 0x26	; 38
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e6 e2       	ldi	r30, 0x26	; 38
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	8e 7f       	andi	r24, 0xFE	; 254
    316c:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    316e:	a6 e2       	ldi	r26, 0x26	; 38
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e6 e2       	ldi	r30, 0x26	; 38
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	8d 7f       	andi	r24, 0xFD	; 253
    317a:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    317c:	a6 e2       	ldi	r26, 0x26	; 38
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e6 e2       	ldi	r30, 0x26	; 38
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	84 60       	ori	r24, 0x04	; 4
    3188:	8c 93       	st	X, r24
    318a:	43 c0       	rjmp	.+134    	; 0x3212 <ADC_set_prescaler+0x1c4>
			break;
		case ADC_PRESCALER_32:
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    318c:	a6 e2       	ldi	r26, 0x26	; 38
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e6 e2       	ldi	r30, 0x26	; 38
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	81 60       	ori	r24, 0x01	; 1
    3198:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    319a:	a6 e2       	ldi	r26, 0x26	; 38
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e6 e2       	ldi	r30, 0x26	; 38
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	8d 7f       	andi	r24, 0xFD	; 253
    31a6:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    31a8:	a6 e2       	ldi	r26, 0x26	; 38
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e6 e2       	ldi	r30, 0x26	; 38
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	84 60       	ori	r24, 0x04	; 4
    31b4:	8c 93       	st	X, r24
    31b6:	2d c0       	rjmp	.+90     	; 0x3212 <ADC_set_prescaler+0x1c4>

			break;
		case ADC_PRESCALER_64:
			CLR_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    31b8:	a6 e2       	ldi	r26, 0x26	; 38
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e6 e2       	ldi	r30, 0x26	; 38
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8e 7f       	andi	r24, 0xFE	; 254
    31c4:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    31c6:	a6 e2       	ldi	r26, 0x26	; 38
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	e6 e2       	ldi	r30, 0x26	; 38
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	82 60       	ori	r24, 0x02	; 2
    31d2:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    31d4:	a6 e2       	ldi	r26, 0x26	; 38
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e6 e2       	ldi	r30, 0x26	; 38
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	84 60       	ori	r24, 0x04	; 4
    31e0:	8c 93       	st	X, r24
    31e2:	17 c0       	rjmp	.+46     	; 0x3212 <ADC_set_prescaler+0x1c4>
			break;
		case ADC_PRESCALER_128:
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS0_BIT);
    31e4:	a6 e2       	ldi	r26, 0x26	; 38
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e6 e2       	ldi	r30, 0x26	; 38
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	81 60       	ori	r24, 0x01	; 1
    31f0:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS1_BIT);
    31f2:	a6 e2       	ldi	r26, 0x26	; 38
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e6 e2       	ldi	r30, 0x26	; 38
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	82 60       	ori	r24, 0x02	; 2
    31fe:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADPS2_BIT);
    3200:	a6 e2       	ldi	r26, 0x26	; 38
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e6 e2       	ldi	r30, 0x26	; 38
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	84 60       	ori	r24, 0x04	; 4
    320c:	8c 93       	st	X, r24
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <ADC_set_prescaler+0x1c4>

			break;
		default:
			return_value = E_NOK;
    3210:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return return_value;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <ADC_INT_enable>:
/***********************************************************************************************************/
static Std_ReturnType ADC_INT_enable(ADC_CONF_t *ADC) {
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	00 d0       	rcall	.+0      	; 0x322a <ADC_INT_enable+0x6>
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_ADCSRA_ADIE_BIT);
    3238:	a6 e2       	ldi	r26, 0x26	; 38
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e6 e2       	ldi	r30, 0x26	; 38
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	88 60       	ori	r24, 0x08	; 8
    3244:	8c 93       	st	X, r24
	return return_value;
    3246:	89 81       	ldd	r24, Y+1	; 0x01
}
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	cf 91       	pop	r28
    3250:	df 91       	pop	r29
    3252:	08 95       	ret

00003254 <ADC_start_conversion>:
/*************************************************************************************************************/
static Std_ReturnType ADC_start_conversion(void) {
    3254:	df 93       	push	r29
    3256:	cf 93       	push	r28
    3258:	0f 92       	push	r0
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_ADCSRA_ADSC_BIT);
    3262:	a6 e2       	ldi	r26, 0x26	; 38
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e6 e2       	ldi	r30, 0x26	; 38
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	80 64       	ori	r24, 0x40	; 64
    326e:	8c 93       	st	X, r24
	return return_value;
    3270:	89 81       	ldd	r24, Y+1	; 0x01
}
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <ADC_enable>:
/*************************************************************************************************************/
static Std_ReturnType ADC_enable(void) {
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_u8_ADCSRA_ADEN_BIT);
    3288:	a6 e2       	ldi	r26, 0x26	; 38
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	e6 e2       	ldi	r30, 0x26	; 38
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	80 68       	ori	r24, 0x80	; 128
    3294:	8c 93       	st	X, r24
	return return_value;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
}
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <ADC_set_cbf>:
/**************************************************************************************************************/
static Std_ReturnType ADC_set_cbf(const ADC_CONF_t *ADC){
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <ADC_set_cbf+0x6>
    32a6:	0f 92       	push	r0
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	9b 83       	std	Y+3, r25	; 0x03
    32ae:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_OK;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	89 83       	std	Y+1, r24	; 0x01
				if (ADC == NULL){
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	11 f4       	brne	.+4      	; 0x32c0 <ADC_set_cbf+0x20>
					return_value = E_NOK;
    32bc:	19 82       	std	Y+1, r1	; 0x01
    32be:	08 c0       	rjmp	.+16     	; 0x32d0 <ADC_set_cbf+0x30>
				}
				else {
					ADC_INT_handler = ADC->ADC_APP_INT_handler;
    32c0:	ea 81       	ldd	r30, Y+2	; 0x02
    32c2:	fb 81       	ldd	r31, Y+3	; 0x03
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	90 93 f6 00 	sts	0x00F6, r25
    32cc:	80 93 f5 00 	sts	0x00F5, r24

				}
return return_value;
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <__vector_16>:
/*******************************************************************************************************************/
void __vector_16(void) __attribute((signal,used));
void __vector_16(void)
{
    32de:	1f 92       	push	r1
    32e0:	0f 92       	push	r0
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	0f 92       	push	r0
    32e6:	11 24       	eor	r1, r1
    32e8:	2f 93       	push	r18
    32ea:	3f 93       	push	r19
    32ec:	4f 93       	push	r20
    32ee:	5f 93       	push	r21
    32f0:	6f 93       	push	r22
    32f2:	7f 93       	push	r23
    32f4:	8f 93       	push	r24
    32f6:	9f 93       	push	r25
    32f8:	af 93       	push	r26
    32fa:	bf 93       	push	r27
    32fc:	ef 93       	push	r30
    32fe:	ff 93       	push	r31
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62

		 if (ADC_INT_handler != NULL){
    3308:	80 91 f5 00 	lds	r24, 0x00F5
    330c:	90 91 f6 00 	lds	r25, 0x00F6
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	29 f0       	breq	.+10     	; 0x331e <__vector_16+0x40>
			 ADC_INT_handler();
    3314:	e0 91 f5 00 	lds	r30, 0x00F5
    3318:	f0 91 f6 00 	lds	r31, 0x00F6
    331c:	09 95       	icall
		 }
		 SET_BIT(ADC_u8_ADCSRA_REG,ADC_u8_ADCSRA_ADIF_BIT);
    331e:	a6 e2       	ldi	r26, 0x26	; 38
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e6 e2       	ldi	r30, 0x26	; 38
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	80 61       	ori	r24, 0x10	; 16
    332a:	8c 93       	st	X, r24
	 }
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	ff 91       	pop	r31
    3332:	ef 91       	pop	r30
    3334:	bf 91       	pop	r27
    3336:	af 91       	pop	r26
    3338:	9f 91       	pop	r25
    333a:	8f 91       	pop	r24
    333c:	7f 91       	pop	r23
    333e:	6f 91       	pop	r22
    3340:	5f 91       	pop	r21
    3342:	4f 91       	pop	r20
    3344:	3f 91       	pop	r19
    3346:	2f 91       	pop	r18
    3348:	0f 90       	pop	r0
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	0f 90       	pop	r0
    334e:	1f 90       	pop	r1
    3350:	18 95       	reti

00003352 <SEGMANT_init>:
/*Name:			SEGMANT_init
 * Description: Initialize MCU Pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
 */
Std_ReturnType SEGMANT_init(void) {
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	0f 92       	push	r0
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62

	Std_ReturnType return_value = E_OK;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    3360:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
	return return_value;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
}
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <SEGMANT_write_number>:
/* name   SEGMANT_write_number
 * description   write number on 7 segment
 * arguments     first =>  SEGMANT : pointer to the SEGMANT pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType SEGMANT_write_number(const SEGMANT_t *SEGMANT, u8 number) {
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	00 d0       	rcall	.+0      	; 0x3374 <SEGMANT_write_number+0x6>
    3374:	00 d0       	rcall	.+0      	; 0x3376 <SEGMANT_write_number+0x8>
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	9b 83       	std	Y+3, r25	; 0x03
    337c:	8a 83       	std	Y+2, r24	; 0x02
    337e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_NOK;
    3380:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == SEGMANT)|| (number > SEGMANT_MAX_NUMBER)){
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	19 f0       	breq	.+6      	; 0x3390 <SEGMANT_write_number+0x22>
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	8a 30       	cpi	r24, 0x0A	; 10
    338e:	10 f0       	brcs	.+4      	; 0x3394 <SEGMANT_write_number+0x26>
		return_value = E_NOK;
    3390:	19 82       	std	Y+1, r1	; 0x01
    3392:	37 c0       	rjmp	.+110    	; 0x3402 <SEGMANT_write_number+0x94>
	}
	else {
		return_value = DIO_write_pin_logic(&SEGMANT->segmant_pins[SEGMANT_pin0],(number&STD_HIGH)),
    3394:	2a 81       	ldd	r18, Y+2	; 0x02
    3396:	3b 81       	ldd	r19, Y+3	; 0x03
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	48 2f       	mov	r20, r24
    339c:	41 70       	andi	r20, 0x01	; 1
    339e:	c9 01       	movw	r24, r18
    33a0:	64 2f       	mov	r22, r20
    33a2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	9c 01       	movw	r18, r24
    33ae:	2f 5f       	subi	r18, 0xFF	; 255
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
    33b2:	8c 81       	ldd	r24, Y+4	; 0x04
    33b4:	86 95       	lsr	r24
    33b6:	48 2f       	mov	r20, r24
    33b8:	41 70       	andi	r20, 0x01	; 1
    33ba:	c9 01       	movw	r24, r18
    33bc:	64 2f       	mov	r22, r20
    33be:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    33c2:	89 83       	std	Y+1, r24	; 0x01
		return_value = DIO_write_pin_logic(&SEGMANT->segmant_pins[SEGMANT_pin1],((number>>SEGMANT_pin1)&STD_HIGH));
		return_value = DIO_write_pin_logic(&SEGMANT->segmant_pins[SEGMANT_pin2],((number>>SEGMANT_pin2)&STD_HIGH));
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	9b 81       	ldd	r25, Y+3	; 0x03
    33c8:	9c 01       	movw	r18, r24
    33ca:	2e 5f       	subi	r18, 0xFE	; 254
    33cc:	3f 4f       	sbci	r19, 0xFF	; 255
    33ce:	8c 81       	ldd	r24, Y+4	; 0x04
    33d0:	86 95       	lsr	r24
    33d2:	86 95       	lsr	r24
    33d4:	48 2f       	mov	r20, r24
    33d6:	41 70       	andi	r20, 0x01	; 1
    33d8:	c9 01       	movw	r24, r18
    33da:	64 2f       	mov	r22, r20
    33dc:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    33e0:	89 83       	std	Y+1, r24	; 0x01
		return_value = DIO_write_pin_logic(&SEGMANT->segmant_pins[SEGMANT_pin3],((number>>SEGMANT_pin3)&STD_HIGH));
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	9b 81       	ldd	r25, Y+3	; 0x03
    33e6:	9c 01       	movw	r18, r24
    33e8:	2d 5f       	subi	r18, 0xFD	; 253
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	86 95       	lsr	r24
    33f0:	86 95       	lsr	r24
    33f2:	86 95       	lsr	r24
    33f4:	48 2f       	mov	r20, r24
    33f6:	41 70       	andi	r20, 0x01	; 1
    33f8:	c9 01       	movw	r24, r18
    33fa:	64 2f       	mov	r22, r20
    33fc:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    3400:	89 83       	std	Y+1, r24	; 0x01
	}
return return_value ;
    3402:	89 81       	ldd	r24, Y+1	; 0x01
}
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <RELAY_pin_init>:
/*Name:			RELAY_pin_init
 * Description: Initialize MCU Pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
 */
Std_ReturnType RELAY_pin_init(void) {
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	0f 92       	push	r0
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    3420:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
	return return_value;
    3424:	89 81       	ldd	r24, Y+1	; 0x01
}
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <RELAY_on>:
/* name   RELAY_on
 * description   turn RELAY ON
 * arguments     first =>  RELAY : pointer to the RELAY pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType RELAY_on(const RELAY_t *RELAY) {
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <RELAY_on+0x6>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <RELAY_on+0x8>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType return_value = E_NOK;
    343e:	19 82       	std	Y+1, r1	; 0x01
	DIO_pin_config_t pin_config = {.port = RELAY->port, .pin = RELAY->pin,.logic = RELAY->status
	};
    3440:	eb 81       	ldd	r30, Y+3	; 0x03
    3442:	fc 81       	ldd	r31, Y+4	; 0x04
    3444:	80 81       	ld	r24, Z
    3446:	28 2f       	mov	r18, r24
    3448:	23 70       	andi	r18, 0x03	; 3
    344a:	eb 81       	ldd	r30, Y+3	; 0x03
    344c:	fc 81       	ldd	r31, Y+4	; 0x04
    344e:	80 81       	ld	r24, Z
    3450:	98 2f       	mov	r25, r24
    3452:	96 95       	lsr	r25
    3454:	96 95       	lsr	r25
    3456:	97 70       	andi	r25, 0x07	; 7
    3458:	eb 81       	ldd	r30, Y+3	; 0x03
    345a:	fc 81       	ldd	r31, Y+4	; 0x04
    345c:	80 81       	ld	r24, Z
    345e:	38 2f       	mov	r19, r24
    3460:	32 95       	swap	r19
    3462:	36 95       	lsr	r19
    3464:	37 70       	andi	r19, 0x07	; 7
    3466:	31 70       	andi	r19, 0x01	; 1
    3468:	1a 82       	std	Y+2, r1	; 0x02
    346a:	23 70       	andi	r18, 0x03	; 3
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	8c 7f       	andi	r24, 0xFC	; 252
    3470:	82 2b       	or	r24, r18
    3472:	8a 83       	std	Y+2, r24	; 0x02
    3474:	89 2f       	mov	r24, r25
    3476:	87 70       	andi	r24, 0x07	; 7
    3478:	98 2f       	mov	r25, r24
    347a:	99 0f       	add	r25, r25
    347c:	99 0f       	add	r25, r25
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	83 7e       	andi	r24, 0xE3	; 227
    3482:	89 2b       	or	r24, r25
    3484:	8a 83       	std	Y+2, r24	; 0x02
    3486:	83 2f       	mov	r24, r19
    3488:	81 70       	andi	r24, 0x01	; 1
    348a:	98 2f       	mov	r25, r24
    348c:	92 95       	swap	r25
    348e:	99 0f       	add	r25, r25
    3490:	90 7e       	andi	r25, 0xE0	; 224
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	8f 7d       	andi	r24, 0xDF	; 223
    3496:	89 2b       	or	r24, r25
    3498:	8a 83       	std	Y+2, r24	; 0x02
	if (NULL == RELAY){
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	9c 81       	ldd	r25, Y+4	; 0x04
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	11 f4       	brne	.+4      	; 0x34a6 <RELAY_on+0x78>
		return_value = E_NOK;
    34a2:	19 82       	std	Y+1, r1	; 0x01
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <RELAY_on+0x86>
	}
	else {

		DIO_write_pin_logic(&pin_config,DIO_HIGH);
    34a6:	ce 01       	movw	r24, r28
    34a8:	02 96       	adiw	r24, 0x02	; 2
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>


		return_value = E_OK;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return return_value ;
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <RELAY_off>:
/* name   RELAY_off
 * description   turn RELAY off
 * arguments     first =>  RELAY : pointer to the RELAY pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType RELAY_off(const  RELAY_t *RELAY){
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <RELAY_off+0x6>
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <RELAY_off+0x8>
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	9c 83       	std	Y+4, r25	; 0x04
    34d2:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType return_value = E_NOK;
    34d4:	19 82       	std	Y+1, r1	; 0x01
		DIO_pin_config_t pin_config = {.port = RELAY->port, .pin = RELAY->pin,.logic = RELAY->status
		};
    34d6:	eb 81       	ldd	r30, Y+3	; 0x03
    34d8:	fc 81       	ldd	r31, Y+4	; 0x04
    34da:	80 81       	ld	r24, Z
    34dc:	28 2f       	mov	r18, r24
    34de:	23 70       	andi	r18, 0x03	; 3
    34e0:	eb 81       	ldd	r30, Y+3	; 0x03
    34e2:	fc 81       	ldd	r31, Y+4	; 0x04
    34e4:	80 81       	ld	r24, Z
    34e6:	98 2f       	mov	r25, r24
    34e8:	96 95       	lsr	r25
    34ea:	96 95       	lsr	r25
    34ec:	97 70       	andi	r25, 0x07	; 7
    34ee:	eb 81       	ldd	r30, Y+3	; 0x03
    34f0:	fc 81       	ldd	r31, Y+4	; 0x04
    34f2:	80 81       	ld	r24, Z
    34f4:	38 2f       	mov	r19, r24
    34f6:	32 95       	swap	r19
    34f8:	36 95       	lsr	r19
    34fa:	37 70       	andi	r19, 0x07	; 7
    34fc:	31 70       	andi	r19, 0x01	; 1
    34fe:	1a 82       	std	Y+2, r1	; 0x02
    3500:	23 70       	andi	r18, 0x03	; 3
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	8c 7f       	andi	r24, 0xFC	; 252
    3506:	82 2b       	or	r24, r18
    3508:	8a 83       	std	Y+2, r24	; 0x02
    350a:	89 2f       	mov	r24, r25
    350c:	87 70       	andi	r24, 0x07	; 7
    350e:	98 2f       	mov	r25, r24
    3510:	99 0f       	add	r25, r25
    3512:	99 0f       	add	r25, r25
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	83 7e       	andi	r24, 0xE3	; 227
    3518:	89 2b       	or	r24, r25
    351a:	8a 83       	std	Y+2, r24	; 0x02
    351c:	83 2f       	mov	r24, r19
    351e:	81 70       	andi	r24, 0x01	; 1
    3520:	98 2f       	mov	r25, r24
    3522:	92 95       	swap	r25
    3524:	99 0f       	add	r25, r25
    3526:	90 7e       	andi	r25, 0xE0	; 224
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	8f 7d       	andi	r24, 0xDF	; 223
    352c:	89 2b       	or	r24, r25
    352e:	8a 83       	std	Y+2, r24	; 0x02
		if (NULL == RELAY){
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	00 97       	sbiw	r24, 0x00	; 0
    3536:	11 f4       	brne	.+4      	; 0x353c <RELAY_off+0x78>
			return_value = E_NOK;
    3538:	19 82       	std	Y+1, r1	; 0x01
    353a:	07 c0       	rjmp	.+14     	; 0x354a <RELAY_off+0x86>
		}
		else {

			DIO_write_pin_logic(&pin_config,DIO_LOW);
    353c:	ce 01       	movw	r24, r28
    353e:	02 96       	adiw	r24, 0x02	; 2
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>


			return_value = E_OK;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	89 83       	std	Y+1, r24	; 0x01
		}
	return	return_value;
    354a:	89 81       	ldd	r24, Y+1	; 0x01
}
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <LED_pin_init>:
/*Name:			LED_Init
 * Description: Initialize MCU Pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
  */
Std_ReturnType LED_pin_init (void){
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
Std_ReturnType return_value= E_OK;
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	89 83       	std	Y+1, r24	; 0x01
DIO_init();
    3568:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
return return_value;
    356c:	89 81       	ldd	r24, Y+1	; 0x01

}
    356e:	0f 90       	pop	r0
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <LED_on>:
/* name   LED_on
 * description   turn LED ON
 * arguments     first =>  LED : pointer to the LED pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType LED_on(LED_t *LED){
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	00 d0       	rcall	.+0      	; 0x357c <LED_on+0x6>
    357c:	00 d0       	rcall	.+0      	; 0x357e <LED_on+0x8>
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
    3582:	9c 83       	std	Y+4, r25	; 0x04
    3584:	8b 83       	std	Y+3, r24	; 0x03
	DIO_pin_config_t pin_config ={ .port = LED->port, .pin=LED->pin , .direction = LED->direction, .logic = LED->logic
	};
    3586:	eb 81       	ldd	r30, Y+3	; 0x03
    3588:	fc 81       	ldd	r31, Y+4	; 0x04
    358a:	80 81       	ld	r24, Z
    358c:	98 2f       	mov	r25, r24
    358e:	93 70       	andi	r25, 0x03	; 3
    3590:	eb 81       	ldd	r30, Y+3	; 0x03
    3592:	fc 81       	ldd	r31, Y+4	; 0x04
    3594:	80 81       	ld	r24, Z
    3596:	28 2f       	mov	r18, r24
    3598:	26 95       	lsr	r18
    359a:	26 95       	lsr	r18
    359c:	27 70       	andi	r18, 0x07	; 7
    359e:	eb 81       	ldd	r30, Y+3	; 0x03
    35a0:	fc 81       	ldd	r31, Y+4	; 0x04
    35a2:	80 81       	ld	r24, Z
    35a4:	38 2f       	mov	r19, r24
    35a6:	32 95       	swap	r19
    35a8:	36 95       	lsr	r19
    35aa:	37 70       	andi	r19, 0x07	; 7
    35ac:	31 70       	andi	r19, 0x01	; 1
    35ae:	eb 81       	ldd	r30, Y+3	; 0x03
    35b0:	fc 81       	ldd	r31, Y+4	; 0x04
    35b2:	80 81       	ld	r24, Z
    35b4:	48 2f       	mov	r20, r24
    35b6:	42 95       	swap	r20
    35b8:	46 95       	lsr	r20
    35ba:	46 95       	lsr	r20
    35bc:	43 70       	andi	r20, 0x03	; 3
    35be:	41 70       	andi	r20, 0x01	; 1
    35c0:	93 70       	andi	r25, 0x03	; 3
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	8c 7f       	andi	r24, 0xFC	; 252
    35c6:	89 2b       	or	r24, r25
    35c8:	8a 83       	std	Y+2, r24	; 0x02
    35ca:	82 2f       	mov	r24, r18
    35cc:	87 70       	andi	r24, 0x07	; 7
    35ce:	98 2f       	mov	r25, r24
    35d0:	99 0f       	add	r25, r25
    35d2:	99 0f       	add	r25, r25
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	83 7e       	andi	r24, 0xE3	; 227
    35d8:	89 2b       	or	r24, r25
    35da:	8a 83       	std	Y+2, r24	; 0x02
    35dc:	83 2f       	mov	r24, r19
    35de:	81 70       	andi	r24, 0x01	; 1
    35e0:	98 2f       	mov	r25, r24
    35e2:	92 95       	swap	r25
    35e4:	99 0f       	add	r25, r25
    35e6:	90 7e       	andi	r25, 0xE0	; 224
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	8f 7d       	andi	r24, 0xDF	; 223
    35ec:	89 2b       	or	r24, r25
    35ee:	8a 83       	std	Y+2, r24	; 0x02
    35f0:	84 2f       	mov	r24, r20
    35f2:	81 70       	andi	r24, 0x01	; 1
    35f4:	98 2f       	mov	r25, r24
    35f6:	92 95       	swap	r25
    35f8:	99 0f       	add	r25, r25
    35fa:	99 0f       	add	r25, r25
    35fc:	90 7c       	andi	r25, 0xC0	; 192
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	8f 7b       	andi	r24, 0xBF	; 191
    3602:	89 2b       	or	r24, r25
    3604:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value= E_OK;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	89 83       	std	Y+1, r24	; 0x01
	if (LED == NULL){
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	9c 81       	ldd	r25, Y+4	; 0x04
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	11 f4       	brne	.+4      	; 0x3616 <LED_on+0xa0>
		return_value = E_NOK;
    3612:	19 82       	std	Y+1, r1	; 0x01
    3614:	05 c0       	rjmp	.+10     	; 0x3620 <LED_on+0xaa>
	}
	else {
		//DIO_write_pin_direction(&pin_config);
		DIO_write_pin_logic(&pin_config,LED_HIGH);
    3616:	ce 01       	movw	r24, r28
    3618:	02 96       	adiw	r24, 0x02	; 2
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
	}
	return return_value;
    3620:	89 81       	ldd	r24, Y+1	; 0x01

}
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <LED_off>:
/* name   LED_off
 * description   turn LED off
 * arguments     first =>  LED : pointer to the LED pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType LED_off (LED_t *LED){
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	00 d0       	rcall	.+0      	; 0x3636 <LED_off+0x6>
    3636:	00 d0       	rcall	.+0      	; 0x3638 <LED_off+0x8>
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	9c 83       	std	Y+4, r25	; 0x04
    363e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_pin_config_t pin_config ={ .port = LED->port, .pin=LED->pin , .direction = LED->direction, .logic = LED->logic

		};
    3640:	eb 81       	ldd	r30, Y+3	; 0x03
    3642:	fc 81       	ldd	r31, Y+4	; 0x04
    3644:	80 81       	ld	r24, Z
    3646:	98 2f       	mov	r25, r24
    3648:	93 70       	andi	r25, 0x03	; 3
    364a:	eb 81       	ldd	r30, Y+3	; 0x03
    364c:	fc 81       	ldd	r31, Y+4	; 0x04
    364e:	80 81       	ld	r24, Z
    3650:	28 2f       	mov	r18, r24
    3652:	26 95       	lsr	r18
    3654:	26 95       	lsr	r18
    3656:	27 70       	andi	r18, 0x07	; 7
    3658:	eb 81       	ldd	r30, Y+3	; 0x03
    365a:	fc 81       	ldd	r31, Y+4	; 0x04
    365c:	80 81       	ld	r24, Z
    365e:	38 2f       	mov	r19, r24
    3660:	32 95       	swap	r19
    3662:	36 95       	lsr	r19
    3664:	37 70       	andi	r19, 0x07	; 7
    3666:	31 70       	andi	r19, 0x01	; 1
    3668:	eb 81       	ldd	r30, Y+3	; 0x03
    366a:	fc 81       	ldd	r31, Y+4	; 0x04
    366c:	80 81       	ld	r24, Z
    366e:	48 2f       	mov	r20, r24
    3670:	42 95       	swap	r20
    3672:	46 95       	lsr	r20
    3674:	46 95       	lsr	r20
    3676:	43 70       	andi	r20, 0x03	; 3
    3678:	41 70       	andi	r20, 0x01	; 1
    367a:	93 70       	andi	r25, 0x03	; 3
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	8c 7f       	andi	r24, 0xFC	; 252
    3680:	89 2b       	or	r24, r25
    3682:	8a 83       	std	Y+2, r24	; 0x02
    3684:	82 2f       	mov	r24, r18
    3686:	87 70       	andi	r24, 0x07	; 7
    3688:	98 2f       	mov	r25, r24
    368a:	99 0f       	add	r25, r25
    368c:	99 0f       	add	r25, r25
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	83 7e       	andi	r24, 0xE3	; 227
    3692:	89 2b       	or	r24, r25
    3694:	8a 83       	std	Y+2, r24	; 0x02
    3696:	83 2f       	mov	r24, r19
    3698:	81 70       	andi	r24, 0x01	; 1
    369a:	98 2f       	mov	r25, r24
    369c:	92 95       	swap	r25
    369e:	99 0f       	add	r25, r25
    36a0:	90 7e       	andi	r25, 0xE0	; 224
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	8f 7d       	andi	r24, 0xDF	; 223
    36a6:	89 2b       	or	r24, r25
    36a8:	8a 83       	std	Y+2, r24	; 0x02
    36aa:	84 2f       	mov	r24, r20
    36ac:	81 70       	andi	r24, 0x01	; 1
    36ae:	98 2f       	mov	r25, r24
    36b0:	92 95       	swap	r25
    36b2:	99 0f       	add	r25, r25
    36b4:	99 0f       	add	r25, r25
    36b6:	90 7c       	andi	r25, 0xC0	; 192
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	8f 7b       	andi	r24, 0xBF	; 191
    36bc:	89 2b       	or	r24, r25
    36be:	8a 83       	std	Y+2, r24	; 0x02
		Std_ReturnType return_value= E_OK;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	89 83       	std	Y+1, r24	; 0x01
		if (LED == NULL){
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	11 f4       	brne	.+4      	; 0x36d0 <LED_off+0xa0>
			return_value = E_NOK;
    36cc:	19 82       	std	Y+1, r1	; 0x01
    36ce:	05 c0       	rjmp	.+10     	; 0x36da <LED_off+0xaa>
		}
		else {
			//DIO_write_pin_direction(&pin_config);
			DIO_write_pin_logic(&pin_config,LED_LOW);
    36d0:	ce 01       	movw	r24, r28
    36d2:	02 96       	adiw	r24, 0x02	; 2
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
		}
		return return_value;
    36da:	89 81       	ldd	r24, Y+1	; 0x01

	}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <LED_toggle>:
/* name   LED_toggle
 * description   toggle LED logic
 * arguments     first =>  LED   pointer to the LED pin configurations
 * return   (E_OK,E_NOK)
 */
Std_ReturnType LED_toggle (LED_t *LED){
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <LED_toggle+0x6>
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <LED_toggle+0x8>
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_pin_config_t pin_config ={ .port = LED->port, .pin=LED->pin , .direction = LED->direction, .logic = LED->logic

		};
    36fa:	eb 81       	ldd	r30, Y+3	; 0x03
    36fc:	fc 81       	ldd	r31, Y+4	; 0x04
    36fe:	80 81       	ld	r24, Z
    3700:	98 2f       	mov	r25, r24
    3702:	93 70       	andi	r25, 0x03	; 3
    3704:	eb 81       	ldd	r30, Y+3	; 0x03
    3706:	fc 81       	ldd	r31, Y+4	; 0x04
    3708:	80 81       	ld	r24, Z
    370a:	28 2f       	mov	r18, r24
    370c:	26 95       	lsr	r18
    370e:	26 95       	lsr	r18
    3710:	27 70       	andi	r18, 0x07	; 7
    3712:	eb 81       	ldd	r30, Y+3	; 0x03
    3714:	fc 81       	ldd	r31, Y+4	; 0x04
    3716:	80 81       	ld	r24, Z
    3718:	38 2f       	mov	r19, r24
    371a:	32 95       	swap	r19
    371c:	36 95       	lsr	r19
    371e:	37 70       	andi	r19, 0x07	; 7
    3720:	31 70       	andi	r19, 0x01	; 1
    3722:	eb 81       	ldd	r30, Y+3	; 0x03
    3724:	fc 81       	ldd	r31, Y+4	; 0x04
    3726:	80 81       	ld	r24, Z
    3728:	48 2f       	mov	r20, r24
    372a:	42 95       	swap	r20
    372c:	46 95       	lsr	r20
    372e:	46 95       	lsr	r20
    3730:	43 70       	andi	r20, 0x03	; 3
    3732:	41 70       	andi	r20, 0x01	; 1
    3734:	93 70       	andi	r25, 0x03	; 3
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	8c 7f       	andi	r24, 0xFC	; 252
    373a:	89 2b       	or	r24, r25
    373c:	8a 83       	std	Y+2, r24	; 0x02
    373e:	82 2f       	mov	r24, r18
    3740:	87 70       	andi	r24, 0x07	; 7
    3742:	98 2f       	mov	r25, r24
    3744:	99 0f       	add	r25, r25
    3746:	99 0f       	add	r25, r25
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	83 7e       	andi	r24, 0xE3	; 227
    374c:	89 2b       	or	r24, r25
    374e:	8a 83       	std	Y+2, r24	; 0x02
    3750:	83 2f       	mov	r24, r19
    3752:	81 70       	andi	r24, 0x01	; 1
    3754:	98 2f       	mov	r25, r24
    3756:	92 95       	swap	r25
    3758:	99 0f       	add	r25, r25
    375a:	90 7e       	andi	r25, 0xE0	; 224
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	8f 7d       	andi	r24, 0xDF	; 223
    3760:	89 2b       	or	r24, r25
    3762:	8a 83       	std	Y+2, r24	; 0x02
    3764:	84 2f       	mov	r24, r20
    3766:	81 70       	andi	r24, 0x01	; 1
    3768:	98 2f       	mov	r25, r24
    376a:	92 95       	swap	r25
    376c:	99 0f       	add	r25, r25
    376e:	99 0f       	add	r25, r25
    3770:	90 7c       	andi	r25, 0xC0	; 192
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	8f 7b       	andi	r24, 0xBF	; 191
    3776:	89 2b       	or	r24, r25
    3778:	8a 83       	std	Y+2, r24	; 0x02
		Std_ReturnType return_value= E_OK;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	89 83       	std	Y+1, r24	; 0x01
		if (LED == NULL){
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	9c 81       	ldd	r25, Y+4	; 0x04
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	11 f4       	brne	.+4      	; 0x378a <LED_toggle+0xa0>
			return_value = E_NOK;
    3786:	19 82       	std	Y+1, r1	; 0x01
    3788:	04 c0       	rjmp	.+8      	; 0x3792 <LED_toggle+0xa8>
		}
		else {
			//DIO_write_pin_direction(&pin_config);
			DIO_toggle_pin_logic(&pin_config);
    378a:	ce 01       	movw	r24, r28
    378c:	02 96       	adiw	r24, 0x02	; 2
    378e:	0e 94 49 13 	call	0x2692	; 0x2692 <DIO_toggle_pin_logic>
		}
		return return_value;
    3792:	89 81       	ldd	r24, Y+1	; 0x01

	}
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <LCD_4bit_init>:

/******************************************************************************************************/
/*******************************function definitions***************************************************/

//#if LCD_BIT_MODE == LCD_4BIT_MODE
Std_ReturnType LCD_4bit_init(const LCD_4bit_t *LCD) {
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	e7 97       	sbiw	r28, 0x37	; 55
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	9f ab       	std	Y+55, r25	; 0x37
    37b8:	8e ab       	std	Y+54, r24	; 0x36
	Std_ReturnType return_value = E_NOK;
    37ba:	1d aa       	std	Y+53, r1	; 0x35
	if (NULL == LCD) {
    37bc:	8e a9       	ldd	r24, Y+54	; 0x36
    37be:	9f a9       	ldd	r25, Y+55	; 0x37
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	11 f4       	brne	.+4      	; 0x37c8 <LCD_4bit_init+0x26>
		return_value = E_NOK;
    37c4:	1d aa       	std	Y+53, r1	; 0x35
    37c6:	da c1       	rjmp	.+948    	; 0x3b7c <LCD_4bit_init+0x3da>
	} else {
		DIO_init();
    37c8:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 ea       	ldi	r26, 0xA0	; 160
    37d2:	b1 e4       	ldi	r27, 0x41	; 65
    37d4:	89 ab       	std	Y+49, r24	; 0x31
    37d6:	9a ab       	std	Y+50, r25	; 0x32
    37d8:	ab ab       	std	Y+51, r26	; 0x33
    37da:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	69 a9       	ldd	r22, Y+49	; 0x31
    37de:	7a a9       	ldd	r23, Y+50	; 0x32
    37e0:	8b a9       	ldd	r24, Y+51	; 0x33
    37e2:	9c a9       	ldd	r25, Y+52	; 0x34
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8d a7       	std	Y+45, r24	; 0x2d
    37f6:	9e a7       	std	Y+46, r25	; 0x2e
    37f8:	af a7       	std	Y+47, r26	; 0x2f
    37fa:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    37fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    37fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    3800:	8f a5       	ldd	r24, Y+47	; 0x2f
    3802:	98 a9       	ldd	r25, Y+48	; 0x30
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <LCD_4bit_init+0x7c>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9c a7       	std	Y+44, r25	; 0x2c
    381a:	8b a7       	std	Y+43, r24	; 0x2b
    381c:	3f c0       	rjmp	.+126    	; 0x389c <LCD_4bit_init+0xfa>
	else if (__tmp > 65535)
    381e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3820:	7e a5       	ldd	r23, Y+46	; 0x2e
    3822:	8f a5       	ldd	r24, Y+47	; 0x2f
    3824:	98 a9       	ldd	r25, Y+48	; 0x30
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <LCD_4bit_init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	69 a9       	ldd	r22, Y+49	; 0x31
    3838:	7a a9       	ldd	r23, Y+50	; 0x32
    383a:	8b a9       	ldd	r24, Y+51	; 0x33
    383c:	9c a9       	ldd	r25, Y+52	; 0x34
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9c a7       	std	Y+44, r25	; 0x2c
    385c:	8b a7       	std	Y+43, r24	; 0x2b
    385e:	0f c0       	rjmp	.+30     	; 0x387e <LCD_4bit_init+0xdc>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9a a7       	std	Y+42, r25	; 0x2a
    3866:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3868:	89 a5       	ldd	r24, Y+41	; 0x29
    386a:	9a a5       	ldd	r25, Y+42	; 0x2a
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCD_4bit_init+0xca>
    3870:	9a a7       	std	Y+42, r25	; 0x2a
    3872:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8b a5       	ldd	r24, Y+43	; 0x2b
    3876:	9c a5       	ldd	r25, Y+44	; 0x2c
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9c a7       	std	Y+44, r25	; 0x2c
    387c:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3880:	9c a5       	ldd	r25, Y+44	; 0x2c
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <LCD_4bit_init+0xbe>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <LCD_4bit_init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6d a5       	ldd	r22, Y+45	; 0x2d
    388a:	7e a5       	ldd	r23, Y+46	; 0x2e
    388c:	8f a5       	ldd	r24, Y+47	; 0x2f
    388e:	98 a9       	ldd	r25, Y+48	; 0x30
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9c a7       	std	Y+44, r25	; 0x2c
    389a:	8b a7       	std	Y+43, r24	; 0x2b
    389c:	8b a5       	ldd	r24, Y+43	; 0x2b
    389e:	9c a5       	ldd	r25, Y+44	; 0x2c
    38a0:	98 a7       	std	Y+40, r25	; 0x28
    38a2:	8f a3       	std	Y+39, r24	; 0x27
    38a4:	8f a1       	ldd	r24, Y+39	; 0x27
    38a6:	98 a5       	ldd	r25, Y+40	; 0x28
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <LCD_4bit_init+0x106>
    38ac:	98 a7       	std	Y+40, r25	; 0x28
    38ae:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(20);
		return_value = LCD_4bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    38b0:	8e a9       	ldd	r24, Y+54	; 0x36
    38b2:	9f a9       	ldd	r25, Y+55	; 0x37
    38b4:	68 e3       	ldi	r22, 0x38	; 56
    38b6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    38ba:	8d ab       	std	Y+53, r24	; 0x35
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	a0 ea       	ldi	r26, 0xA0	; 160
    38c2:	b0 e4       	ldi	r27, 0x40	; 64
    38c4:	8b a3       	std	Y+35, r24	; 0x23
    38c6:	9c a3       	std	Y+36, r25	; 0x24
    38c8:	ad a3       	std	Y+37, r26	; 0x25
    38ca:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38cc:	6b a1       	ldd	r22, Y+35	; 0x23
    38ce:	7c a1       	ldd	r23, Y+36	; 0x24
    38d0:	8d a1       	ldd	r24, Y+37	; 0x25
    38d2:	9e a1       	ldd	r25, Y+38	; 0x26
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	4a ef       	ldi	r20, 0xFA	; 250
    38da:	54 e4       	ldi	r21, 0x44	; 68
    38dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	8f 8f       	std	Y+31, r24	; 0x1f
    38e6:	98 a3       	std	Y+32, r25	; 0x20
    38e8:	a9 a3       	std	Y+33, r26	; 0x21
    38ea:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    38ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38ee:	78 a1       	ldd	r23, Y+32	; 0x20
    38f0:	89 a1       	ldd	r24, Y+33	; 0x21
    38f2:	9a a1       	ldd	r25, Y+34	; 0x22
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e8       	ldi	r20, 0x80	; 128
    38fa:	5f e3       	ldi	r21, 0x3F	; 63
    38fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3900:	88 23       	and	r24, r24
    3902:	2c f4       	brge	.+10     	; 0x390e <LCD_4bit_init+0x16c>
		__ticks = 1;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9e 8f       	std	Y+30, r25	; 0x1e
    390a:	8d 8f       	std	Y+29, r24	; 0x1d
    390c:	3f c0       	rjmp	.+126    	; 0x398c <LCD_4bit_init+0x1ea>
	else if (__tmp > 65535)
    390e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3910:	78 a1       	ldd	r23, Y+32	; 0x20
    3912:	89 a1       	ldd	r24, Y+33	; 0x21
    3914:	9a a1       	ldd	r25, Y+34	; 0x22
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	3f ef       	ldi	r19, 0xFF	; 255
    391a:	4f e7       	ldi	r20, 0x7F	; 127
    391c:	57 e4       	ldi	r21, 0x47	; 71
    391e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3922:	18 16       	cp	r1, r24
    3924:	4c f5       	brge	.+82     	; 0x3978 <LCD_4bit_init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3926:	6b a1       	ldd	r22, Y+35	; 0x23
    3928:	7c a1       	ldd	r23, Y+36	; 0x24
    392a:	8d a1       	ldd	r24, Y+37	; 0x25
    392c:	9e a1       	ldd	r25, Y+38	; 0x26
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e2       	ldi	r20, 0x20	; 32
    3934:	51 e4       	ldi	r21, 0x41	; 65
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	bc 01       	movw	r22, r24
    3940:	cd 01       	movw	r24, r26
    3942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9e 8f       	std	Y+30, r25	; 0x1e
    394c:	8d 8f       	std	Y+29, r24	; 0x1d
    394e:	0f c0       	rjmp	.+30     	; 0x396e <LCD_4bit_init+0x1cc>
    3950:	88 ec       	ldi	r24, 0xC8	; 200
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9c 8f       	std	Y+28, r25	; 0x1c
    3956:	8b 8f       	std	Y+27, r24	; 0x1b
    3958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    395a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <LCD_4bit_init+0x1ba>
    3960:	9c 8f       	std	Y+28, r25	; 0x1c
    3962:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	9e 8f       	std	Y+30, r25	; 0x1e
    396c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    396e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3970:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	69 f7       	brne	.-38     	; 0x3950 <LCD_4bit_init+0x1ae>
    3976:	14 c0       	rjmp	.+40     	; 0x39a0 <LCD_4bit_init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3978:	6f 8d       	ldd	r22, Y+31	; 0x1f
    397a:	78 a1       	ldd	r23, Y+32	; 0x20
    397c:	89 a1       	ldd	r24, Y+33	; 0x21
    397e:	9a a1       	ldd	r25, Y+34	; 0x22
    3980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9e 8f       	std	Y+30, r25	; 0x1e
    398a:	8d 8f       	std	Y+29, r24	; 0x1d
    398c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    398e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3990:	9a 8f       	std	Y+26, r25	; 0x1a
    3992:	89 8f       	std	Y+25, r24	; 0x19
    3994:	89 8d       	ldd	r24, Y+25	; 0x19
    3996:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_4bit_init+0x1f6>
    399c:	9a 8f       	std	Y+26, r25	; 0x1a
    399e:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		return_value = LCD_4bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    39a0:	8e a9       	ldd	r24, Y+54	; 0x36
    39a2:	9f a9       	ldd	r25, Y+55	; 0x37
    39a4:	68 e3       	ldi	r22, 0x38	; 56
    39a6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    39aa:	8d ab       	std	Y+53, r24	; 0x35
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	a6 e1       	ldi	r26, 0x16	; 22
    39b2:	b3 e4       	ldi	r27, 0x43	; 67
    39b4:	8d 8b       	std	Y+21, r24	; 0x15
    39b6:	9e 8b       	std	Y+22, r25	; 0x16
    39b8:	af 8b       	std	Y+23, r26	; 0x17
    39ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39bc:	6d 89       	ldd	r22, Y+21	; 0x15
    39be:	7e 89       	ldd	r23, Y+22	; 0x16
    39c0:	8f 89       	ldd	r24, Y+23	; 0x17
    39c2:	98 8d       	ldd	r25, Y+24	; 0x18
    39c4:	2b ea       	ldi	r18, 0xAB	; 171
    39c6:	3a ea       	ldi	r19, 0xAA	; 170
    39c8:	4a e2       	ldi	r20, 0x2A	; 42
    39ca:	50 e4       	ldi	r21, 0x40	; 64
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	89 8b       	std	Y+17, r24	; 0x11
    39d6:	9a 8b       	std	Y+18, r25	; 0x12
    39d8:	ab 8b       	std	Y+19, r26	; 0x13
    39da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39dc:	69 89       	ldd	r22, Y+17	; 0x11
    39de:	7a 89       	ldd	r23, Y+18	; 0x12
    39e0:	8b 89       	ldd	r24, Y+19	; 0x13
    39e2:	9c 89       	ldd	r25, Y+20	; 0x14
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f0:	88 23       	and	r24, r24
    39f2:	1c f4       	brge	.+6      	; 0x39fa <LCD_4bit_init+0x258>
		__ticks = 1;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	88 8b       	std	Y+16, r24	; 0x10
    39f8:	91 c0       	rjmp	.+290    	; 0x3b1c <LCD_4bit_init+0x37a>
	else if (__tmp > 255)
    39fa:	69 89       	ldd	r22, Y+17	; 0x11
    39fc:	7a 89       	ldd	r23, Y+18	; 0x12
    39fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3a00:	9c 89       	ldd	r25, Y+20	; 0x14
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4f e7       	ldi	r20, 0x7F	; 127
    3a08:	53 e4       	ldi	r21, 0x43	; 67
    3a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0e:	18 16       	cp	r1, r24
    3a10:	0c f0       	brlt	.+2      	; 0x3a14 <LCD_4bit_init+0x272>
    3a12:	7b c0       	rjmp	.+246    	; 0x3b0a <LCD_4bit_init+0x368>
	{
		_delay_ms(__us / 1000.0);
    3a14:	6d 89       	ldd	r22, Y+21	; 0x15
    3a16:	7e 89       	ldd	r23, Y+22	; 0x16
    3a18:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	4a e7       	ldi	r20, 0x7A	; 122
    3a22:	54 e4       	ldi	r21, 0x44	; 68
    3a24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	8c 87       	std	Y+12, r24	; 0x0c
    3a2e:	9d 87       	std	Y+13, r25	; 0x0d
    3a30:	ae 87       	std	Y+14, r26	; 0x0e
    3a32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a34:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a36:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a38:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	4a ef       	ldi	r20, 0xFA	; 250
    3a42:	54 e4       	ldi	r21, 0x44	; 68
    3a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	88 87       	std	Y+8, r24	; 0x08
    3a4e:	99 87       	std	Y+9, r25	; 0x09
    3a50:	aa 87       	std	Y+10, r26	; 0x0a
    3a52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a54:	68 85       	ldd	r22, Y+8	; 0x08
    3a56:	79 85       	ldd	r23, Y+9	; 0x09
    3a58:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e8       	ldi	r20, 0x80	; 128
    3a62:	5f e3       	ldi	r21, 0x3F	; 63
    3a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a68:	88 23       	and	r24, r24
    3a6a:	2c f4       	brge	.+10     	; 0x3a76 <LCD_4bit_init+0x2d4>
		__ticks = 1;
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	9f 83       	std	Y+7, r25	; 0x07
    3a72:	8e 83       	std	Y+6, r24	; 0x06
    3a74:	3f c0       	rjmp	.+126    	; 0x3af4 <LCD_4bit_init+0x352>
	else if (__tmp > 65535)
    3a76:	68 85       	ldd	r22, Y+8	; 0x08
    3a78:	79 85       	ldd	r23, Y+9	; 0x09
    3a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	3f ef       	ldi	r19, 0xFF	; 255
    3a82:	4f e7       	ldi	r20, 0x7F	; 127
    3a84:	57 e4       	ldi	r21, 0x47	; 71
    3a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8a:	18 16       	cp	r1, r24
    3a8c:	4c f5       	brge	.+82     	; 0x3ae0 <LCD_4bit_init+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a90:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a94:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e2       	ldi	r20, 0x20	; 32
    3a9c:	51 e4       	ldi	r21, 0x41	; 65
    3a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	cd 01       	movw	r24, r26
    3aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	9f 83       	std	Y+7, r25	; 0x07
    3ab4:	8e 83       	std	Y+6, r24	; 0x06
    3ab6:	0f c0       	rjmp	.+30     	; 0x3ad6 <LCD_4bit_init+0x334>
    3ab8:	88 ec       	ldi	r24, 0xC8	; 200
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9d 83       	std	Y+5, r25	; 0x05
    3abe:	8c 83       	std	Y+4, r24	; 0x04
    3ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <LCD_4bit_init+0x322>
    3ac8:	9d 83       	std	Y+5, r25	; 0x05
    3aca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3acc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ace:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	9f 83       	std	Y+7, r25	; 0x07
    3ad4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    3ada:	00 97       	sbiw	r24, 0x00	; 0
    3adc:	69 f7       	brne	.-38     	; 0x3ab8 <LCD_4bit_init+0x316>
    3ade:	24 c0       	rjmp	.+72     	; 0x3b28 <LCD_4bit_init+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae0:	68 85       	ldd	r22, Y+8	; 0x08
    3ae2:	79 85       	ldd	r23, Y+9	; 0x09
    3ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	9f 83       	std	Y+7, r25	; 0x07
    3af2:	8e 83       	std	Y+6, r24	; 0x06
    3af4:	8e 81       	ldd	r24, Y+6	; 0x06
    3af6:	9f 81       	ldd	r25, Y+7	; 0x07
    3af8:	9b 83       	std	Y+3, r25	; 0x03
    3afa:	8a 83       	std	Y+2, r24	; 0x02
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	9b 81       	ldd	r25, Y+3	; 0x03
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	f1 f7       	brne	.-4      	; 0x3b00 <LCD_4bit_init+0x35e>
    3b04:	9b 83       	std	Y+3, r25	; 0x03
    3b06:	8a 83       	std	Y+2, r24	; 0x02
    3b08:	0f c0       	rjmp	.+30     	; 0x3b28 <LCD_4bit_init+0x386>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b0a:	69 89       	ldd	r22, Y+17	; 0x11
    3b0c:	7a 89       	ldd	r23, Y+18	; 0x12
    3b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b10:	9c 89       	ldd	r25, Y+20	; 0x14
    3b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	88 8b       	std	Y+16, r24	; 0x10
    3b1c:	88 89       	ldd	r24, Y+16	; 0x10
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	8a 95       	dec	r24
    3b24:	f1 f7       	brne	.-4      	; 0x3b22 <LCD_4bit_init+0x380>
    3b26:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		return_value = LCD_4bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    3b28:	8e a9       	ldd	r24, Y+54	; 0x36
    3b2a:	9f a9       	ldd	r25, Y+55	; 0x37
    3b2c:	68 e3       	ldi	r22, 0x38	; 56
    3b2e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b32:	8d ab       	std	Y+53, r24	; 0x35
		/*************optional************************/
		return_value = LCD_4bit_send_command(LCD, LCD_CLEAR);
    3b34:	8e a9       	ldd	r24, Y+54	; 0x36
    3b36:	9f a9       	ldd	r25, Y+55	; 0x37
    3b38:	61 e0       	ldi	r22, 0x01	; 1
    3b3a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b3e:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_4bit_send_command(LCD, LCD_RETURN_HOME);
    3b40:	8e a9       	ldd	r24, Y+54	; 0x36
    3b42:	9f a9       	ldd	r25, Y+55	; 0x37
    3b44:	62 e0       	ldi	r22, 0x02	; 2
    3b46:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b4a:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_4bit_send_command(LCD, LCD_ENTRY_MODE);
    3b4c:	8e a9       	ldd	r24, Y+54	; 0x36
    3b4e:	9f a9       	ldd	r25, Y+55	; 0x37
    3b50:	66 e0       	ldi	r22, 0x06	; 6
    3b52:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b56:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_4bit_send_command(LCD, LCD_CURSOR_OFF_DISPLAY_ON);
    3b58:	8e a9       	ldd	r24, Y+54	; 0x36
    3b5a:	9f a9       	ldd	r25, Y+55	; 0x37
    3b5c:	6c e0       	ldi	r22, 0x0C	; 12
    3b5e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b62:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_4bit_send_command(LCD, LCD_4BIT_MODE_2LINE);
    3b64:	8e a9       	ldd	r24, Y+54	; 0x36
    3b66:	9f a9       	ldd	r25, Y+55	; 0x37
    3b68:	68 e2       	ldi	r22, 0x28	; 40
    3b6a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b6e:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_4bit_send_command(LCD, LCD_DDRAM_START);
    3b70:	8e a9       	ldd	r24, Y+54	; 0x36
    3b72:	9f a9       	ldd	r25, Y+55	; 0x37
    3b74:	60 e8       	ldi	r22, 0x80	; 128
    3b76:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3b7a:	8d ab       	std	Y+53, r24	; 0x35

	}

	return return_value;
    3b7c:	8d a9       	ldd	r24, Y+53	; 0x35
}
    3b7e:	e7 96       	adiw	r28, 0x37	; 55
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <LCD_4bit_send_command>:

Std_ReturnType LCD_4bit_send_command(const LCD_4bit_t *LCD, u8 command) {
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <LCD_4bit_send_command+0x6>
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <LCD_4bit_send_command+0x8>
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	9b 83       	std	Y+3, r25	; 0x03
    3b9e:	8a 83       	std	Y+2, r24	; 0x02
    3ba0:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_NOK;
    3ba2:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	11 f4       	brne	.+4      	; 0x3bb0 <LCD_4bit_send_command+0x20>
		return_value = E_NOK;
    3bac:	19 82       	std	Y+1, r1	; 0x01
    3bae:	20 c0       	rjmp	.+64     	; 0x3bf0 <LCD_4bit_send_command+0x60>
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_LOW);
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    3bba:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bits(LCD, (command >> 4));
    3bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	22 95       	swap	r18
    3bc2:	2f 70       	andi	r18, 0x0F	; 15
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc8:	62 2f       	mov	r22, r18
    3bca:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <LCD_send_4bits>
    3bce:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bit_enable(LCD);
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd4:	0e 94 cc 24 	call	0x4998	; 0x4998 <LCD_send_4bit_enable>
    3bd8:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bits(LCD, command);
    3bda:	8a 81       	ldd	r24, Y+2	; 0x02
    3bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bde:	6c 81       	ldd	r22, Y+4	; 0x04
    3be0:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <LCD_send_4bits>
    3be4:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bit_enable(LCD);
    3be6:	8a 81       	ldd	r24, Y+2	; 0x02
    3be8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bea:	0e 94 cc 24 	call	0x4998	; 0x4998 <LCD_send_4bit_enable>
    3bee:	89 83       	std	Y+1, r24	; 0x01

	}

	return return_value;
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <LCD_4bit_send_char_data>:
/*************************************************************************************************************/
Std_ReturnType LCD_4bit_send_char_data(const LCD_4bit_t *LCD, u8 data) {
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <LCD_4bit_send_char_data+0x6>
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <LCD_4bit_send_char_data+0x8>
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	9b 83       	std	Y+3, r25	; 0x03
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
    3c10:	6c 83       	std	Y+4, r22	; 0x04

	Std_ReturnType return_value = E_NOK;
    3c12:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	9b 81       	ldd	r25, Y+3	; 0x03
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	11 f4       	brne	.+4      	; 0x3c20 <LCD_4bit_send_char_data+0x20>
		return_value = E_NOK;
    3c1c:	19 82       	std	Y+1, r1	; 0x01
    3c1e:	20 c0       	rjmp	.+64     	; 0x3c60 <LCD_4bit_send_char_data+0x60>
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_HIGH);
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	9b 81       	ldd	r25, Y+3	; 0x03
    3c24:	61 e0       	ldi	r22, 0x01	; 1
    3c26:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    3c2a:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bits(LCD, (data >> 4));
    3c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2e:	28 2f       	mov	r18, r24
    3c30:	22 95       	swap	r18
    3c32:	2f 70       	andi	r18, 0x0F	; 15
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	62 2f       	mov	r22, r18
    3c3a:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <LCD_send_4bits>
    3c3e:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bit_enable(LCD);
    3c40:	8a 81       	ldd	r24, Y+2	; 0x02
    3c42:	9b 81       	ldd	r25, Y+3	; 0x03
    3c44:	0e 94 cc 24 	call	0x4998	; 0x4998 <LCD_send_4bit_enable>
    3c48:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bits(LCD, data);
    3c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4e:	6c 81       	ldd	r22, Y+4	; 0x04
    3c50:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <LCD_send_4bits>
    3c54:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_send_4bit_enable(LCD);
    3c56:	8a 81       	ldd	r24, Y+2	; 0x02
    3c58:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5a:	0e 94 cc 24 	call	0x4998	; 0x4998 <LCD_send_4bit_enable>
    3c5e:	89 83       	std	Y+1, r24	; 0x01

	}

	return return_value;
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	cf 91       	pop	r28
    3c6c:	df 91       	pop	r29
    3c6e:	08 95       	ret

00003c70 <LCD_4bit_send_char_data_pos>:
/******************************************************************************************************************/
Std_ReturnType LCD_4bit_send_char_data_pos(const LCD_4bit_t *LCD, u8 row,
		u8 column, u8 data) {
    3c70:	df 93       	push	r29
    3c72:	cf 93       	push	r28
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <LCD_4bit_send_char_data_pos+0x6>
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <LCD_4bit_send_char_data_pos+0x8>
    3c78:	00 d0       	rcall	.+0      	; 0x3c7a <LCD_4bit_send_char_data_pos+0xa>
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	8a 83       	std	Y+2, r24	; 0x02
    3c82:	6c 83       	std	Y+4, r22	; 0x04
    3c84:	4d 83       	std	Y+5, r20	; 0x05
    3c86:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType return_value = E_NOK;
    3c88:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (row > LCD_ROWS_MAX_NUM)
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8e:	00 97       	sbiw	r24, 0x00	; 0
    3c90:	31 f0       	breq	.+12     	; 0x3c9e <LCD_4bit_send_char_data_pos+0x2e>
    3c92:	8c 81       	ldd	r24, Y+4	; 0x04
    3c94:	85 30       	cpi	r24, 0x05	; 5
    3c96:	18 f4       	brcc	.+6      	; 0x3c9e <LCD_4bit_send_char_data_pos+0x2e>
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	85 31       	cpi	r24, 0x15	; 21
    3c9c:	10 f0       	brcs	.+4      	; 0x3ca2 <LCD_4bit_send_char_data_pos+0x32>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    3c9e:	19 82       	std	Y+1, r1	; 0x01
    3ca0:	0d c0       	rjmp	.+26     	; 0x3cbc <LCD_4bit_send_char_data_pos+0x4c>
	} else {
		return_value = LCD_4bit_set_cursor(LCD, row, column);
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca6:	6c 81       	ldd	r22, Y+4	; 0x04
    3ca8:	4d 81       	ldd	r20, Y+5	; 0x05
    3caa:	0e 94 0a 24 	call	0x4814	; 0x4814 <LCD_4bit_set_cursor>
    3cae:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_4bit_send_char_data(LCD, data);
    3cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb4:	6e 81       	ldd	r22, Y+6	; 0x06
    3cb6:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LCD_4bit_send_char_data>
    3cba:	89 83       	std	Y+1, r24	; 0x01
	}
	return return_value;
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cbe:	26 96       	adiw	r28, 0x06	; 6
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	cf 91       	pop	r28
    3ccc:	df 91       	pop	r29
    3cce:	08 95       	ret

00003cd0 <LCD_4bit_send_string>:

Std_ReturnType LCD_4bit_send_string(const LCD_4bit_t *LCD, u8 *str) {
    3cd0:	df 93       	push	r29
    3cd2:	cf 93       	push	r28
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <LCD_4bit_send_string+0x6>
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <LCD_4bit_send_string+0x8>
    3cd8:	0f 92       	push	r0
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9b 83       	std	Y+3, r25	; 0x03
    3ce0:	8a 83       	std	Y+2, r24	; 0x02
    3ce2:	7d 83       	std	Y+5, r23	; 0x05
    3ce4:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_NOK;
    3ce6:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (NULL == str)) {
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	21 f0       	breq	.+8      	; 0x3cf8 <LCD_4bit_send_string+0x28>
    3cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	81 f4       	brne	.+32     	; 0x3d18 <LCD_4bit_send_string+0x48>
		return_value = E_NOK;
    3cf8:	19 82       	std	Y+1, r1	; 0x01
    3cfa:	13 c0       	rjmp	.+38     	; 0x3d22 <LCD_4bit_send_string+0x52>
	} else {
		while (*str != '\0') {
			return_value = LCD_4bit_send_char_data(LCD, *str++);
    3cfc:	ec 81       	ldd	r30, Y+4	; 0x04
    3cfe:	fd 81       	ldd	r31, Y+5	; 0x05
    3d00:	20 81       	ld	r18, Z
    3d02:	8c 81       	ldd	r24, Y+4	; 0x04
    3d04:	9d 81       	ldd	r25, Y+5	; 0x05
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	9d 83       	std	Y+5, r25	; 0x05
    3d0a:	8c 83       	std	Y+4, r24	; 0x04
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d10:	62 2f       	mov	r22, r18
    3d12:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LCD_4bit_send_char_data>
    3d16:	89 83       	std	Y+1, r24	; 0x01
Std_ReturnType LCD_4bit_send_string(const LCD_4bit_t *LCD, u8 *str) {
	Std_ReturnType return_value = E_NOK;
	if ((NULL == LCD) || (NULL == str)) {
		return_value = E_NOK;
	} else {
		while (*str != '\0') {
    3d18:	ec 81       	ldd	r30, Y+4	; 0x04
    3d1a:	fd 81       	ldd	r31, Y+5	; 0x05
    3d1c:	80 81       	ld	r24, Z
    3d1e:	88 23       	and	r24, r24
    3d20:	69 f7       	brne	.-38     	; 0x3cfc <LCD_4bit_send_string+0x2c>
			return_value = LCD_4bit_send_char_data(LCD, *str++);
		}
	}
	return return_value;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <LCD_4bit_send_string_pos>:

Std_ReturnType LCD_4bit_send_string_pos(const LCD_4bit_t *LCD, u8 row,
		u8 column, u8 *str) {
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	27 97       	sbiw	r28, 0x07	; 7
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	9b 83       	std	Y+3, r25	; 0x03
    3d4a:	8a 83       	std	Y+2, r24	; 0x02
    3d4c:	6c 83       	std	Y+4, r22	; 0x04
    3d4e:	4d 83       	std	Y+5, r20	; 0x05
    3d50:	3f 83       	std	Y+7, r19	; 0x07
    3d52:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType return_value = E_NOK;
    3d54:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (NULL == str) || (row > LCD_ROWS_MAX_NUM)
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	51 f0       	breq	.+20     	; 0x3d72 <LCD_4bit_send_string_pos+0x3e>
    3d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d60:	9f 81       	ldd	r25, Y+7	; 0x07
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	31 f0       	breq	.+12     	; 0x3d72 <LCD_4bit_send_string_pos+0x3e>
    3d66:	8c 81       	ldd	r24, Y+4	; 0x04
    3d68:	85 30       	cpi	r24, 0x05	; 5
    3d6a:	18 f4       	brcc	.+6      	; 0x3d72 <LCD_4bit_send_string_pos+0x3e>
    3d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6e:	85 31       	cpi	r24, 0x15	; 21
    3d70:	10 f0       	brcs	.+4      	; 0x3d76 <LCD_4bit_send_string_pos+0x42>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    3d72:	19 82       	std	Y+1, r1	; 0x01
    3d74:	1a c0       	rjmp	.+52     	; 0x3daa <LCD_4bit_send_string_pos+0x76>
	} else {
		LCD_4bit_set_cursor(LCD, row, column);
    3d76:	8a 81       	ldd	r24, Y+2	; 0x02
    3d78:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7a:	6c 81       	ldd	r22, Y+4	; 0x04
    3d7c:	4d 81       	ldd	r20, Y+5	; 0x05
    3d7e:	0e 94 0a 24 	call	0x4814	; 0x4814 <LCD_4bit_set_cursor>
    3d82:	0e c0       	rjmp	.+28     	; 0x3da0 <LCD_4bit_send_string_pos+0x6c>
		while (*str != '\0') {
			return_value = LCD_4bit_send_char_data(LCD, *str++);
    3d84:	ee 81       	ldd	r30, Y+6	; 0x06
    3d86:	ff 81       	ldd	r31, Y+7	; 0x07
    3d88:	20 81       	ld	r18, Z
    3d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d8e:	01 96       	adiw	r24, 0x01	; 1
    3d90:	9f 83       	std	Y+7, r25	; 0x07
    3d92:	8e 83       	std	Y+6, r24	; 0x06
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	9b 81       	ldd	r25, Y+3	; 0x03
    3d98:	62 2f       	mov	r22, r18
    3d9a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LCD_4bit_send_char_data>
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	if ((NULL == LCD) || (NULL == str) || (row > LCD_ROWS_MAX_NUM)
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
	} else {
		LCD_4bit_set_cursor(LCD, row, column);
		while (*str != '\0') {
    3da0:	ee 81       	ldd	r30, Y+6	; 0x06
    3da2:	ff 81       	ldd	r31, Y+7	; 0x07
    3da4:	80 81       	ld	r24, Z
    3da6:	88 23       	and	r24, r24
    3da8:	69 f7       	brne	.-38     	; 0x3d84 <LCD_4bit_send_string_pos+0x50>

		}

	}

	return return_value;
    3daa:	89 81       	ldd	r24, Y+1	; 0x01

}
    3dac:	27 96       	adiw	r28, 0x07	; 7
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	08 95       	ret

00003dbe <LCD_4bit_send_number>:

Std_ReturnType LCD_4bit_send_number(const LCD_4bit_t *LCD, u32 number) {
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	62 97       	sbiw	r28, 0x12	; 18
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	9e 87       	std	Y+14, r25	; 0x0e
    3dd4:	8d 87       	std	Y+13, r24	; 0x0d
    3dd6:	4f 87       	std	Y+15, r20	; 0x0f
    3dd8:	58 8b       	std	Y+16, r21	; 0x10
    3dda:	69 8b       	std	Y+17, r22	; 0x11
    3ddc:	7a 8b       	std	Y+18, r23	; 0x12

	u8 str[11];
	Std_ReturnType return_value = E_NOK;
    3dde:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    3de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	11 f4       	brne	.+4      	; 0x3dec <LCD_4bit_send_number+0x2e>
		return_value = E_NOK;
    3de8:	19 82       	std	Y+1, r1	; 0x01
    3dea:	14 c0       	rjmp	.+40     	; 0x3e14 <LCD_4bit_send_number+0x56>
	} else {
		convert_int_to_string(number, str);
    3dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dee:	98 89       	ldd	r25, Y+16	; 0x10
    3df0:	a9 89       	ldd	r26, Y+17	; 0x11
    3df2:	ba 89       	ldd	r27, Y+18	; 0x12
    3df4:	9e 01       	movw	r18, r28
    3df6:	2e 5f       	subi	r18, 0xFE	; 254
    3df8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfa:	bc 01       	movw	r22, r24
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	a9 01       	movw	r20, r18
    3e00:	0e 94 bb 23 	call	0x4776	; 0x4776 <convert_int_to_string>
		LCD_4bit_send_string(LCD, str);
    3e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e08:	9e 01       	movw	r18, r28
    3e0a:	2e 5f       	subi	r18, 0xFE	; 254
    3e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0e:	b9 01       	movw	r22, r18
    3e10:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <LCD_4bit_send_string>
	}
	return return_value;
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e16:	62 96       	adiw	r28, 0x12	; 18
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <LCD_4bit_send_number_pos>:
/*********************************************************************************************************************/
Std_ReturnType LCD_4bit_send_number_pos(const LCD_4bit_t *LCD, u8 row,
		u8 column, u32 number) {
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    3e2c:	df 93       	push	r29
    3e2e:	cf 93       	push	r28
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	64 97       	sbiw	r28, 0x14	; 20
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	9e 87       	std	Y+14, r25	; 0x0e
    3e42:	8d 87       	std	Y+13, r24	; 0x0d
    3e44:	6f 87       	std	Y+15, r22	; 0x0f
    3e46:	48 8b       	std	Y+16, r20	; 0x10
    3e48:	09 8b       	std	Y+17, r16	; 0x11
    3e4a:	1a 8b       	std	Y+18, r17	; 0x12
    3e4c:	2b 8b       	std	Y+19, r18	; 0x13
    3e4e:	3c 8b       	std	Y+20, r19	; 0x14
	u8 str[11];
	Std_ReturnType return_value = E_NOK;
    3e50:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    3e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	11 f4       	brne	.+4      	; 0x3e5e <LCD_4bit_send_number_pos+0x36>
		return_value = E_NOK;
    3e5a:	19 82       	std	Y+1, r1	; 0x01
    3e5c:	1a c0       	rjmp	.+52     	; 0x3e92 <LCD_4bit_send_number_pos+0x6a>
	} else {
		LCD_4bit_set_cursor(LCD, row, column);
    3e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e62:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e64:	48 89       	ldd	r20, Y+16	; 0x10
    3e66:	0e 94 0a 24 	call	0x4814	; 0x4814 <LCD_4bit_set_cursor>
		convert_int_to_string(number, str);
    3e6a:	89 89       	ldd	r24, Y+17	; 0x11
    3e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e6e:	ab 89       	ldd	r26, Y+19	; 0x13
    3e70:	bc 89       	ldd	r27, Y+20	; 0x14
    3e72:	9e 01       	movw	r18, r28
    3e74:	2e 5f       	subi	r18, 0xFE	; 254
    3e76:	3f 4f       	sbci	r19, 0xFF	; 255
    3e78:	bc 01       	movw	r22, r24
    3e7a:	cd 01       	movw	r24, r26
    3e7c:	a9 01       	movw	r20, r18
    3e7e:	0e 94 bb 23 	call	0x4776	; 0x4776 <convert_int_to_string>
		LCD_4bit_send_string(LCD, str);
    3e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e86:	9e 01       	movw	r18, r28
    3e88:	2e 5f       	subi	r18, 0xFE	; 254
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	b9 01       	movw	r22, r18
    3e8e:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <LCD_4bit_send_string>
	}
	return return_value;
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e94:	64 96       	adiw	r28, 0x14	; 20
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

00003eaa <LCD_4bit_send_custom_char>:
/*******************************************************************************************************************/
Std_ReturnType LCD_4bit_send_custom_char(const LCD_4bit_t *LCD, u8 row,u8 column, const u8 cus_char[], u8 mem_pos) {
    3eaa:	0f 93       	push	r16
    3eac:	df 93       	push	r29
    3eae:	cf 93       	push	r28
    3eb0:	cd b7       	in	r28, 0x3d	; 61
    3eb2:	de b7       	in	r29, 0x3e	; 62
    3eb4:	29 97       	sbiw	r28, 0x09	; 9
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	9c 83       	std	Y+4, r25	; 0x04
    3ec2:	8b 83       	std	Y+3, r24	; 0x03
    3ec4:	6d 83       	std	Y+5, r22	; 0x05
    3ec6:	4e 83       	std	Y+6, r20	; 0x06
    3ec8:	38 87       	std	Y+8, r19	; 0x08
    3eca:	2f 83       	std	Y+7, r18	; 0x07
    3ecc:	09 87       	std	Y+9, r16	; 0x09
	u8 l_counter = 0;
    3ece:	1a 82       	std	Y+2, r1	; 0x02
		Std_ReturnType return_value = E_NOK;
    3ed0:	19 82       	std	Y+1, r1	; 0x01
		if ((NULL == LCD)|| (row > LCD_ROWS_MAX_NUM)|| (column > LCD_COLUMNS_MAX_NUM)||(NULL ==cus_char )|| (mem_pos >7)) {
    3ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	69 f0       	breq	.+26     	; 0x3ef4 <LCD_4bit_send_custom_char+0x4a>
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	85 30       	cpi	r24, 0x05	; 5
    3ede:	50 f4       	brcc	.+20     	; 0x3ef4 <LCD_4bit_send_custom_char+0x4a>
    3ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee2:	85 31       	cpi	r24, 0x15	; 21
    3ee4:	38 f4       	brcc	.+14     	; 0x3ef4 <LCD_4bit_send_custom_char+0x4a>
    3ee6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee8:	98 85       	ldd	r25, Y+8	; 0x08
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	19 f0       	breq	.+6      	; 0x3ef4 <LCD_4bit_send_custom_char+0x4a>
    3eee:	89 85       	ldd	r24, Y+9	; 0x09
    3ef0:	88 30       	cpi	r24, 0x08	; 8
    3ef2:	10 f0       	brcs	.+4      	; 0x3ef8 <LCD_4bit_send_custom_char+0x4e>
			return_value = E_NOK;
    3ef4:	19 82       	std	Y+1, r1	; 0x01
    3ef6:	30 c0       	rjmp	.+96     	; 0x3f58 <LCD_4bit_send_custom_char+0xae>
		} else {
			return_value = LCD_4bit_send_command(LCD,(LCD_CGRAM_START+(mem_pos*8)));
    3ef8:	89 85       	ldd	r24, Y+9	; 0x09
    3efa:	88 2f       	mov	r24, r24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	08 96       	adiw	r24, 0x08	; 8
    3f00:	88 0f       	add	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	28 2f       	mov	r18, r24
    3f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f10:	9c 81       	ldd	r25, Y+4	; 0x04
    3f12:	62 2f       	mov	r22, r18
    3f14:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    3f18:	89 83       	std	Y+1, r24	; 0x01
			for (l_counter=0;l_counter<8;l_counter++){
    3f1a:	1a 82       	std	Y+2, r1	; 0x02
    3f1c:	12 c0       	rjmp	.+36     	; 0x3f42 <LCD_4bit_send_custom_char+0x98>
			return_value = LCD_4bit_send_char_data(LCD,cus_char[l_counter]);
    3f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f20:	28 2f       	mov	r18, r24
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	8f 81       	ldd	r24, Y+7	; 0x07
    3f26:	98 85       	ldd	r25, Y+8	; 0x08
    3f28:	fc 01       	movw	r30, r24
    3f2a:	e2 0f       	add	r30, r18
    3f2c:	f3 1f       	adc	r31, r19
    3f2e:	20 81       	ld	r18, Z
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	9c 81       	ldd	r25, Y+4	; 0x04
    3f34:	62 2f       	mov	r22, r18
    3f36:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LCD_4bit_send_char_data>
    3f3a:	89 83       	std	Y+1, r24	; 0x01
		Std_ReturnType return_value = E_NOK;
		if ((NULL == LCD)|| (row > LCD_ROWS_MAX_NUM)|| (column > LCD_COLUMNS_MAX_NUM)||(NULL ==cus_char )|| (mem_pos >7)) {
			return_value = E_NOK;
		} else {
			return_value = LCD_4bit_send_command(LCD,(LCD_CGRAM_START+(mem_pos*8)));
			for (l_counter=0;l_counter<8;l_counter++){
    3f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3e:	8f 5f       	subi	r24, 0xFF	; 255
    3f40:	8a 83       	std	Y+2, r24	; 0x02
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	88 30       	cpi	r24, 0x08	; 8
    3f46:	58 f3       	brcs	.-42     	; 0x3f1e <LCD_4bit_send_custom_char+0x74>
			return_value = LCD_4bit_send_char_data(LCD,cus_char[l_counter]);
			}
			return_value = LCD_4bit_send_char_data_pos(LCD,row,column, mem_pos);
    3f48:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4c:	6d 81       	ldd	r22, Y+5	; 0x05
    3f4e:	4e 81       	ldd	r20, Y+6	; 0x06
    3f50:	29 85       	ldd	r18, Y+9	; 0x09
    3f52:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <LCD_4bit_send_char_data_pos>
    3f56:	89 83       	std	Y+1, r24	; 0x01

		}

		return return_value;
    3f58:	89 81       	ldd	r24, Y+1	; 0x01

	}
    3f5a:	29 96       	adiw	r28, 0x09	; 9
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	0f 91       	pop	r16
    3f6c:	08 95       	ret

00003f6e <LCD_8bit_init>:


/************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************/
//#elif LCD_BIT_MODE == LCD_8BIT_MODE
Std_ReturnType LCD_8bit_init(const LCD_8bit_t *LCD) {
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	e7 97       	sbiw	r28, 0x37	; 55
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	9f ab       	std	Y+55, r25	; 0x37
    3f84:	8e ab       	std	Y+54, r24	; 0x36
	Std_ReturnType return_value = E_NOK;
    3f86:	1d aa       	std	Y+53, r1	; 0x35
	if (NULL == LCD) {
    3f88:	8e a9       	ldd	r24, Y+54	; 0x36
    3f8a:	9f a9       	ldd	r25, Y+55	; 0x37
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	11 f4       	brne	.+4      	; 0x3f94 <LCD_8bit_init+0x26>
		return_value = E_NOK;
    3f90:	1d aa       	std	Y+53, r1	; 0x35
    3f92:	db c1       	rjmp	.+950    	; 0x434a <LCD_8bit_init+0x3dc>
	} else {
		return_value = DIO_init();
    3f94:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
    3f98:	8d ab       	std	Y+53, r24	; 0x35
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	a0 ea       	ldi	r26, 0xA0	; 160
    3fa0:	b1 e4       	ldi	r27, 0x41	; 65
    3fa2:	89 ab       	std	Y+49, r24	; 0x31
    3fa4:	9a ab       	std	Y+50, r25	; 0x32
    3fa6:	ab ab       	std	Y+51, r26	; 0x33
    3fa8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3faa:	69 a9       	ldd	r22, Y+49	; 0x31
    3fac:	7a a9       	ldd	r23, Y+50	; 0x32
    3fae:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	4a ef       	ldi	r20, 0xFA	; 250
    3fb8:	54 e4       	ldi	r21, 0x44	; 68
    3fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	8d a7       	std	Y+45, r24	; 0x2d
    3fc4:	9e a7       	std	Y+46, r25	; 0x2e
    3fc6:	af a7       	std	Y+47, r26	; 0x2f
    3fc8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3fca:	6d a5       	ldd	r22, Y+45	; 0x2d
    3fcc:	7e a5       	ldd	r23, Y+46	; 0x2e
    3fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e8       	ldi	r20, 0x80	; 128
    3fd8:	5f e3       	ldi	r21, 0x3F	; 63
    3fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fde:	88 23       	and	r24, r24
    3fe0:	2c f4       	brge	.+10     	; 0x3fec <LCD_8bit_init+0x7e>
		__ticks = 1;
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	9c a7       	std	Y+44, r25	; 0x2c
    3fe8:	8b a7       	std	Y+43, r24	; 0x2b
    3fea:	3f c0       	rjmp	.+126    	; 0x406a <LCD_8bit_init+0xfc>
	else if (__tmp > 65535)
    3fec:	6d a5       	ldd	r22, Y+45	; 0x2d
    3fee:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	4f e7       	ldi	r20, 0x7F	; 127
    3ffa:	57 e4       	ldi	r21, 0x47	; 71
    3ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4000:	18 16       	cp	r1, r24
    4002:	4c f5       	brge	.+82     	; 0x4056 <LCD_8bit_init+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	69 a9       	ldd	r22, Y+49	; 0x31
    4006:	7a a9       	ldd	r23, Y+50	; 0x32
    4008:	8b a9       	ldd	r24, Y+51	; 0x33
    400a:	9c a9       	ldd	r25, Y+52	; 0x34
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	40 e2       	ldi	r20, 0x20	; 32
    4012:	51 e4       	ldi	r21, 0x41	; 65
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	bc 01       	movw	r22, r24
    401e:	cd 01       	movw	r24, r26
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	9c a7       	std	Y+44, r25	; 0x2c
    402a:	8b a7       	std	Y+43, r24	; 0x2b
    402c:	0f c0       	rjmp	.+30     	; 0x404c <LCD_8bit_init+0xde>
    402e:	88 ec       	ldi	r24, 0xC8	; 200
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	9a a7       	std	Y+42, r25	; 0x2a
    4034:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4036:	89 a5       	ldd	r24, Y+41	; 0x29
    4038:	9a a5       	ldd	r25, Y+42	; 0x2a
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	f1 f7       	brne	.-4      	; 0x403a <LCD_8bit_init+0xcc>
    403e:	9a a7       	std	Y+42, r25	; 0x2a
    4040:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4042:	8b a5       	ldd	r24, Y+43	; 0x2b
    4044:	9c a5       	ldd	r25, Y+44	; 0x2c
    4046:	01 97       	sbiw	r24, 0x01	; 1
    4048:	9c a7       	std	Y+44, r25	; 0x2c
    404a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404c:	8b a5       	ldd	r24, Y+43	; 0x2b
    404e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4050:	00 97       	sbiw	r24, 0x00	; 0
    4052:	69 f7       	brne	.-38     	; 0x402e <LCD_8bit_init+0xc0>
    4054:	14 c0       	rjmp	.+40     	; 0x407e <LCD_8bit_init+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4056:	6d a5       	ldd	r22, Y+45	; 0x2d
    4058:	7e a5       	ldd	r23, Y+46	; 0x2e
    405a:	8f a5       	ldd	r24, Y+47	; 0x2f
    405c:	98 a9       	ldd	r25, Y+48	; 0x30
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	9c a7       	std	Y+44, r25	; 0x2c
    4068:	8b a7       	std	Y+43, r24	; 0x2b
    406a:	8b a5       	ldd	r24, Y+43	; 0x2b
    406c:	9c a5       	ldd	r25, Y+44	; 0x2c
    406e:	98 a7       	std	Y+40, r25	; 0x28
    4070:	8f a3       	std	Y+39, r24	; 0x27
    4072:	8f a1       	ldd	r24, Y+39	; 0x27
    4074:	98 a5       	ldd	r25, Y+40	; 0x28
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	f1 f7       	brne	.-4      	; 0x4076 <LCD_8bit_init+0x108>
    407a:	98 a7       	std	Y+40, r25	; 0x28
    407c:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(20);
		return_value = LCD_8bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    407e:	8e a9       	ldd	r24, Y+54	; 0x36
    4080:	9f a9       	ldd	r25, Y+55	; 0x37
    4082:	68 e3       	ldi	r22, 0x38	; 56
    4084:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4088:	8d ab       	std	Y+53, r24	; 0x35
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	a0 ea       	ldi	r26, 0xA0	; 160
    4090:	b0 e4       	ldi	r27, 0x40	; 64
    4092:	8b a3       	std	Y+35, r24	; 0x23
    4094:	9c a3       	std	Y+36, r25	; 0x24
    4096:	ad a3       	std	Y+37, r26	; 0x25
    4098:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    409a:	6b a1       	ldd	r22, Y+35	; 0x23
    409c:	7c a1       	ldd	r23, Y+36	; 0x24
    409e:	8d a1       	ldd	r24, Y+37	; 0x25
    40a0:	9e a1       	ldd	r25, Y+38	; 0x26
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	4a ef       	ldi	r20, 0xFA	; 250
    40a8:	54 e4       	ldi	r21, 0x44	; 68
    40aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	8f 8f       	std	Y+31, r24	; 0x1f
    40b4:	98 a3       	std	Y+32, r25	; 0x20
    40b6:	a9 a3       	std	Y+33, r26	; 0x21
    40b8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    40ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    40bc:	78 a1       	ldd	r23, Y+32	; 0x20
    40be:	89 a1       	ldd	r24, Y+33	; 0x21
    40c0:	9a a1       	ldd	r25, Y+34	; 0x22
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e8       	ldi	r20, 0x80	; 128
    40c8:	5f e3       	ldi	r21, 0x3F	; 63
    40ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ce:	88 23       	and	r24, r24
    40d0:	2c f4       	brge	.+10     	; 0x40dc <LCD_8bit_init+0x16e>
		__ticks = 1;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	9e 8f       	std	Y+30, r25	; 0x1e
    40d8:	8d 8f       	std	Y+29, r24	; 0x1d
    40da:	3f c0       	rjmp	.+126    	; 0x415a <LCD_8bit_init+0x1ec>
	else if (__tmp > 65535)
    40dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    40de:	78 a1       	ldd	r23, Y+32	; 0x20
    40e0:	89 a1       	ldd	r24, Y+33	; 0x21
    40e2:	9a a1       	ldd	r25, Y+34	; 0x22
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	3f ef       	ldi	r19, 0xFF	; 255
    40e8:	4f e7       	ldi	r20, 0x7F	; 127
    40ea:	57 e4       	ldi	r21, 0x47	; 71
    40ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40f0:	18 16       	cp	r1, r24
    40f2:	4c f5       	brge	.+82     	; 0x4146 <LCD_8bit_init+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f4:	6b a1       	ldd	r22, Y+35	; 0x23
    40f6:	7c a1       	ldd	r23, Y+36	; 0x24
    40f8:	8d a1       	ldd	r24, Y+37	; 0x25
    40fa:	9e a1       	ldd	r25, Y+38	; 0x26
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 e2       	ldi	r20, 0x20	; 32
    4102:	51 e4       	ldi	r21, 0x41	; 65
    4104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	bc 01       	movw	r22, r24
    410e:	cd 01       	movw	r24, r26
    4110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	9e 8f       	std	Y+30, r25	; 0x1e
    411a:	8d 8f       	std	Y+29, r24	; 0x1d
    411c:	0f c0       	rjmp	.+30     	; 0x413c <LCD_8bit_init+0x1ce>
    411e:	88 ec       	ldi	r24, 0xC8	; 200
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	9c 8f       	std	Y+28, r25	; 0x1c
    4124:	8b 8f       	std	Y+27, r24	; 0x1b
    4126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <LCD_8bit_init+0x1bc>
    412e:	9c 8f       	std	Y+28, r25	; 0x1c
    4130:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4134:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	9e 8f       	std	Y+30, r25	; 0x1e
    413a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    413e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	69 f7       	brne	.-38     	; 0x411e <LCD_8bit_init+0x1b0>
    4144:	14 c0       	rjmp	.+40     	; 0x416e <LCD_8bit_init+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4146:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4148:	78 a1       	ldd	r23, Y+32	; 0x20
    414a:	89 a1       	ldd	r24, Y+33	; 0x21
    414c:	9a a1       	ldd	r25, Y+34	; 0x22
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	9e 8f       	std	Y+30, r25	; 0x1e
    4158:	8d 8f       	std	Y+29, r24	; 0x1d
    415a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    415c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    415e:	9a 8f       	std	Y+26, r25	; 0x1a
    4160:	89 8f       	std	Y+25, r24	; 0x19
    4162:	89 8d       	ldd	r24, Y+25	; 0x19
    4164:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	f1 f7       	brne	.-4      	; 0x4166 <LCD_8bit_init+0x1f8>
    416a:	9a 8f       	std	Y+26, r25	; 0x1a
    416c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(5);
		return_value = LCD_8bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    416e:	8e a9       	ldd	r24, Y+54	; 0x36
    4170:	9f a9       	ldd	r25, Y+55	; 0x37
    4172:	68 e3       	ldi	r22, 0x38	; 56
    4174:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4178:	8d ab       	std	Y+53, r24	; 0x35
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	a6 e1       	ldi	r26, 0x16	; 22
    4180:	b3 e4       	ldi	r27, 0x43	; 67
    4182:	8d 8b       	std	Y+21, r24	; 0x15
    4184:	9e 8b       	std	Y+22, r25	; 0x16
    4186:	af 8b       	std	Y+23, r26	; 0x17
    4188:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    418a:	6d 89       	ldd	r22, Y+21	; 0x15
    418c:	7e 89       	ldd	r23, Y+22	; 0x16
    418e:	8f 89       	ldd	r24, Y+23	; 0x17
    4190:	98 8d       	ldd	r25, Y+24	; 0x18
    4192:	2b ea       	ldi	r18, 0xAB	; 171
    4194:	3a ea       	ldi	r19, 0xAA	; 170
    4196:	4a e2       	ldi	r20, 0x2A	; 42
    4198:	50 e4       	ldi	r21, 0x40	; 64
    419a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	89 8b       	std	Y+17, r24	; 0x11
    41a4:	9a 8b       	std	Y+18, r25	; 0x12
    41a6:	ab 8b       	std	Y+19, r26	; 0x13
    41a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    41aa:	69 89       	ldd	r22, Y+17	; 0x11
    41ac:	7a 89       	ldd	r23, Y+18	; 0x12
    41ae:	8b 89       	ldd	r24, Y+19	; 0x13
    41b0:	9c 89       	ldd	r25, Y+20	; 0x14
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e8       	ldi	r20, 0x80	; 128
    41b8:	5f e3       	ldi	r21, 0x3F	; 63
    41ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41be:	88 23       	and	r24, r24
    41c0:	1c f4       	brge	.+6      	; 0x41c8 <LCD_8bit_init+0x25a>
		__ticks = 1;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	88 8b       	std	Y+16, r24	; 0x10
    41c6:	91 c0       	rjmp	.+290    	; 0x42ea <LCD_8bit_init+0x37c>
	else if (__tmp > 255)
    41c8:	69 89       	ldd	r22, Y+17	; 0x11
    41ca:	7a 89       	ldd	r23, Y+18	; 0x12
    41cc:	8b 89       	ldd	r24, Y+19	; 0x13
    41ce:	9c 89       	ldd	r25, Y+20	; 0x14
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	4f e7       	ldi	r20, 0x7F	; 127
    41d6:	53 e4       	ldi	r21, 0x43	; 67
    41d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41dc:	18 16       	cp	r1, r24
    41de:	0c f0       	brlt	.+2      	; 0x41e2 <LCD_8bit_init+0x274>
    41e0:	7b c0       	rjmp	.+246    	; 0x42d8 <LCD_8bit_init+0x36a>
	{
		_delay_ms(__us / 1000.0);
    41e2:	6d 89       	ldd	r22, Y+21	; 0x15
    41e4:	7e 89       	ldd	r23, Y+22	; 0x16
    41e6:	8f 89       	ldd	r24, Y+23	; 0x17
    41e8:	98 8d       	ldd	r25, Y+24	; 0x18
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	4a e7       	ldi	r20, 0x7A	; 122
    41f0:	54 e4       	ldi	r21, 0x44	; 68
    41f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	8c 87       	std	Y+12, r24	; 0x0c
    41fc:	9d 87       	std	Y+13, r25	; 0x0d
    41fe:	ae 87       	std	Y+14, r26	; 0x0e
    4200:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4202:	6c 85       	ldd	r22, Y+12	; 0x0c
    4204:	7d 85       	ldd	r23, Y+13	; 0x0d
    4206:	8e 85       	ldd	r24, Y+14	; 0x0e
    4208:	9f 85       	ldd	r25, Y+15	; 0x0f
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4a ef       	ldi	r20, 0xFA	; 250
    4210:	54 e4       	ldi	r21, 0x44	; 68
    4212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	88 87       	std	Y+8, r24	; 0x08
    421c:	99 87       	std	Y+9, r25	; 0x09
    421e:	aa 87       	std	Y+10, r26	; 0x0a
    4220:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4222:	68 85       	ldd	r22, Y+8	; 0x08
    4224:	79 85       	ldd	r23, Y+9	; 0x09
    4226:	8a 85       	ldd	r24, Y+10	; 0x0a
    4228:	9b 85       	ldd	r25, Y+11	; 0x0b
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e8       	ldi	r20, 0x80	; 128
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4236:	88 23       	and	r24, r24
    4238:	2c f4       	brge	.+10     	; 0x4244 <LCD_8bit_init+0x2d6>
		__ticks = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	9f 83       	std	Y+7, r25	; 0x07
    4240:	8e 83       	std	Y+6, r24	; 0x06
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <LCD_8bit_init+0x354>
	else if (__tmp > 65535)
    4244:	68 85       	ldd	r22, Y+8	; 0x08
    4246:	79 85       	ldd	r23, Y+9	; 0x09
    4248:	8a 85       	ldd	r24, Y+10	; 0x0a
    424a:	9b 85       	ldd	r25, Y+11	; 0x0b
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	3f ef       	ldi	r19, 0xFF	; 255
    4250:	4f e7       	ldi	r20, 0x7F	; 127
    4252:	57 e4       	ldi	r21, 0x47	; 71
    4254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4258:	18 16       	cp	r1, r24
    425a:	4c f5       	brge	.+82     	; 0x42ae <LCD_8bit_init+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425c:	6c 85       	ldd	r22, Y+12	; 0x0c
    425e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4260:	8e 85       	ldd	r24, Y+14	; 0x0e
    4262:	9f 85       	ldd	r25, Y+15	; 0x0f
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e2       	ldi	r20, 0x20	; 32
    426a:	51 e4       	ldi	r21, 0x41	; 65
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	9f 83       	std	Y+7, r25	; 0x07
    4282:	8e 83       	std	Y+6, r24	; 0x06
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <LCD_8bit_init+0x336>
    4286:	88 ec       	ldi	r24, 0xC8	; 200
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	9d 83       	std	Y+5, r25	; 0x05
    428c:	8c 83       	std	Y+4, r24	; 0x04
    428e:	8c 81       	ldd	r24, Y+4	; 0x04
    4290:	9d 81       	ldd	r25, Y+5	; 0x05
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <LCD_8bit_init+0x324>
    4296:	9d 83       	std	Y+5, r25	; 0x05
    4298:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429a:	8e 81       	ldd	r24, Y+6	; 0x06
    429c:	9f 81       	ldd	r25, Y+7	; 0x07
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	9f 83       	std	Y+7, r25	; 0x07
    42a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a4:	8e 81       	ldd	r24, Y+6	; 0x06
    42a6:	9f 81       	ldd	r25, Y+7	; 0x07
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	69 f7       	brne	.-38     	; 0x4286 <LCD_8bit_init+0x318>
    42ac:	24 c0       	rjmp	.+72     	; 0x42f6 <LCD_8bit_init+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ae:	68 85       	ldd	r22, Y+8	; 0x08
    42b0:	79 85       	ldd	r23, Y+9	; 0x09
    42b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9f 83       	std	Y+7, r25	; 0x07
    42c0:	8e 83       	std	Y+6, r24	; 0x06
    42c2:	8e 81       	ldd	r24, Y+6	; 0x06
    42c4:	9f 81       	ldd	r25, Y+7	; 0x07
    42c6:	9b 83       	std	Y+3, r25	; 0x03
    42c8:	8a 83       	std	Y+2, r24	; 0x02
    42ca:	8a 81       	ldd	r24, Y+2	; 0x02
    42cc:	9b 81       	ldd	r25, Y+3	; 0x03
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <LCD_8bit_init+0x360>
    42d2:	9b 83       	std	Y+3, r25	; 0x03
    42d4:	8a 83       	std	Y+2, r24	; 0x02
    42d6:	0f c0       	rjmp	.+30     	; 0x42f6 <LCD_8bit_init+0x388>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42d8:	69 89       	ldd	r22, Y+17	; 0x11
    42da:	7a 89       	ldd	r23, Y+18	; 0x12
    42dc:	8b 89       	ldd	r24, Y+19	; 0x13
    42de:	9c 89       	ldd	r25, Y+20	; 0x14
    42e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	88 8b       	std	Y+16, r24	; 0x10
    42ea:	88 89       	ldd	r24, Y+16	; 0x10
    42ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	8a 95       	dec	r24
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <LCD_8bit_init+0x382>
    42f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(150);
		return_value = LCD_8bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    42f6:	8e a9       	ldd	r24, Y+54	; 0x36
    42f8:	9f a9       	ldd	r25, Y+55	; 0x37
    42fa:	68 e3       	ldi	r22, 0x38	; 56
    42fc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4300:	8d ab       	std	Y+53, r24	; 0x35
		/*************optional************************/

		return_value = LCD_8bit_send_command(LCD, LCD_CLEAR);
    4302:	8e a9       	ldd	r24, Y+54	; 0x36
    4304:	9f a9       	ldd	r25, Y+55	; 0x37
    4306:	61 e0       	ldi	r22, 0x01	; 1
    4308:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    430c:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_8bit_send_command(LCD, LCD_RETURN_HOME);
    430e:	8e a9       	ldd	r24, Y+54	; 0x36
    4310:	9f a9       	ldd	r25, Y+55	; 0x37
    4312:	62 e0       	ldi	r22, 0x02	; 2
    4314:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4318:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_8bit_send_command(LCD, LCD_ENTRY_MODE);
    431a:	8e a9       	ldd	r24, Y+54	; 0x36
    431c:	9f a9       	ldd	r25, Y+55	; 0x37
    431e:	66 e0       	ldi	r22, 0x06	; 6
    4320:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4324:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_8bit_send_command(LCD, LCD_CURSOR_OFF_DISPLAY_ON);
    4326:	8e a9       	ldd	r24, Y+54	; 0x36
    4328:	9f a9       	ldd	r25, Y+55	; 0x37
    432a:	6c e0       	ldi	r22, 0x0C	; 12
    432c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4330:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_8bit_send_command(LCD, LCD_8BIT_MODE_2LINE);
    4332:	8e a9       	ldd	r24, Y+54	; 0x36
    4334:	9f a9       	ldd	r25, Y+55	; 0x37
    4336:	68 e3       	ldi	r22, 0x38	; 56
    4338:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    433c:	8d ab       	std	Y+53, r24	; 0x35
		return_value = LCD_8bit_send_command(LCD, LCD_DDRAM_START);
    433e:	8e a9       	ldd	r24, Y+54	; 0x36
    4340:	9f a9       	ldd	r25, Y+55	; 0x37
    4342:	60 e8       	ldi	r22, 0x80	; 128
    4344:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4348:	8d ab       	std	Y+53, r24	; 0x35

	}

	return return_value;
    434a:	8d a9       	ldd	r24, Y+53	; 0x35
}
    434c:	e7 96       	adiw	r28, 0x37	; 55
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <LCD_8bit_send_char_data>:
/****************************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_char_data(const LCD_8bit_t *LCD, u8 data) {
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	00 d0       	rcall	.+0      	; 0x4364 <LCD_8bit_send_char_data+0x6>
    4364:	00 d0       	rcall	.+0      	; 0x4366 <LCD_8bit_send_char_data+0x8>
    4366:	0f 92       	push	r0
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	9c 83       	std	Y+4, r25	; 0x04
    436e:	8b 83       	std	Y+3, r24	; 0x03
    4370:	6d 83       	std	Y+5, r22	; 0x05
	u8 l_pin_counter = ZERO_INIT;
    4372:	1a 82       	std	Y+2, r1	; 0x02
	Std_ReturnType return_value = E_NOK;
    4374:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	9c 81       	ldd	r25, Y+4	; 0x04
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	11 f4       	brne	.+4      	; 0x4382 <LCD_8bit_send_char_data+0x24>
		return_value = E_NOK;
    437e:	19 82       	std	Y+1, r1	; 0x01
    4380:	31 c0       	rjmp	.+98     	; 0x43e4 <LCD_8bit_send_char_data+0x86>
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_HIGH);
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	9c 81       	ldd	r25, Y+4	; 0x04
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    438c:	89 83       	std	Y+1, r24	; 0x01
		for (l_pin_counter = 0; l_pin_counter < 8; l_pin_counter++) {
    438e:	1a 82       	std	Y+2, r1	; 0x02
    4390:	22 c0       	rjmp	.+68     	; 0x43d6 <LCD_8bit_send_char_data+0x78>
			return_value = DIO_write_pin_logic(&(LCD->LCD_data[l_pin_counter]),
    4392:	8b 81       	ldd	r24, Y+3	; 0x03
    4394:	9c 81       	ldd	r25, Y+4	; 0x04
    4396:	9c 01       	movw	r18, r24
    4398:	2e 5f       	subi	r18, 0xFE	; 254
    439a:	3f 4f       	sbci	r19, 0xFF	; 255
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	88 2f       	mov	r24, r24
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	a9 01       	movw	r20, r18
    43a4:	48 0f       	add	r20, r24
    43a6:	59 1f       	adc	r21, r25
    43a8:	8d 81       	ldd	r24, Y+5	; 0x05
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	88 2f       	mov	r24, r24
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	b9 01       	movw	r22, r18
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <LCD_8bit_send_char_data+0x5e>
    43b8:	75 95       	asr	r23
    43ba:	67 95       	ror	r22
    43bc:	8a 95       	dec	r24
    43be:	e2 f7       	brpl	.-8      	; 0x43b8 <LCD_8bit_send_char_data+0x5a>
    43c0:	cb 01       	movw	r24, r22
    43c2:	28 2f       	mov	r18, r24
    43c4:	21 70       	andi	r18, 0x01	; 1
    43c6:	ca 01       	movw	r24, r20
    43c8:	62 2f       	mov	r22, r18
    43ca:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    43ce:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType return_value = E_NOK;
	if (NULL == LCD) {
		return_value = E_NOK;
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_HIGH);
		for (l_pin_counter = 0; l_pin_counter < 8; l_pin_counter++) {
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	8a 83       	std	Y+2, r24	; 0x02
    43d6:	8a 81       	ldd	r24, Y+2	; 0x02
    43d8:	88 30       	cpi	r24, 0x08	; 8
    43da:	d8 f2       	brcs	.-74     	; 0x4392 <LCD_8bit_send_char_data+0x34>
			return_value = DIO_write_pin_logic(&(LCD->LCD_data[l_pin_counter]),
					(data >> l_pin_counter) & 0x01);
		}
		LCD_send_8bit_enable(LCD);
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	9c 81       	ldd	r25, Y+4	; 0x04
    43e0:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <LCD_send_8bit_enable>
	}

	return return_value;
    43e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	cf 91       	pop	r28
    43f2:	df 91       	pop	r29
    43f4:	08 95       	ret

000043f6 <LCD_8bit_send_command>:
/**********************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_command(const LCD_8bit_t *LCD, u8 command) {
    43f6:	df 93       	push	r29
    43f8:	cf 93       	push	r28
    43fa:	00 d0       	rcall	.+0      	; 0x43fc <LCD_8bit_send_command+0x6>
    43fc:	00 d0       	rcall	.+0      	; 0x43fe <LCD_8bit_send_command+0x8>
    43fe:	0f 92       	push	r0
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	9c 83       	std	Y+4, r25	; 0x04
    4406:	8b 83       	std	Y+3, r24	; 0x03
    4408:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType return_value = E_NOK;
    440a:	1a 82       	std	Y+2, r1	; 0x02
	u8 l_pin_counter = ZERO_INIT;
    440c:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    440e:	8b 81       	ldd	r24, Y+3	; 0x03
    4410:	9c 81       	ldd	r25, Y+4	; 0x04
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	11 f4       	brne	.+4      	; 0x441a <LCD_8bit_send_command+0x24>
		return_value = E_NOK;
    4416:	1a 82       	std	Y+2, r1	; 0x02
    4418:	31 c0       	rjmp	.+98     	; 0x447c <LCD_8bit_send_command+0x86>
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_LOW);
    441a:	8b 81       	ldd	r24, Y+3	; 0x03
    441c:	9c 81       	ldd	r25, Y+4	; 0x04
    441e:	60 e0       	ldi	r22, 0x00	; 0
    4420:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4424:	8a 83       	std	Y+2, r24	; 0x02
		for (l_pin_counter = 0; l_pin_counter < 8; l_pin_counter++) {
    4426:	19 82       	std	Y+1, r1	; 0x01
    4428:	22 c0       	rjmp	.+68     	; 0x446e <LCD_8bit_send_command+0x78>
			return_value = DIO_write_pin_logic(&(LCD->LCD_data[l_pin_counter]),
    442a:	8b 81       	ldd	r24, Y+3	; 0x03
    442c:	9c 81       	ldd	r25, Y+4	; 0x04
    442e:	9c 01       	movw	r18, r24
    4430:	2e 5f       	subi	r18, 0xFE	; 254
    4432:	3f 4f       	sbci	r19, 0xFF	; 255
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	88 2f       	mov	r24, r24
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	a9 01       	movw	r20, r18
    443c:	48 0f       	add	r20, r24
    443e:	59 1f       	adc	r21, r25
    4440:	8d 81       	ldd	r24, Y+5	; 0x05
    4442:	28 2f       	mov	r18, r24
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	88 2f       	mov	r24, r24
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	b9 01       	movw	r22, r18
    444e:	02 c0       	rjmp	.+4      	; 0x4454 <LCD_8bit_send_command+0x5e>
    4450:	75 95       	asr	r23
    4452:	67 95       	ror	r22
    4454:	8a 95       	dec	r24
    4456:	e2 f7       	brpl	.-8      	; 0x4450 <LCD_8bit_send_command+0x5a>
    4458:	cb 01       	movw	r24, r22
    445a:	28 2f       	mov	r18, r24
    445c:	21 70       	andi	r18, 0x01	; 1
    445e:	ca 01       	movw	r24, r20
    4460:	62 2f       	mov	r22, r18
    4462:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4466:	8a 83       	std	Y+2, r24	; 0x02
	u8 l_pin_counter = ZERO_INIT;
	if (NULL == LCD) {
		return_value = E_NOK;
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_rs), DIO_LOW);
		for (l_pin_counter = 0; l_pin_counter < 8; l_pin_counter++) {
    4468:	89 81       	ldd	r24, Y+1	; 0x01
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	89 83       	std	Y+1, r24	; 0x01
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	88 30       	cpi	r24, 0x08	; 8
    4472:	d8 f2       	brcs	.-74     	; 0x442a <LCD_8bit_send_command+0x34>
			return_value = DIO_write_pin_logic(&(LCD->LCD_data[l_pin_counter]),
					(command >> l_pin_counter) & 0x01);
		}
		LCD_send_8bit_enable(LCD);
    4474:	8b 81       	ldd	r24, Y+3	; 0x03
    4476:	9c 81       	ldd	r25, Y+4	; 0x04
    4478:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <LCD_send_8bit_enable>
	}

	return return_value;
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	0f 90       	pop	r0
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	08 95       	ret

0000448e <LCD_8bit_send_char_data_pos>:
/**********************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_char_data_pos(const LCD_8bit_t *LCD, u8 row,
		u8 column, u8 data) {
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	00 d0       	rcall	.+0      	; 0x4494 <LCD_8bit_send_char_data_pos+0x6>
    4494:	00 d0       	rcall	.+0      	; 0x4496 <LCD_8bit_send_char_data_pos+0x8>
    4496:	00 d0       	rcall	.+0      	; 0x4498 <LCD_8bit_send_char_data_pos+0xa>
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
    449c:	9b 83       	std	Y+3, r25	; 0x03
    449e:	8a 83       	std	Y+2, r24	; 0x02
    44a0:	6c 83       	std	Y+4, r22	; 0x04
    44a2:	4d 83       	std	Y+5, r20	; 0x05
    44a4:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType return_value = E_NOK;
    44a6:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (row > LCD_ROWS_MAX_NUM)
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	9b 81       	ldd	r25, Y+3	; 0x03
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	31 f0       	breq	.+12     	; 0x44bc <LCD_8bit_send_char_data_pos+0x2e>
    44b0:	8c 81       	ldd	r24, Y+4	; 0x04
    44b2:	85 30       	cpi	r24, 0x05	; 5
    44b4:	18 f4       	brcc	.+6      	; 0x44bc <LCD_8bit_send_char_data_pos+0x2e>
    44b6:	8d 81       	ldd	r24, Y+5	; 0x05
    44b8:	85 31       	cpi	r24, 0x15	; 21
    44ba:	10 f0       	brcs	.+4      	; 0x44c0 <LCD_8bit_send_char_data_pos+0x32>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    44bc:	19 82       	std	Y+1, r1	; 0x01
    44be:	0d c0       	rjmp	.+26     	; 0x44da <LCD_8bit_send_char_data_pos+0x4c>
	} else {
		return_value = LCD_8bit_set_cursor(LCD, row, column);
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	9b 81       	ldd	r25, Y+3	; 0x03
    44c4:	6c 81       	ldd	r22, Y+4	; 0x04
    44c6:	4d 81       	ldd	r20, Y+5	; 0x05
    44c8:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_8bit_set_cursor>
    44cc:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_8bit_send_char_data(LCD, data);
    44ce:	8a 81       	ldd	r24, Y+2	; 0x02
    44d0:	9b 81       	ldd	r25, Y+3	; 0x03
    44d2:	6e 81       	ldd	r22, Y+6	; 0x06
    44d4:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_8bit_send_char_data>
    44d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return return_value;
    44da:	89 81       	ldd	r24, Y+1	; 0x01
}
    44dc:	26 96       	adiw	r28, 0x06	; 6
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	f8 94       	cli
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	cd bf       	out	0x3d, r28	; 61
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <LCD_8bit_send_string>:
/*************************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_string(const LCD_8bit_t *LCD, u8 *str) {
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <LCD_8bit_send_string+0x6>
    44f4:	00 d0       	rcall	.+0      	; 0x44f6 <LCD_8bit_send_string+0x8>
    44f6:	0f 92       	push	r0
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    44fc:	9b 83       	std	Y+3, r25	; 0x03
    44fe:	8a 83       	std	Y+2, r24	; 0x02
    4500:	7d 83       	std	Y+5, r23	; 0x05
    4502:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_NOK;
    4504:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (NULL == str)) {
    4506:	8a 81       	ldd	r24, Y+2	; 0x02
    4508:	9b 81       	ldd	r25, Y+3	; 0x03
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	21 f0       	breq	.+8      	; 0x4516 <LCD_8bit_send_string+0x28>
    450e:	8c 81       	ldd	r24, Y+4	; 0x04
    4510:	9d 81       	ldd	r25, Y+5	; 0x05
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	81 f4       	brne	.+32     	; 0x4536 <LCD_8bit_send_string+0x48>
		return_value = E_NOK;
    4516:	19 82       	std	Y+1, r1	; 0x01
    4518:	13 c0       	rjmp	.+38     	; 0x4540 <LCD_8bit_send_string+0x52>
	} else {
		while (*str != '\0') {
			return_value = LCD_8bit_send_char_data(LCD, *str++);
    451a:	ec 81       	ldd	r30, Y+4	; 0x04
    451c:	fd 81       	ldd	r31, Y+5	; 0x05
    451e:	20 81       	ld	r18, Z
    4520:	8c 81       	ldd	r24, Y+4	; 0x04
    4522:	9d 81       	ldd	r25, Y+5	; 0x05
    4524:	01 96       	adiw	r24, 0x01	; 1
    4526:	9d 83       	std	Y+5, r25	; 0x05
    4528:	8c 83       	std	Y+4, r24	; 0x04
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	9b 81       	ldd	r25, Y+3	; 0x03
    452e:	62 2f       	mov	r22, r18
    4530:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_8bit_send_char_data>
    4534:	89 83       	std	Y+1, r24	; 0x01
Std_ReturnType LCD_8bit_send_string(const LCD_8bit_t *LCD, u8 *str) {
	Std_ReturnType return_value = E_NOK;
	if ((NULL == LCD) || (NULL == str)) {
		return_value = E_NOK;
	} else {
		while (*str != '\0') {
    4536:	ec 81       	ldd	r30, Y+4	; 0x04
    4538:	fd 81       	ldd	r31, Y+5	; 0x05
    453a:	80 81       	ld	r24, Z
    453c:	88 23       	and	r24, r24
    453e:	69 f7       	brne	.-38     	; 0x451a <LCD_8bit_send_string+0x2c>

		}

	}

	return return_value;
    4540:	89 81       	ldd	r24, Y+1	; 0x01
}
    4542:	0f 90       	pop	r0
    4544:	0f 90       	pop	r0
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	08 95       	ret

00004552 <LCD_8bit_send_string_pos>:
/***********************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_string_pos(const LCD_8bit_t *LCD, u8 row,
		u8 column, u8 *str) {
    4552:	df 93       	push	r29
    4554:	cf 93       	push	r28
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	27 97       	sbiw	r28, 0x07	; 7
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	f8 94       	cli
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	9b 83       	std	Y+3, r25	; 0x03
    4568:	8a 83       	std	Y+2, r24	; 0x02
    456a:	6c 83       	std	Y+4, r22	; 0x04
    456c:	4d 83       	std	Y+5, r20	; 0x05
    456e:	3f 83       	std	Y+7, r19	; 0x07
    4570:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType return_value = E_NOK;
    4572:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD) || (NULL == str) || (row > LCD_ROWS_MAX_NUM)
    4574:	8a 81       	ldd	r24, Y+2	; 0x02
    4576:	9b 81       	ldd	r25, Y+3	; 0x03
    4578:	00 97       	sbiw	r24, 0x00	; 0
    457a:	51 f0       	breq	.+20     	; 0x4590 <LCD_8bit_send_string_pos+0x3e>
    457c:	8e 81       	ldd	r24, Y+6	; 0x06
    457e:	9f 81       	ldd	r25, Y+7	; 0x07
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	31 f0       	breq	.+12     	; 0x4590 <LCD_8bit_send_string_pos+0x3e>
    4584:	8c 81       	ldd	r24, Y+4	; 0x04
    4586:	85 30       	cpi	r24, 0x05	; 5
    4588:	18 f4       	brcc	.+6      	; 0x4590 <LCD_8bit_send_string_pos+0x3e>
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	85 31       	cpi	r24, 0x15	; 21
    458e:	10 f0       	brcs	.+4      	; 0x4594 <LCD_8bit_send_string_pos+0x42>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    4590:	19 82       	std	Y+1, r1	; 0x01
    4592:	0f c0       	rjmp	.+30     	; 0x45b2 <LCD_8bit_send_string_pos+0x60>
	} else {
		return_value = LCD_8bit_set_cursor(LCD, row, column);
    4594:	8a 81       	ldd	r24, Y+2	; 0x02
    4596:	9b 81       	ldd	r25, Y+3	; 0x03
    4598:	6c 81       	ldd	r22, Y+4	; 0x04
    459a:	4d 81       	ldd	r20, Y+5	; 0x05
    459c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_8bit_set_cursor>
    45a0:	89 83       	std	Y+1, r24	; 0x01
		return_value = LCD_8bit_send_string(LCD, str);
    45a2:	8a 81       	ldd	r24, Y+2	; 0x02
    45a4:	9b 81       	ldd	r25, Y+3	; 0x03
    45a6:	2e 81       	ldd	r18, Y+6	; 0x06
    45a8:	3f 81       	ldd	r19, Y+7	; 0x07
    45aa:	b9 01       	movw	r22, r18
    45ac:	0e 94 77 22 	call	0x44ee	; 0x44ee <LCD_8bit_send_string>
    45b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    45b4:	27 96       	adiw	r28, 0x07	; 7
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	08 95       	ret

000045c6 <LCD_8bit_send_number>:
/************************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_number(const LCD_8bit_t *LCD, u32 number) {
    45c6:	df 93       	push	r29
    45c8:	cf 93       	push	r28
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	62 97       	sbiw	r28, 0x12	; 18
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	9e 87       	std	Y+14, r25	; 0x0e
    45dc:	8d 87       	std	Y+13, r24	; 0x0d
    45de:	4f 87       	std	Y+15, r20	; 0x0f
    45e0:	58 8b       	std	Y+16, r21	; 0x10
    45e2:	69 8b       	std	Y+17, r22	; 0x11
    45e4:	7a 8b       	std	Y+18, r23	; 0x12

	u8 str[11];
	Std_ReturnType return_value = E_NOK;
    45e6:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    45e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	11 f4       	brne	.+4      	; 0x45f4 <LCD_8bit_send_number+0x2e>
		return_value = E_NOK;
    45f0:	19 82       	std	Y+1, r1	; 0x01
    45f2:	14 c0       	rjmp	.+40     	; 0x461c <LCD_8bit_send_number+0x56>
	} else {
		convert_int_to_string(number, str);
    45f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f6:	98 89       	ldd	r25, Y+16	; 0x10
    45f8:	a9 89       	ldd	r26, Y+17	; 0x11
    45fa:	ba 89       	ldd	r27, Y+18	; 0x12
    45fc:	9e 01       	movw	r18, r28
    45fe:	2e 5f       	subi	r18, 0xFE	; 254
    4600:	3f 4f       	sbci	r19, 0xFF	; 255
    4602:	bc 01       	movw	r22, r24
    4604:	cd 01       	movw	r24, r26
    4606:	a9 01       	movw	r20, r18
    4608:	0e 94 bb 23 	call	0x4776	; 0x4776 <convert_int_to_string>
		LCD_8bit_send_string(LCD, str);
    460c:	8d 85       	ldd	r24, Y+13	; 0x0d
    460e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4610:	9e 01       	movw	r18, r28
    4612:	2e 5f       	subi	r18, 0xFE	; 254
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	b9 01       	movw	r22, r18
    4618:	0e 94 77 22 	call	0x44ee	; 0x44ee <LCD_8bit_send_string>
	}
	return return_value;
    461c:	89 81       	ldd	r24, Y+1	; 0x01
}
    461e:	62 96       	adiw	r28, 0x12	; 18
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	cf 91       	pop	r28
    462c:	df 91       	pop	r29
    462e:	08 95       	ret

00004630 <LCD_8bit_send_number_pos>:
/***************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_number_pos(const LCD_8bit_t *LCD, u8 row,
		u8 column, u32 number) {
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	df 93       	push	r29
    4636:	cf 93       	push	r28
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
    463c:	64 97       	sbiw	r28, 0x14	; 20
    463e:	0f b6       	in	r0, 0x3f	; 63
    4640:	f8 94       	cli
    4642:	de bf       	out	0x3e, r29	; 62
    4644:	0f be       	out	0x3f, r0	; 63
    4646:	cd bf       	out	0x3d, r28	; 61
    4648:	9e 87       	std	Y+14, r25	; 0x0e
    464a:	8d 87       	std	Y+13, r24	; 0x0d
    464c:	6f 87       	std	Y+15, r22	; 0x0f
    464e:	48 8b       	std	Y+16, r20	; 0x10
    4650:	09 8b       	std	Y+17, r16	; 0x11
    4652:	1a 8b       	std	Y+18, r17	; 0x12
    4654:	2b 8b       	std	Y+19, r18	; 0x13
    4656:	3c 8b       	std	Y+20, r19	; 0x14

	u8 str[11];
	Std_ReturnType return_value = E_NOK;
    4658:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    465a:	8d 85       	ldd	r24, Y+13	; 0x0d
    465c:	9e 85       	ldd	r25, Y+14	; 0x0e
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	11 f4       	brne	.+4      	; 0x4666 <LCD_8bit_send_number_pos+0x36>
		return_value = E_NOK;
    4662:	19 82       	std	Y+1, r1	; 0x01
    4664:	1a c0       	rjmp	.+52     	; 0x469a <LCD_8bit_send_number_pos+0x6a>
	} else {
		LCD_8bit_set_cursor(LCD, row, column);
    4666:	8d 85       	ldd	r24, Y+13	; 0x0d
    4668:	9e 85       	ldd	r25, Y+14	; 0x0e
    466a:	6f 85       	ldd	r22, Y+15	; 0x0f
    466c:	48 89       	ldd	r20, Y+16	; 0x10
    466e:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_8bit_set_cursor>
		convert_int_to_string(number, str);
    4672:	89 89       	ldd	r24, Y+17	; 0x11
    4674:	9a 89       	ldd	r25, Y+18	; 0x12
    4676:	ab 89       	ldd	r26, Y+19	; 0x13
    4678:	bc 89       	ldd	r27, Y+20	; 0x14
    467a:	9e 01       	movw	r18, r28
    467c:	2e 5f       	subi	r18, 0xFE	; 254
    467e:	3f 4f       	sbci	r19, 0xFF	; 255
    4680:	bc 01       	movw	r22, r24
    4682:	cd 01       	movw	r24, r26
    4684:	a9 01       	movw	r20, r18
    4686:	0e 94 bb 23 	call	0x4776	; 0x4776 <convert_int_to_string>
		LCD_8bit_send_string(LCD, str);
    468a:	8d 85       	ldd	r24, Y+13	; 0x0d
    468c:	9e 85       	ldd	r25, Y+14	; 0x0e
    468e:	9e 01       	movw	r18, r28
    4690:	2e 5f       	subi	r18, 0xFE	; 254
    4692:	3f 4f       	sbci	r19, 0xFF	; 255
    4694:	b9 01       	movw	r22, r18
    4696:	0e 94 77 22 	call	0x44ee	; 0x44ee <LCD_8bit_send_string>
	}
	return return_value;
    469a:	89 81       	ldd	r24, Y+1	; 0x01
}
    469c:	64 96       	adiw	r28, 0x14	; 20
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	cf 91       	pop	r28
    46aa:	df 91       	pop	r29
    46ac:	1f 91       	pop	r17
    46ae:	0f 91       	pop	r16
    46b0:	08 95       	ret

000046b2 <LCD_8bit_send_custom_char>:
/***************************************************************************************************************************************/
Std_ReturnType LCD_8bit_send_custom_char(const LCD_8bit_t *LCD, u8 row,

		u8 column, const u8 cus_char[], u8 mem_pos) {
    46b2:	0f 93       	push	r16
    46b4:	df 93       	push	r29
    46b6:	cf 93       	push	r28
    46b8:	cd b7       	in	r28, 0x3d	; 61
    46ba:	de b7       	in	r29, 0x3e	; 62
    46bc:	29 97       	sbiw	r28, 0x09	; 9
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	9c 83       	std	Y+4, r25	; 0x04
    46ca:	8b 83       	std	Y+3, r24	; 0x03
    46cc:	6d 83       	std	Y+5, r22	; 0x05
    46ce:	4e 83       	std	Y+6, r20	; 0x06
    46d0:	38 87       	std	Y+8, r19	; 0x08
    46d2:	2f 83       	std	Y+7, r18	; 0x07
    46d4:	09 87       	std	Y+9, r16	; 0x09
	u8 l_counter = 0;
    46d6:	1a 82       	std	Y+2, r1	; 0x02
	Std_ReturnType return_value = E_NOK;
    46d8:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == LCD)|| (row > LCD_ROWS_MAX_NUM)|| (column > LCD_COLUMNS_MAX_NUM)||(NULL ==cus_char )|| (mem_pos >7)) {
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	69 f0       	breq	.+26     	; 0x46fc <LCD_8bit_send_custom_char+0x4a>
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	85 30       	cpi	r24, 0x05	; 5
    46e6:	50 f4       	brcc	.+20     	; 0x46fc <LCD_8bit_send_custom_char+0x4a>
    46e8:	8e 81       	ldd	r24, Y+6	; 0x06
    46ea:	85 31       	cpi	r24, 0x15	; 21
    46ec:	38 f4       	brcc	.+14     	; 0x46fc <LCD_8bit_send_custom_char+0x4a>
    46ee:	8f 81       	ldd	r24, Y+7	; 0x07
    46f0:	98 85       	ldd	r25, Y+8	; 0x08
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	19 f0       	breq	.+6      	; 0x46fc <LCD_8bit_send_custom_char+0x4a>
    46f6:	89 85       	ldd	r24, Y+9	; 0x09
    46f8:	88 30       	cpi	r24, 0x08	; 8
    46fa:	10 f0       	brcs	.+4      	; 0x4700 <LCD_8bit_send_custom_char+0x4e>
		return_value = E_NOK;
    46fc:	19 82       	std	Y+1, r1	; 0x01
    46fe:	30 c0       	rjmp	.+96     	; 0x4760 <LCD_8bit_send_custom_char+0xae>
	} else {
		return_value = LCD_8bit_send_command(LCD,(LCD_CGRAM_START+(mem_pos*8)));
    4700:	89 85       	ldd	r24, Y+9	; 0x09
    4702:	88 2f       	mov	r24, r24
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	08 96       	adiw	r24, 0x08	; 8
    4708:	88 0f       	add	r24, r24
    470a:	99 1f       	adc	r25, r25
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	88 0f       	add	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	28 2f       	mov	r18, r24
    4716:	8b 81       	ldd	r24, Y+3	; 0x03
    4718:	9c 81       	ldd	r25, Y+4	; 0x04
    471a:	62 2f       	mov	r22, r18
    471c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4720:	89 83       	std	Y+1, r24	; 0x01
		for (l_counter=0;l_counter<8;l_counter++){
    4722:	1a 82       	std	Y+2, r1	; 0x02
    4724:	12 c0       	rjmp	.+36     	; 0x474a <LCD_8bit_send_custom_char+0x98>
		return_value = LCD_8bit_send_char_data(LCD,cus_char[l_counter]);
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	28 2f       	mov	r18, r24
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	8f 81       	ldd	r24, Y+7	; 0x07
    472e:	98 85       	ldd	r25, Y+8	; 0x08
    4730:	fc 01       	movw	r30, r24
    4732:	e2 0f       	add	r30, r18
    4734:	f3 1f       	adc	r31, r19
    4736:	20 81       	ld	r18, Z
    4738:	8b 81       	ldd	r24, Y+3	; 0x03
    473a:	9c 81       	ldd	r25, Y+4	; 0x04
    473c:	62 2f       	mov	r22, r18
    473e:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_8bit_send_char_data>
    4742:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType return_value = E_NOK;
	if ((NULL == LCD)|| (row > LCD_ROWS_MAX_NUM)|| (column > LCD_COLUMNS_MAX_NUM)||(NULL ==cus_char )|| (mem_pos >7)) {
		return_value = E_NOK;
	} else {
		return_value = LCD_8bit_send_command(LCD,(LCD_CGRAM_START+(mem_pos*8)));
		for (l_counter=0;l_counter<8;l_counter++){
    4744:	8a 81       	ldd	r24, Y+2	; 0x02
    4746:	8f 5f       	subi	r24, 0xFF	; 255
    4748:	8a 83       	std	Y+2, r24	; 0x02
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	88 30       	cpi	r24, 0x08	; 8
    474e:	58 f3       	brcs	.-42     	; 0x4726 <LCD_8bit_send_custom_char+0x74>
		return_value = LCD_8bit_send_char_data(LCD,cus_char[l_counter]);
		}
		return_value = LCD_8bit_send_char_data_pos(LCD,row,column, mem_pos);
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	9c 81       	ldd	r25, Y+4	; 0x04
    4754:	6d 81       	ldd	r22, Y+5	; 0x05
    4756:	4e 81       	ldd	r20, Y+6	; 0x06
    4758:	29 85       	ldd	r18, Y+9	; 0x09
    475a:	0e 94 47 22 	call	0x448e	; 0x448e <LCD_8bit_send_char_data_pos>
    475e:	89 83       	std	Y+1, r24	; 0x01

	}

	return return_value;
    4760:	89 81       	ldd	r24, Y+1	; 0x01

}
    4762:	29 96       	adiw	r28, 0x09	; 9
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	f8 94       	cli
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	0f be       	out	0x3f, r0	; 63
    476c:	cd bf       	out	0x3d, r28	; 61
    476e:	cf 91       	pop	r28
    4770:	df 91       	pop	r29
    4772:	0f 91       	pop	r16
    4774:	08 95       	ret

00004776 <convert_int_to_string>:
//#endif

/**********************************************helper functions********************************************************/
static Std_ReturnType convert_int_to_string(u32 value, u8 *str) {
    4776:	df 93       	push	r29
    4778:	cf 93       	push	r28
    477a:	cd b7       	in	r28, 0x3d	; 61
    477c:	de b7       	in	r29, 0x3e	; 62
    477e:	27 97       	sbiw	r28, 0x07	; 7
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	6a 83       	std	Y+2, r22	; 0x02
    478c:	7b 83       	std	Y+3, r23	; 0x03
    478e:	8c 83       	std	Y+4, r24	; 0x04
    4790:	9d 83       	std	Y+5, r25	; 0x05
    4792:	5f 83       	std	Y+7, r21	; 0x07
    4794:	4e 83       	std	Y+6, r20	; 0x06
	Std_ReturnType return_value = E_OK;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == str) {
    479a:	8e 81       	ldd	r24, Y+6	; 0x06
    479c:	9f 81       	ldd	r25, Y+7	; 0x07
    479e:	00 97       	sbiw	r24, 0x00	; 0
    47a0:	11 f4       	brne	.+4      	; 0x47a6 <convert_int_to_string+0x30>
		return_value = E_NOK;
    47a2:	19 82       	std	Y+1, r1	; 0x01
    47a4:	2d c0       	rjmp	.+90     	; 0x4800 <convert_int_to_string+0x8a>
	} else {
		memset(str, '\0', 11);
    47a6:	8e 81       	ldd	r24, Y+6	; 0x06
    47a8:	9f 81       	ldd	r25, Y+7	; 0x07
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	4b e0       	ldi	r20, 0x0B	; 11
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	0e 94 79 29 	call	0x52f2	; 0x52f2 <memset>
		sprintf(str, "%lu", value);
    47b6:	8d b7       	in	r24, 0x3d	; 61
    47b8:	9e b7       	in	r25, 0x3e	; 62
    47ba:	08 97       	sbiw	r24, 0x08	; 8
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	9e bf       	out	0x3e, r25	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	8d bf       	out	0x3d, r24	; 61
    47c6:	ed b7       	in	r30, 0x3d	; 61
    47c8:	fe b7       	in	r31, 0x3e	; 62
    47ca:	31 96       	adiw	r30, 0x01	; 1
    47cc:	8e 81       	ldd	r24, Y+6	; 0x06
    47ce:	9f 81       	ldd	r25, Y+7	; 0x07
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
    47d4:	80 e6       	ldi	r24, 0x60	; 96
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	93 83       	std	Z+3, r25	; 0x03
    47da:	82 83       	std	Z+2, r24	; 0x02
    47dc:	8a 81       	ldd	r24, Y+2	; 0x02
    47de:	9b 81       	ldd	r25, Y+3	; 0x03
    47e0:	ac 81       	ldd	r26, Y+4	; 0x04
    47e2:	bd 81       	ldd	r27, Y+5	; 0x05
    47e4:	84 83       	std	Z+4, r24	; 0x04
    47e6:	95 83       	std	Z+5, r25	; 0x05
    47e8:	a6 83       	std	Z+6, r26	; 0x06
    47ea:	b7 83       	std	Z+7, r27	; 0x07
    47ec:	0e 94 80 29 	call	0x5300	; 0x5300 <sprintf>
    47f0:	8d b7       	in	r24, 0x3d	; 61
    47f2:	9e b7       	in	r25, 0x3e	; 62
    47f4:	08 96       	adiw	r24, 0x08	; 8
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	9e bf       	out	0x3e, r25	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	8d bf       	out	0x3d, r24	; 61
	}
	return return_value;
    4800:	89 81       	ldd	r24, Y+1	; 0x01
}
    4802:	27 96       	adiw	r28, 0x07	; 7
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	f8 94       	cli
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	cd bf       	out	0x3d, r28	; 61
    480e:	cf 91       	pop	r28
    4810:	df 91       	pop	r29
    4812:	08 95       	ret

00004814 <LCD_4bit_set_cursor>:

/************************************************ helper function *********************************************************/
static Std_ReturnType LCD_4bit_set_cursor(const LCD_4bit_t *LCD, u8 row,
		u8 column) {
    4814:	df 93       	push	r29
    4816:	cf 93       	push	r28
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
    481c:	27 97       	sbiw	r28, 0x07	; 7
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	f8 94       	cli
    4822:	de bf       	out	0x3e, r29	; 62
    4824:	0f be       	out	0x3f, r0	; 63
    4826:	cd bf       	out	0x3d, r28	; 61
    4828:	9b 83       	std	Y+3, r25	; 0x03
    482a:	8a 83       	std	Y+2, r24	; 0x02
    482c:	6c 83       	std	Y+4, r22	; 0x04
    482e:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType return_value = E_OK;
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	89 83       	std	Y+1, r24	; 0x01
	if ((NULL == LCD) || (row > LCD_ROWS_MAX_NUM)
    4834:	8a 81       	ldd	r24, Y+2	; 0x02
    4836:	9b 81       	ldd	r25, Y+3	; 0x03
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	31 f0       	breq	.+12     	; 0x4848 <LCD_4bit_set_cursor+0x34>
    483c:	8c 81       	ldd	r24, Y+4	; 0x04
    483e:	85 30       	cpi	r24, 0x05	; 5
    4840:	18 f4       	brcc	.+6      	; 0x4848 <LCD_4bit_set_cursor+0x34>
    4842:	8d 81       	ldd	r24, Y+5	; 0x05
    4844:	85 31       	cpi	r24, 0x15	; 21
    4846:	10 f0       	brcs	.+4      	; 0x484c <LCD_4bit_set_cursor+0x38>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    4848:	19 82       	std	Y+1, r1	; 0x01
    484a:	4a c0       	rjmp	.+148    	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
	} else {
		column--;
    484c:	8d 81       	ldd	r24, Y+5	; 0x05
    484e:	81 50       	subi	r24, 0x01	; 1
    4850:	8d 83       	std	Y+5, r24	; 0x05
		switch (row) {
    4852:	8c 81       	ldd	r24, Y+4	; 0x04
    4854:	28 2f       	mov	r18, r24
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	3f 83       	std	Y+7, r19	; 0x07
    485a:	2e 83       	std	Y+6, r18	; 0x06
    485c:	8e 81       	ldd	r24, Y+6	; 0x06
    485e:	9f 81       	ldd	r25, Y+7	; 0x07
    4860:	82 30       	cpi	r24, 0x02	; 2
    4862:	91 05       	cpc	r25, r1
    4864:	01 f1       	breq	.+64     	; 0x48a6 <LCD_4bit_set_cursor+0x92>
    4866:	2e 81       	ldd	r18, Y+6	; 0x06
    4868:	3f 81       	ldd	r19, Y+7	; 0x07
    486a:	23 30       	cpi	r18, 0x03	; 3
    486c:	31 05       	cpc	r19, r1
    486e:	34 f4       	brge	.+12     	; 0x487c <LCD_4bit_set_cursor+0x68>
    4870:	8e 81       	ldd	r24, Y+6	; 0x06
    4872:	9f 81       	ldd	r25, Y+7	; 0x07
    4874:	81 30       	cpi	r24, 0x01	; 1
    4876:	91 05       	cpc	r25, r1
    4878:	61 f0       	breq	.+24     	; 0x4892 <LCD_4bit_set_cursor+0x7e>
    487a:	32 c0       	rjmp	.+100    	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
    487c:	2e 81       	ldd	r18, Y+6	; 0x06
    487e:	3f 81       	ldd	r19, Y+7	; 0x07
    4880:	23 30       	cpi	r18, 0x03	; 3
    4882:	31 05       	cpc	r19, r1
    4884:	d1 f0       	breq	.+52     	; 0x48ba <LCD_4bit_set_cursor+0xa6>
    4886:	8e 81       	ldd	r24, Y+6	; 0x06
    4888:	9f 81       	ldd	r25, Y+7	; 0x07
    488a:	84 30       	cpi	r24, 0x04	; 4
    488c:	91 05       	cpc	r25, r1
    488e:	f9 f0       	breq	.+62     	; 0x48ce <LCD_4bit_set_cursor+0xba>
    4890:	27 c0       	rjmp	.+78     	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
		case LCD_ROW1:
			return_value = LCD_4bit_send_command(LCD,
    4892:	8d 81       	ldd	r24, Y+5	; 0x05
    4894:	28 2f       	mov	r18, r24
    4896:	20 58       	subi	r18, 0x80	; 128
    4898:	8a 81       	ldd	r24, Y+2	; 0x02
    489a:	9b 81       	ldd	r25, Y+3	; 0x03
    489c:	62 2f       	mov	r22, r18
    489e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    48a2:	89 83       	std	Y+1, r24	; 0x01
    48a4:	1d c0       	rjmp	.+58     	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
					(LCD_DDRAM_START + column));
			break;
		case LCD_ROW2:
			return_value = LCD_4bit_send_command(LCD, (0xc0 + column));
    48a6:	8d 81       	ldd	r24, Y+5	; 0x05
    48a8:	28 2f       	mov	r18, r24
    48aa:	20 54       	subi	r18, 0x40	; 64
    48ac:	8a 81       	ldd	r24, Y+2	; 0x02
    48ae:	9b 81       	ldd	r25, Y+3	; 0x03
    48b0:	62 2f       	mov	r22, r18
    48b2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	13 c0       	rjmp	.+38     	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
			break;
		case LCD_ROW3:
			return_value = LCD_4bit_send_command(LCD, (0x94 + column));
    48ba:	8d 81       	ldd	r24, Y+5	; 0x05
    48bc:	28 2f       	mov	r18, r24
    48be:	2c 56       	subi	r18, 0x6C	; 108
    48c0:	8a 81       	ldd	r24, Y+2	; 0x02
    48c2:	9b 81       	ldd	r25, Y+3	; 0x03
    48c4:	62 2f       	mov	r22, r18
    48c6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    48ca:	89 83       	std	Y+1, r24	; 0x01
    48cc:	09 c0       	rjmp	.+18     	; 0x48e0 <LCD_4bit_set_cursor+0xcc>
			break;
		case LCD_ROW4:
			return_value = LCD_4bit_send_command(LCD, (0xd4 + column));
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	28 2f       	mov	r18, r24
    48d2:	2c 52       	subi	r18, 0x2C	; 44
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	9b 81       	ldd	r25, Y+3	; 0x03
    48d8:	62 2f       	mov	r22, r18
    48da:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <LCD_4bit_send_command>
    48de:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return return_value;
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    48e2:	27 96       	adiw	r28, 0x07	; 7
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	f8 94       	cli
    48e8:	de bf       	out	0x3e, r29	; 62
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	cd bf       	out	0x3d, r28	; 61
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <LCD_send_4bits>:
/**************************************************************************************************************************/
static Std_ReturnType LCD_send_4bits(const LCD_4bit_t *LCD, u8 data_command) {
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <LCD_send_4bits+0x6>
    48fa:	00 d0       	rcall	.+0      	; 0x48fc <LCD_send_4bits+0x8>
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	9b 83       	std	Y+3, r25	; 0x03
    4902:	8a 83       	std	Y+2, r24	; 0x02
    4904:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType return_value = E_NOK;
    4906:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == LCD) {
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	9b 81       	ldd	r25, Y+3	; 0x03
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	11 f4       	brne	.+4      	; 0x4914 <LCD_send_4bits+0x20>
		return_value = E_NOK;
    4910:	19 82       	std	Y+1, r1	; 0x01
    4912:	3a c0       	rjmp	.+116    	; 0x4988 <LCD_send_4bits+0x94>
	} else {
		return_value = DIO_write_pin_logic(&(LCD->LCD_data[LCD_BIT0]),
    4914:	8a 81       	ldd	r24, Y+2	; 0x02
    4916:	9b 81       	ldd	r25, Y+3	; 0x03
    4918:	9c 01       	movw	r18, r24
    491a:	2e 5f       	subi	r18, 0xFE	; 254
    491c:	3f 4f       	sbci	r19, 0xFF	; 255
    491e:	8c 81       	ldd	r24, Y+4	; 0x04
    4920:	48 2f       	mov	r20, r24
    4922:	41 70       	andi	r20, 0x01	; 1
    4924:	c9 01       	movw	r24, r18
    4926:	64 2f       	mov	r22, r20
    4928:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    492c:	89 83       	std	Y+1, r24	; 0x01
				(data_command >> LCD_BIT0) & 0x01);
		return_value = DIO_write_pin_logic(&(LCD->LCD_data[LCD_BIT1]),
    492e:	8a 81       	ldd	r24, Y+2	; 0x02
    4930:	9b 81       	ldd	r25, Y+3	; 0x03
    4932:	9c 01       	movw	r18, r24
    4934:	2d 5f       	subi	r18, 0xFD	; 253
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	8c 81       	ldd	r24, Y+4	; 0x04
    493a:	86 95       	lsr	r24
    493c:	48 2f       	mov	r20, r24
    493e:	41 70       	andi	r20, 0x01	; 1
    4940:	c9 01       	movw	r24, r18
    4942:	64 2f       	mov	r22, r20
    4944:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4948:	89 83       	std	Y+1, r24	; 0x01
				(data_command >> LCD_BIT1) & 0x01);
		return_value = DIO_write_pin_logic(&(LCD->LCD_data[LCD_BIT2]),
    494a:	8a 81       	ldd	r24, Y+2	; 0x02
    494c:	9b 81       	ldd	r25, Y+3	; 0x03
    494e:	9c 01       	movw	r18, r24
    4950:	2c 5f       	subi	r18, 0xFC	; 252
    4952:	3f 4f       	sbci	r19, 0xFF	; 255
    4954:	8c 81       	ldd	r24, Y+4	; 0x04
    4956:	86 95       	lsr	r24
    4958:	86 95       	lsr	r24
    495a:	48 2f       	mov	r20, r24
    495c:	41 70       	andi	r20, 0x01	; 1
    495e:	c9 01       	movw	r24, r18
    4960:	64 2f       	mov	r22, r20
    4962:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4966:	89 83       	std	Y+1, r24	; 0x01
				(data_command >> LCD_BIT2) & 0x01);
		return_value = DIO_write_pin_logic(&(LCD->LCD_data[LCD_BIT3]),
    4968:	8a 81       	ldd	r24, Y+2	; 0x02
    496a:	9b 81       	ldd	r25, Y+3	; 0x03
    496c:	9c 01       	movw	r18, r24
    496e:	2b 5f       	subi	r18, 0xFB	; 251
    4970:	3f 4f       	sbci	r19, 0xFF	; 255
    4972:	8c 81       	ldd	r24, Y+4	; 0x04
    4974:	86 95       	lsr	r24
    4976:	86 95       	lsr	r24
    4978:	86 95       	lsr	r24
    497a:	48 2f       	mov	r20, r24
    497c:	41 70       	andi	r20, 0x01	; 1
    497e:	c9 01       	movw	r24, r18
    4980:	64 2f       	mov	r22, r20
    4982:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4986:	89 83       	std	Y+1, r24	; 0x01
				(data_command >> LCD_BIT3) & 0x01);
	}
	return return_value;
    4988:	89 81       	ldd	r24, Y+1	; 0x01
}
    498a:	0f 90       	pop	r0
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	cf 91       	pop	r28
    4994:	df 91       	pop	r29
    4996:	08 95       	ret

00004998 <LCD_send_4bit_enable>:
/***************************************************************************************************************************/
static Std_ReturnType LCD_send_4bit_enable(const LCD_4bit_t *LCD) {
    4998:	df 93       	push	r29
    499a:	cf 93       	push	r28
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	6b 97       	sbiw	r28, 0x1b	; 27
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	9b 8f       	std	Y+27, r25	; 0x1b
    49ae:	8a 8f       	std	Y+26, r24	; 0x1a
	Std_ReturnType return_value = E_NOK;
    49b0:	19 8e       	std	Y+25, r1	; 0x19
	return_value = DIO_write_pin_logic(&(LCD->LCD_en), DIO_HIGH);
    49b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    49b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	61 e0       	ldi	r22, 0x01	; 1
    49ba:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    49be:	89 8f       	std	Y+25, r24	; 0x19
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	a0 ea       	ldi	r26, 0xA0	; 160
    49c6:	b0 e4       	ldi	r27, 0x40	; 64
    49c8:	8d 8b       	std	Y+21, r24	; 0x15
    49ca:	9e 8b       	std	Y+22, r25	; 0x16
    49cc:	af 8b       	std	Y+23, r26	; 0x17
    49ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49d0:	6d 89       	ldd	r22, Y+21	; 0x15
    49d2:	7e 89       	ldd	r23, Y+22	; 0x16
    49d4:	8f 89       	ldd	r24, Y+23	; 0x17
    49d6:	98 8d       	ldd	r25, Y+24	; 0x18
    49d8:	2b ea       	ldi	r18, 0xAB	; 171
    49da:	3a ea       	ldi	r19, 0xAA	; 170
    49dc:	4a e2       	ldi	r20, 0x2A	; 42
    49de:	50 e4       	ldi	r21, 0x40	; 64
    49e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	89 8b       	std	Y+17, r24	; 0x11
    49ea:	9a 8b       	std	Y+18, r25	; 0x12
    49ec:	ab 8b       	std	Y+19, r26	; 0x13
    49ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    49f0:	69 89       	ldd	r22, Y+17	; 0x11
    49f2:	7a 89       	ldd	r23, Y+18	; 0x12
    49f4:	8b 89       	ldd	r24, Y+19	; 0x13
    49f6:	9c 89       	ldd	r25, Y+20	; 0x14
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e8       	ldi	r20, 0x80	; 128
    49fe:	5f e3       	ldi	r21, 0x3F	; 63
    4a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a04:	88 23       	and	r24, r24
    4a06:	1c f4       	brge	.+6      	; 0x4a0e <LCD_send_4bit_enable+0x76>
		__ticks = 1;
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	88 8b       	std	Y+16, r24	; 0x10
    4a0c:	91 c0       	rjmp	.+290    	; 0x4b30 <LCD_send_4bit_enable+0x198>
	else if (__tmp > 255)
    4a0e:	69 89       	ldd	r22, Y+17	; 0x11
    4a10:	7a 89       	ldd	r23, Y+18	; 0x12
    4a12:	8b 89       	ldd	r24, Y+19	; 0x13
    4a14:	9c 89       	ldd	r25, Y+20	; 0x14
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	4f e7       	ldi	r20, 0x7F	; 127
    4a1c:	53 e4       	ldi	r21, 0x43	; 67
    4a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a22:	18 16       	cp	r1, r24
    4a24:	0c f0       	brlt	.+2      	; 0x4a28 <LCD_send_4bit_enable+0x90>
    4a26:	7b c0       	rjmp	.+246    	; 0x4b1e <LCD_send_4bit_enable+0x186>
	{
		_delay_ms(__us / 1000.0);
    4a28:	6d 89       	ldd	r22, Y+21	; 0x15
    4a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	4a e7       	ldi	r20, 0x7A	; 122
    4a36:	54 e4       	ldi	r21, 0x44	; 68
    4a38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	8c 87       	std	Y+12, r24	; 0x0c
    4a42:	9d 87       	std	Y+13, r25	; 0x0d
    4a44:	ae 87       	std	Y+14, r26	; 0x0e
    4a46:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	4a ef       	ldi	r20, 0xFA	; 250
    4a56:	54 e4       	ldi	r21, 0x44	; 68
    4a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	88 87       	std	Y+8, r24	; 0x08
    4a62:	99 87       	std	Y+9, r25	; 0x09
    4a64:	aa 87       	std	Y+10, r26	; 0x0a
    4a66:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4a68:	68 85       	ldd	r22, Y+8	; 0x08
    4a6a:	79 85       	ldd	r23, Y+9	; 0x09
    4a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <LCD_send_4bit_enable+0xf2>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9f 83       	std	Y+7, r25	; 0x07
    4a86:	8e 83       	std	Y+6, r24	; 0x06
    4a88:	3f c0       	rjmp	.+126    	; 0x4b08 <LCD_send_4bit_enable+0x170>
	else if (__tmp > 65535)
    4a8a:	68 85       	ldd	r22, Y+8	; 0x08
    4a8c:	79 85       	ldd	r23, Y+9	; 0x09
    4a8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a90:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	57 e4       	ldi	r21, 0x47	; 71
    4a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	4c f5       	brge	.+82     	; 0x4af4 <LCD_send_4bit_enable+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4aa4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4aa6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4aa8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e2       	ldi	r20, 0x20	; 32
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	9f 83       	std	Y+7, r25	; 0x07
    4ac8:	8e 83       	std	Y+6, r24	; 0x06
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <LCD_send_4bit_enable+0x152>
    4acc:	88 ec       	ldi	r24, 0xC8	; 200
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	9d 83       	std	Y+5, r25	; 0x05
    4ad2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <LCD_send_4bit_enable+0x140>
    4adc:	9d 83       	std	Y+5, r25	; 0x05
    4ade:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	9f 83       	std	Y+7, r25	; 0x07
    4ae8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	8e 81       	ldd	r24, Y+6	; 0x06
    4aec:	9f 81       	ldd	r25, Y+7	; 0x07
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	69 f7       	brne	.-38     	; 0x4acc <LCD_send_4bit_enable+0x134>
    4af2:	24 c0       	rjmp	.+72     	; 0x4b3c <LCD_send_4bit_enable+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af4:	68 85       	ldd	r22, Y+8	; 0x08
    4af6:	79 85       	ldd	r23, Y+9	; 0x09
    4af8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4afa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	9f 83       	std	Y+7, r25	; 0x07
    4b06:	8e 83       	std	Y+6, r24	; 0x06
    4b08:	8e 81       	ldd	r24, Y+6	; 0x06
    4b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b0c:	9b 83       	std	Y+3, r25	; 0x03
    4b0e:	8a 83       	std	Y+2, r24	; 0x02
    4b10:	8a 81       	ldd	r24, Y+2	; 0x02
    4b12:	9b 81       	ldd	r25, Y+3	; 0x03
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <LCD_send_4bit_enable+0x17c>
    4b18:	9b 83       	std	Y+3, r25	; 0x03
    4b1a:	8a 83       	std	Y+2, r24	; 0x02
    4b1c:	0f c0       	rjmp	.+30     	; 0x4b3c <LCD_send_4bit_enable+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b1e:	69 89       	ldd	r22, Y+17	; 0x11
    4b20:	7a 89       	ldd	r23, Y+18	; 0x12
    4b22:	8b 89       	ldd	r24, Y+19	; 0x13
    4b24:	9c 89       	ldd	r25, Y+20	; 0x14
    4b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	88 8b       	std	Y+16, r24	; 0x10
    4b30:	88 89       	ldd	r24, Y+16	; 0x10
    4b32:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	8a 95       	dec	r24
    4b38:	f1 f7       	brne	.-4      	; 0x4b36 <LCD_send_4bit_enable+0x19e>
    4b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	return_value = DIO_write_pin_logic((&LCD->LCD_en), DIO_LOW);
    4b3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b40:	01 96       	adiw	r24, 0x01	; 1
    4b42:	60 e0       	ldi	r22, 0x00	; 0
    4b44:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4b48:	89 8f       	std	Y+25, r24	; 0x19
	return return_value;
    4b4a:	89 8d       	ldd	r24, Y+25	; 0x19
}
    4b4c:	6b 96       	adiw	r28, 0x1b	; 27
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	f8 94       	cli
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	cf 91       	pop	r28
    4b5a:	df 91       	pop	r29
    4b5c:	08 95       	ret

00004b5e <LCD_send_8bit_enable>:
/*****************************************************************************************************************************/
static Std_ReturnType LCD_send_8bit_enable(const LCD_8bit_t *LCD) {
    4b5e:	df 93       	push	r29
    4b60:	cf 93       	push	r28
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	6b 97       	sbiw	r28, 0x1b	; 27
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
    4b72:	9b 8f       	std	Y+27, r25	; 0x1b
    4b74:	8a 8f       	std	Y+26, r24	; 0x1a
	Std_ReturnType return_value = E_NOK;
    4b76:	19 8e       	std	Y+25, r1	; 0x19
	return_value = DIO_write_pin_logic(&(LCD->LCD_en), DIO_HIGH);
    4b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b7c:	01 96       	adiw	r24, 0x01	; 1
    4b7e:	61 e0       	ldi	r22, 0x01	; 1
    4b80:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4b84:	89 8f       	std	Y+25, r24	; 0x19
    4b86:	80 e0       	ldi	r24, 0x00	; 0
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	a0 ea       	ldi	r26, 0xA0	; 160
    4b8c:	b0 e4       	ldi	r27, 0x40	; 64
    4b8e:	8d 8b       	std	Y+21, r24	; 0x15
    4b90:	9e 8b       	std	Y+22, r25	; 0x16
    4b92:	af 8b       	std	Y+23, r26	; 0x17
    4b94:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b96:	6d 89       	ldd	r22, Y+21	; 0x15
    4b98:	7e 89       	ldd	r23, Y+22	; 0x16
    4b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9e:	2b ea       	ldi	r18, 0xAB	; 171
    4ba0:	3a ea       	ldi	r19, 0xAA	; 170
    4ba2:	4a e2       	ldi	r20, 0x2A	; 42
    4ba4:	50 e4       	ldi	r21, 0x40	; 64
    4ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	89 8b       	std	Y+17, r24	; 0x11
    4bb0:	9a 8b       	std	Y+18, r25	; 0x12
    4bb2:	ab 8b       	std	Y+19, r26	; 0x13
    4bb4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4bb6:	69 89       	ldd	r22, Y+17	; 0x11
    4bb8:	7a 89       	ldd	r23, Y+18	; 0x12
    4bba:	8b 89       	ldd	r24, Y+19	; 0x13
    4bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	40 e8       	ldi	r20, 0x80	; 128
    4bc4:	5f e3       	ldi	r21, 0x3F	; 63
    4bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bca:	88 23       	and	r24, r24
    4bcc:	1c f4       	brge	.+6      	; 0x4bd4 <LCD_send_8bit_enable+0x76>
		__ticks = 1;
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	88 8b       	std	Y+16, r24	; 0x10
    4bd2:	91 c0       	rjmp	.+290    	; 0x4cf6 <LCD_send_8bit_enable+0x198>
	else if (__tmp > 255)
    4bd4:	69 89       	ldd	r22, Y+17	; 0x11
    4bd6:	7a 89       	ldd	r23, Y+18	; 0x12
    4bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bda:	9c 89       	ldd	r25, Y+20	; 0x14
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	4f e7       	ldi	r20, 0x7F	; 127
    4be2:	53 e4       	ldi	r21, 0x43	; 67
    4be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be8:	18 16       	cp	r1, r24
    4bea:	0c f0       	brlt	.+2      	; 0x4bee <LCD_send_8bit_enable+0x90>
    4bec:	7b c0       	rjmp	.+246    	; 0x4ce4 <LCD_send_8bit_enable+0x186>
	{
		_delay_ms(__us / 1000.0);
    4bee:	6d 89       	ldd	r22, Y+21	; 0x15
    4bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    4bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    4bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	4a e7       	ldi	r20, 0x7A	; 122
    4bfc:	54 e4       	ldi	r21, 0x44	; 68
    4bfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c02:	dc 01       	movw	r26, r24
    4c04:	cb 01       	movw	r24, r22
    4c06:	8c 87       	std	Y+12, r24	; 0x0c
    4c08:	9d 87       	std	Y+13, r25	; 0x0d
    4c0a:	ae 87       	std	Y+14, r26	; 0x0e
    4c0c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c10:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c12:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c14:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	4a ef       	ldi	r20, 0xFA	; 250
    4c1c:	54 e4       	ldi	r21, 0x44	; 68
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	88 87       	std	Y+8, r24	; 0x08
    4c28:	99 87       	std	Y+9, r25	; 0x09
    4c2a:	aa 87       	std	Y+10, r26	; 0x0a
    4c2c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c2e:	68 85       	ldd	r22, Y+8	; 0x08
    4c30:	79 85       	ldd	r23, Y+9	; 0x09
    4c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c34:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	40 e8       	ldi	r20, 0x80	; 128
    4c3c:	5f e3       	ldi	r21, 0x3F	; 63
    4c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c42:	88 23       	and	r24, r24
    4c44:	2c f4       	brge	.+10     	; 0x4c50 <LCD_send_8bit_enable+0xf2>
		__ticks = 1;
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9f 83       	std	Y+7, r25	; 0x07
    4c4c:	8e 83       	std	Y+6, r24	; 0x06
    4c4e:	3f c0       	rjmp	.+126    	; 0x4cce <LCD_send_8bit_enable+0x170>
	else if (__tmp > 65535)
    4c50:	68 85       	ldd	r22, Y+8	; 0x08
    4c52:	79 85       	ldd	r23, Y+9	; 0x09
    4c54:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c56:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	3f ef       	ldi	r19, 0xFF	; 255
    4c5c:	4f e7       	ldi	r20, 0x7F	; 127
    4c5e:	57 e4       	ldi	r21, 0x47	; 71
    4c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c64:	18 16       	cp	r1, r24
    4c66:	4c f5       	brge	.+82     	; 0x4cba <LCD_send_8bit_enable+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c68:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	40 e2       	ldi	r20, 0x20	; 32
    4c76:	51 e4       	ldi	r21, 0x41	; 65
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	9f 83       	std	Y+7, r25	; 0x07
    4c8e:	8e 83       	std	Y+6, r24	; 0x06
    4c90:	0f c0       	rjmp	.+30     	; 0x4cb0 <LCD_send_8bit_enable+0x152>
    4c92:	88 ec       	ldi	r24, 0xC8	; 200
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	9d 83       	std	Y+5, r25	; 0x05
    4c98:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <LCD_send_8bit_enable+0x140>
    4ca2:	9d 83       	std	Y+5, r25	; 0x05
    4ca4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	9f 83       	std	Y+7, r25	; 0x07
    4cae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    4cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	69 f7       	brne	.-38     	; 0x4c92 <LCD_send_8bit_enable+0x134>
    4cb8:	24 c0       	rjmp	.+72     	; 0x4d02 <LCD_send_8bit_enable+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cba:	68 85       	ldd	r22, Y+8	; 0x08
    4cbc:	79 85       	ldd	r23, Y+9	; 0x09
    4cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	9f 83       	std	Y+7, r25	; 0x07
    4ccc:	8e 83       	std	Y+6, r24	; 0x06
    4cce:	8e 81       	ldd	r24, Y+6	; 0x06
    4cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    4cd2:	9b 83       	std	Y+3, r25	; 0x03
    4cd4:	8a 83       	std	Y+2, r24	; 0x02
    4cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <LCD_send_8bit_enable+0x17c>
    4cde:	9b 83       	std	Y+3, r25	; 0x03
    4ce0:	8a 83       	std	Y+2, r24	; 0x02
    4ce2:	0f c0       	rjmp	.+30     	; 0x4d02 <LCD_send_8bit_enable+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ce4:	69 89       	ldd	r22, Y+17	; 0x11
    4ce6:	7a 89       	ldd	r23, Y+18	; 0x12
    4ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cea:	9c 89       	ldd	r25, Y+20	; 0x14
    4cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	88 8b       	std	Y+16, r24	; 0x10
    4cf6:	88 89       	ldd	r24, Y+16	; 0x10
    4cf8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	8a 95       	dec	r24
    4cfe:	f1 f7       	brne	.-4      	; 0x4cfc <LCD_send_8bit_enable+0x19e>
    4d00:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	return_value = DIO_write_pin_logic((&LCD->LCD_en), DIO_LOW);
    4d02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d04:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d06:	01 96       	adiw	r24, 0x01	; 1
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4d0e:	89 8f       	std	Y+25, r24	; 0x19
	return return_value;
    4d10:	89 8d       	ldd	r24, Y+25	; 0x19
}
    4d12:	6b 96       	adiw	r28, 0x1b	; 27
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	f8 94       	cli
    4d18:	de bf       	out	0x3e, r29	; 62
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	cd bf       	out	0x3d, r28	; 61
    4d1e:	cf 91       	pop	r28
    4d20:	df 91       	pop	r29
    4d22:	08 95       	ret

00004d24 <LCD_8bit_set_cursor>:
/*****************************************************************************************************************************/
static Std_ReturnType LCD_8bit_set_cursor(const LCD_8bit_t *LCD, u8 row,
		u8 column) {
    4d24:	df 93       	push	r29
    4d26:	cf 93       	push	r28
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	27 97       	sbiw	r28, 0x07	; 7
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	f8 94       	cli
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	9b 83       	std	Y+3, r25	; 0x03
    4d3a:	8a 83       	std	Y+2, r24	; 0x02
    4d3c:	6c 83       	std	Y+4, r22	; 0x04
    4d3e:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType return_value = E_OK;
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	89 83       	std	Y+1, r24	; 0x01
	if ((NULL == LCD) || (row > LCD_ROWS_MAX_NUM)
    4d44:	8a 81       	ldd	r24, Y+2	; 0x02
    4d46:	9b 81       	ldd	r25, Y+3	; 0x03
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	31 f0       	breq	.+12     	; 0x4d58 <LCD_8bit_set_cursor+0x34>
    4d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d4e:	85 30       	cpi	r24, 0x05	; 5
    4d50:	18 f4       	brcc	.+6      	; 0x4d58 <LCD_8bit_set_cursor+0x34>
    4d52:	8d 81       	ldd	r24, Y+5	; 0x05
    4d54:	85 31       	cpi	r24, 0x15	; 21
    4d56:	10 f0       	brcs	.+4      	; 0x4d5c <LCD_8bit_set_cursor+0x38>
			|| (column > LCD_COLUMNS_MAX_NUM)) {
		return_value = E_NOK;
    4d58:	19 82       	std	Y+1, r1	; 0x01
    4d5a:	4a c0       	rjmp	.+148    	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
	} else {
		column--;
    4d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d5e:	81 50       	subi	r24, 0x01	; 1
    4d60:	8d 83       	std	Y+5, r24	; 0x05
		switch (row) {
    4d62:	8c 81       	ldd	r24, Y+4	; 0x04
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	3f 83       	std	Y+7, r19	; 0x07
    4d6a:	2e 83       	std	Y+6, r18	; 0x06
    4d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d6e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d70:	82 30       	cpi	r24, 0x02	; 2
    4d72:	91 05       	cpc	r25, r1
    4d74:	01 f1       	breq	.+64     	; 0x4db6 <LCD_8bit_set_cursor+0x92>
    4d76:	2e 81       	ldd	r18, Y+6	; 0x06
    4d78:	3f 81       	ldd	r19, Y+7	; 0x07
    4d7a:	23 30       	cpi	r18, 0x03	; 3
    4d7c:	31 05       	cpc	r19, r1
    4d7e:	34 f4       	brge	.+12     	; 0x4d8c <LCD_8bit_set_cursor+0x68>
    4d80:	8e 81       	ldd	r24, Y+6	; 0x06
    4d82:	9f 81       	ldd	r25, Y+7	; 0x07
    4d84:	81 30       	cpi	r24, 0x01	; 1
    4d86:	91 05       	cpc	r25, r1
    4d88:	61 f0       	breq	.+24     	; 0x4da2 <LCD_8bit_set_cursor+0x7e>
    4d8a:	32 c0       	rjmp	.+100    	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
    4d8c:	2e 81       	ldd	r18, Y+6	; 0x06
    4d8e:	3f 81       	ldd	r19, Y+7	; 0x07
    4d90:	23 30       	cpi	r18, 0x03	; 3
    4d92:	31 05       	cpc	r19, r1
    4d94:	d1 f0       	breq	.+52     	; 0x4dca <LCD_8bit_set_cursor+0xa6>
    4d96:	8e 81       	ldd	r24, Y+6	; 0x06
    4d98:	9f 81       	ldd	r25, Y+7	; 0x07
    4d9a:	84 30       	cpi	r24, 0x04	; 4
    4d9c:	91 05       	cpc	r25, r1
    4d9e:	f9 f0       	breq	.+62     	; 0x4dde <LCD_8bit_set_cursor+0xba>
    4da0:	27 c0       	rjmp	.+78     	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
		case LCD_ROW1:
			return_value = LCD_8bit_send_command(LCD,
    4da2:	8d 81       	ldd	r24, Y+5	; 0x05
    4da4:	28 2f       	mov	r18, r24
    4da6:	20 58       	subi	r18, 0x80	; 128
    4da8:	8a 81       	ldd	r24, Y+2	; 0x02
    4daa:	9b 81       	ldd	r25, Y+3	; 0x03
    4dac:	62 2f       	mov	r22, r18
    4dae:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4db2:	89 83       	std	Y+1, r24	; 0x01
    4db4:	1d c0       	rjmp	.+58     	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
					(LCD_DDRAM_START + column));
			break;
		case LCD_ROW2:
			return_value = LCD_8bit_send_command(LCD, (0xc0 + column));
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	28 2f       	mov	r18, r24
    4dba:	20 54       	subi	r18, 0x40	; 64
    4dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    4dc0:	62 2f       	mov	r22, r18
    4dc2:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4dc6:	89 83       	std	Y+1, r24	; 0x01
    4dc8:	13 c0       	rjmp	.+38     	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
			break;
		case LCD_ROW3:
			return_value = LCD_8bit_send_command(LCD, (0x94 + column));
    4dca:	8d 81       	ldd	r24, Y+5	; 0x05
    4dcc:	28 2f       	mov	r18, r24
    4dce:	2c 56       	subi	r18, 0x6C	; 108
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd4:	62 2f       	mov	r22, r18
    4dd6:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	09 c0       	rjmp	.+18     	; 0x4df0 <LCD_8bit_set_cursor+0xcc>
			break;
		case LCD_ROW4:
			return_value = LCD_8bit_send_command(LCD, (0xd4 + column));
    4dde:	8d 81       	ldd	r24, Y+5	; 0x05
    4de0:	28 2f       	mov	r18, r24
    4de2:	2c 52       	subi	r18, 0x2C	; 44
    4de4:	8a 81       	ldd	r24, Y+2	; 0x02
    4de6:	9b 81       	ldd	r25, Y+3	; 0x03
    4de8:	62 2f       	mov	r22, r18
    4dea:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_8bit_send_command>
    4dee:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return return_value;
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4df2:	27 96       	adiw	r28, 0x07	; 7
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	cf 91       	pop	r28
    4e00:	df 91       	pop	r29
    4e02:	08 95       	ret

00004e04 <KEYPAD_init>:
/*Name:			KEYPAD_init
 * Description: Initialize MCU Pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
 */
Std_ReturnType KEYPAD_init(void) {
    4e04:	df 93       	push	r29
    4e06:	cf 93       	push	r28
    4e08:	0f 92       	push	r0
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62

	Std_ReturnType return_value = E_OK;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	89 83       	std	Y+1, r24	; 0x01

	DIO_init();
    4e12:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>

	return return_value;
    4e16:	89 81       	ldd	r24, Y+1	; 0x01

}
    4e18:	0f 90       	pop	r0
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	08 95       	ret

00004e20 <KEYPAD_read_value>:
 * description   read value of keypad buttons
 * arguments     first =>  KEYPAD : pointer to the SEGMANT pin configurations
 * 				 second => value  : pointer to return value
 * return        (E_OK,E_NOK)
 */
Std_ReturnType KEYPAD_read_value(const KEYPAD_t *KEYPAD,u8 *value){
    4e20:	df 93       	push	r29
    4e22:	cf 93       	push	r28
    4e24:	cd b7       	in	r28, 0x3d	; 61
    4e26:	de b7       	in	r29, 0x3e	; 62
    4e28:	29 97       	sbiw	r28, 0x09	; 9
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	0f be       	out	0x3f, r0	; 63
    4e32:	cd bf       	out	0x3d, r28	; 61
    4e34:	9f 83       	std	Y+7, r25	; 0x07
    4e36:	8e 83       	std	Y+6, r24	; 0x06
    4e38:	79 87       	std	Y+9, r23	; 0x09
    4e3a:	68 87       	std	Y+8, r22	; 0x08
	Std_ReturnType return_value = E_NOK;
    4e3c:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_rows_counter = ZERO_INIT, l_columns_counter = ZERO_INIT, l_counter = ZERO_INIT;
    4e3e:	1b 82       	std	Y+3, r1	; 0x03
    4e40:	1a 82       	std	Y+2, r1	; 0x02
    4e42:	19 82       	std	Y+1, r1	; 0x01
	u8 column_logic ;
	if ((NULL==KEYPAD)||(NULL == value)){
    4e44:	8e 81       	ldd	r24, Y+6	; 0x06
    4e46:	9f 81       	ldd	r25, Y+7	; 0x07
    4e48:	00 97       	sbiw	r24, 0x00	; 0
    4e4a:	21 f0       	breq	.+8      	; 0x4e54 <KEYPAD_read_value+0x34>
    4e4c:	88 85       	ldd	r24, Y+8	; 0x08
    4e4e:	99 85       	ldd	r25, Y+9	; 0x09
    4e50:	00 97       	sbiw	r24, 0x00	; 0
    4e52:	11 f4       	brne	.+4      	; 0x4e58 <KEYPAD_read_value+0x38>
		return_value = E_NOK;
    4e54:	1c 82       	std	Y+4, r1	; 0x04
    4e56:	57 c0       	rjmp	.+174    	; 0x4f06 <KEYPAD_read_value+0xe6>
	}
	else {
		for (l_rows_counter = ZERO_INIT;l_rows_counter<KEYPAD_ROWS;l_rows_counter++){
    4e58:	1b 82       	std	Y+3, r1	; 0x03
    4e5a:	51 c0       	rjmp	.+162    	; 0x4efe <KEYPAD_read_value+0xde>
			for (l_counter = ZERO_INIT;l_counter<KEYPAD_ROWS;l_counter++){
    4e5c:	19 82       	std	Y+1, r1	; 0x01
    4e5e:	0e c0       	rjmp	.+28     	; 0x4e7c <KEYPAD_read_value+0x5c>
				return_value =  DIO_write_pin_logic(&(KEYPAD->keypad_row_pins[l_counter]),DIO_HIGH);
    4e60:	2e 81       	ldd	r18, Y+6	; 0x06
    4e62:	3f 81       	ldd	r19, Y+7	; 0x07
    4e64:	89 81       	ldd	r24, Y+1	; 0x01
    4e66:	88 2f       	mov	r24, r24
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	82 0f       	add	r24, r18
    4e6c:	93 1f       	adc	r25, r19
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4e74:	8c 83       	std	Y+4, r24	; 0x04
	if ((NULL==KEYPAD)||(NULL == value)){
		return_value = E_NOK;
	}
	else {
		for (l_rows_counter = ZERO_INIT;l_rows_counter<KEYPAD_ROWS;l_rows_counter++){
			for (l_counter = ZERO_INIT;l_counter<KEYPAD_ROWS;l_counter++){
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	8f 5f       	subi	r24, 0xFF	; 255
    4e7a:	89 83       	std	Y+1, r24	; 0x01
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	84 30       	cpi	r24, 0x04	; 4
    4e80:	78 f3       	brcs	.-34     	; 0x4e60 <KEYPAD_read_value+0x40>
				return_value =  DIO_write_pin_logic(&(KEYPAD->keypad_row_pins[l_counter]),DIO_HIGH);
			}
			return_value = DIO_write_pin_logic(&(KEYPAD->keypad_row_pins[l_rows_counter]),DIO_LOW);
    4e82:	2e 81       	ldd	r18, Y+6	; 0x06
    4e84:	3f 81       	ldd	r19, Y+7	; 0x07
    4e86:	8b 81       	ldd	r24, Y+3	; 0x03
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	82 0f       	add	r24, r18
    4e8e:	93 1f       	adc	r25, r19
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
    4e96:	8c 83       	std	Y+4, r24	; 0x04
			for (l_columns_counter = ZERO_INIT;l_columns_counter<KEYPAD_COLUMNS;l_columns_counter++){
    4e98:	1a 82       	std	Y+2, r1	; 0x02
    4e9a:	2b c0       	rjmp	.+86     	; 0x4ef2 <KEYPAD_read_value+0xd2>
					return_value =	DIO_read_pin_logic(&(KEYPAD->keypad_columns_pins[l_columns_counter]),&column_logic);
    4e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    4ea0:	9c 01       	movw	r18, r24
    4ea2:	2c 5f       	subi	r18, 0xFC	; 252
    4ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea8:	88 2f       	mov	r24, r24
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	82 0f       	add	r24, r18
    4eae:	93 1f       	adc	r25, r19
    4eb0:	9e 01       	movw	r18, r28
    4eb2:	2b 5f       	subi	r18, 0xFB	; 251
    4eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4eb6:	b9 01       	movw	r22, r18
    4eb8:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <DIO_read_pin_logic>
    4ebc:	8c 83       	std	Y+4, r24	; 0x04
					if (DIO_LOW == column_logic){
    4ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec0:	88 23       	and	r24, r24
    4ec2:	a1 f4       	brne	.+40     	; 0x4eec <KEYPAD_read_value+0xcc>
						*value = KEYPAD_values [l_rows_counter][l_columns_counter];
    4ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec6:	48 2f       	mov	r20, r24
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	8a 81       	ldd	r24, Y+2	; 0x02
    4ecc:	28 2f       	mov	r18, r24
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	ca 01       	movw	r24, r20
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	88 0f       	add	r24, r24
    4ed8:	99 1f       	adc	r25, r25
    4eda:	82 0f       	add	r24, r18
    4edc:	93 1f       	adc	r25, r19
    4ede:	fc 01       	movw	r30, r24
    4ee0:	e0 53       	subi	r30, 0x30	; 48
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	80 81       	ld	r24, Z
    4ee6:	e8 85       	ldd	r30, Y+8	; 0x08
    4ee8:	f9 85       	ldd	r31, Y+9	; 0x09
    4eea:	80 83       	st	Z, r24
		for (l_rows_counter = ZERO_INIT;l_rows_counter<KEYPAD_ROWS;l_rows_counter++){
			for (l_counter = ZERO_INIT;l_counter<KEYPAD_ROWS;l_counter++){
				return_value =  DIO_write_pin_logic(&(KEYPAD->keypad_row_pins[l_counter]),DIO_HIGH);
			}
			return_value = DIO_write_pin_logic(&(KEYPAD->keypad_row_pins[l_rows_counter]),DIO_LOW);
			for (l_columns_counter = ZERO_INIT;l_columns_counter<KEYPAD_COLUMNS;l_columns_counter++){
    4eec:	8a 81       	ldd	r24, Y+2	; 0x02
    4eee:	8f 5f       	subi	r24, 0xFF	; 255
    4ef0:	8a 83       	std	Y+2, r24	; 0x02
    4ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef4:	84 30       	cpi	r24, 0x04	; 4
    4ef6:	90 f2       	brcs	.-92     	; 0x4e9c <KEYPAD_read_value+0x7c>
	u8 column_logic ;
	if ((NULL==KEYPAD)||(NULL == value)){
		return_value = E_NOK;
	}
	else {
		for (l_rows_counter = ZERO_INIT;l_rows_counter<KEYPAD_ROWS;l_rows_counter++){
    4ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    4efa:	8f 5f       	subi	r24, 0xFF	; 255
    4efc:	8b 83       	std	Y+3, r24	; 0x03
    4efe:	8b 81       	ldd	r24, Y+3	; 0x03
    4f00:	84 30       	cpi	r24, 0x04	; 4
    4f02:	08 f4       	brcc	.+2      	; 0x4f06 <KEYPAD_read_value+0xe6>
    4f04:	ab cf       	rjmp	.-170    	; 0x4e5c <KEYPAD_read_value+0x3c>

	}



return return_value;
    4f06:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4f08:	29 96       	adiw	r28, 0x09	; 9
    4f0a:	0f b6       	in	r0, 0x3f	; 63
    4f0c:	f8 94       	cli
    4f0e:	de bf       	out	0x3e, r29	; 62
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	cd bf       	out	0x3d, r28	; 61
    4f14:	cf 91       	pop	r28
    4f16:	df 91       	pop	r29
    4f18:	08 95       	ret

00004f1a <ECU_init>:
		.LCD_data [2].port = DIO_PORTC,
		.LCD_data [2].pin = DIO_PIN2,
		.LCD_data [3].port = DIO_PORTC,
		.LCD_data [3].pin = DIO_PIN3,
};
void ECU_init(void){
    4f1a:	df 93       	push	r29
    4f1c:	cf 93       	push	r28
    4f1e:	cd b7       	in	r28, 0x3d	; 61
    4f20:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    4f22:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
	LED_pin_init();
    4f26:	0e 94 ad 1a 	call	0x355a	; 0x355a <LED_pin_init>


}
    4f2a:	cf 91       	pop	r28
    4f2c:	df 91       	pop	r29
    4f2e:	08 95       	ret

00004f30 <DC_MOTOR_pin_init>:
/*Name:			DC_MOTOR_pin_init
 * Description: Initialize MCU Pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
  */
Std_ReturnType DC_MOTOR_pin_init (void){
    4f30:	df 93       	push	r29
    4f32:	cf 93       	push	r28
    4f34:	0f 92       	push	r0
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value = E_OK;
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    4f3e:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
	return return_value;
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f44:	0f 90       	pop	r0
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <DC_MOTOR_move_Right>:
/* name   DC_MOTOR_move_Right
 * description   Move motor right direction
 * arguments     first =>  MOTOR : pointer to the MOTOR pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType DC_MOTOR_move_Right( const DC_MOTOR_t *MOTOR){
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <DC_MOTOR_move_Right+0x6>
    4f52:	0f 92       	push	r0
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    4f58:	9b 83       	std	Y+3, r25	; 0x03
    4f5a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_NOK;
    4f5c:	19 82       	std	Y+1, r1	; 0x01
motor_pin1.port = MOTOR->dc_motor[DC_MOTOR_PIN1].port;
    4f5e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f60:	fb 81       	ldd	r31, Y+3	; 0x03
    4f62:	80 81       	ld	r24, Z
    4f64:	83 70       	andi	r24, 0x03	; 3
    4f66:	98 2f       	mov	r25, r24
    4f68:	93 70       	andi	r25, 0x03	; 3
    4f6a:	80 91 e0 00 	lds	r24, 0x00E0
    4f6e:	8c 7f       	andi	r24, 0xFC	; 252
    4f70:	89 2b       	or	r24, r25
    4f72:	80 93 e0 00 	sts	0x00E0, r24
motor_pin1.pin = MOTOR->dc_motor[DC_MOTOR_PIN1].pin;
    4f76:	ea 81       	ldd	r30, Y+2	; 0x02
    4f78:	fb 81       	ldd	r31, Y+3	; 0x03
    4f7a:	80 81       	ld	r24, Z
    4f7c:	86 95       	lsr	r24
    4f7e:	86 95       	lsr	r24
    4f80:	87 70       	andi	r24, 0x07	; 7
    4f82:	87 70       	andi	r24, 0x07	; 7
    4f84:	98 2f       	mov	r25, r24
    4f86:	99 0f       	add	r25, r25
    4f88:	99 0f       	add	r25, r25
    4f8a:	80 91 e0 00 	lds	r24, 0x00E0
    4f8e:	83 7e       	andi	r24, 0xE3	; 227
    4f90:	89 2b       	or	r24, r25
    4f92:	80 93 e0 00 	sts	0x00E0, r24
//motor_pin1.logic = MOTOR->dc_motor[DC_MOTOR_PIN1].status;
motor_pin2.port = MOTOR->dc_motor[DC_MOTOR_PIN2].port;
    4f96:	ea 81       	ldd	r30, Y+2	; 0x02
    4f98:	fb 81       	ldd	r31, Y+3	; 0x03
    4f9a:	81 81       	ldd	r24, Z+1	; 0x01
    4f9c:	83 70       	andi	r24, 0x03	; 3
    4f9e:	98 2f       	mov	r25, r24
    4fa0:	93 70       	andi	r25, 0x03	; 3
    4fa2:	80 91 e1 00 	lds	r24, 0x00E1
    4fa6:	8c 7f       	andi	r24, 0xFC	; 252
    4fa8:	89 2b       	or	r24, r25
    4faa:	80 93 e1 00 	sts	0x00E1, r24
motor_pin2.pin = MOTOR->dc_motor[DC_MOTOR_PIN2].pin;
    4fae:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb2:	81 81       	ldd	r24, Z+1	; 0x01
    4fb4:	86 95       	lsr	r24
    4fb6:	86 95       	lsr	r24
    4fb8:	87 70       	andi	r24, 0x07	; 7
    4fba:	87 70       	andi	r24, 0x07	; 7
    4fbc:	98 2f       	mov	r25, r24
    4fbe:	99 0f       	add	r25, r25
    4fc0:	99 0f       	add	r25, r25
    4fc2:	80 91 e1 00 	lds	r24, 0x00E1
    4fc6:	83 7e       	andi	r24, 0xE3	; 227
    4fc8:	89 2b       	or	r24, r25
    4fca:	80 93 e1 00 	sts	0x00E1, r24
//motor_pin1.logic = MOTOR->dc_motor[DC_MOTOR_PIN2].status;
	if (NULL == MOTOR){
    4fce:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fd2:	00 97       	sbiw	r24, 0x00	; 0
    4fd4:	11 f4       	brne	.+4      	; 0x4fda <DC_MOTOR_move_Right+0x8e>
		return_value = E_NOK;
    4fd6:	19 82       	std	Y+1, r1	; 0x01
    4fd8:	0a c0       	rjmp	.+20     	; 0x4fee <DC_MOTOR_move_Right+0xa2>
	}
	else {
		DIO_write_pin_logic(&motor_pin1,DIO_HIGH);
    4fda:	80 ee       	ldi	r24, 0xE0	; 224
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	61 e0       	ldi	r22, 0x01	; 1
    4fe0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
		DIO_write_pin_logic(&motor_pin2,DIO_LOW);
    4fe4:	81 ee       	ldi	r24, 0xE1	; 225
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	60 e0       	ldi	r22, 0x00	; 0
    4fea:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
	}
	return return_value;
    4fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ff0:	0f 90       	pop	r0
    4ff2:	0f 90       	pop	r0
    4ff4:	0f 90       	pop	r0
    4ff6:	cf 91       	pop	r28
    4ff8:	df 91       	pop	r29
    4ffa:	08 95       	ret

00004ffc <DC_MOTOR_move_left>:
/* name   DC_MOTOR_move_left
 * description   Move motor right direction
 * arguments     first =>  MOTOR : pointer to the MOTOR pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType DC_MOTOR_move_left( const DC_MOTOR_t *MOTOR){
    4ffc:	df 93       	push	r29
    4ffe:	cf 93       	push	r28
    5000:	00 d0       	rcall	.+0      	; 0x5002 <DC_MOTOR_move_left+0x6>
    5002:	0f 92       	push	r0
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	9b 83       	std	Y+3, r25	; 0x03
    500a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_NOK;
    500c:	19 82       	std	Y+1, r1	; 0x01
motor_pin1.port = MOTOR->dc_motor[0].port;
    500e:	ea 81       	ldd	r30, Y+2	; 0x02
    5010:	fb 81       	ldd	r31, Y+3	; 0x03
    5012:	80 81       	ld	r24, Z
    5014:	83 70       	andi	r24, 0x03	; 3
    5016:	98 2f       	mov	r25, r24
    5018:	93 70       	andi	r25, 0x03	; 3
    501a:	80 91 e0 00 	lds	r24, 0x00E0
    501e:	8c 7f       	andi	r24, 0xFC	; 252
    5020:	89 2b       	or	r24, r25
    5022:	80 93 e0 00 	sts	0x00E0, r24
motor_pin1.pin = MOTOR->dc_motor[0].pin;
    5026:	ea 81       	ldd	r30, Y+2	; 0x02
    5028:	fb 81       	ldd	r31, Y+3	; 0x03
    502a:	80 81       	ld	r24, Z
    502c:	86 95       	lsr	r24
    502e:	86 95       	lsr	r24
    5030:	87 70       	andi	r24, 0x07	; 7
    5032:	87 70       	andi	r24, 0x07	; 7
    5034:	98 2f       	mov	r25, r24
    5036:	99 0f       	add	r25, r25
    5038:	99 0f       	add	r25, r25
    503a:	80 91 e0 00 	lds	r24, 0x00E0
    503e:	83 7e       	andi	r24, 0xE3	; 227
    5040:	89 2b       	or	r24, r25
    5042:	80 93 e0 00 	sts	0x00E0, r24
//motor_pin1.logic = MOTOR->dc_motor[0].status;
motor_pin2.port = MOTOR->dc_motor[1].port;
    5046:	ea 81       	ldd	r30, Y+2	; 0x02
    5048:	fb 81       	ldd	r31, Y+3	; 0x03
    504a:	81 81       	ldd	r24, Z+1	; 0x01
    504c:	83 70       	andi	r24, 0x03	; 3
    504e:	98 2f       	mov	r25, r24
    5050:	93 70       	andi	r25, 0x03	; 3
    5052:	80 91 e1 00 	lds	r24, 0x00E1
    5056:	8c 7f       	andi	r24, 0xFC	; 252
    5058:	89 2b       	or	r24, r25
    505a:	80 93 e1 00 	sts	0x00E1, r24
motor_pin2.pin = MOTOR->dc_motor[1].pin;
    505e:	ea 81       	ldd	r30, Y+2	; 0x02
    5060:	fb 81       	ldd	r31, Y+3	; 0x03
    5062:	81 81       	ldd	r24, Z+1	; 0x01
    5064:	86 95       	lsr	r24
    5066:	86 95       	lsr	r24
    5068:	87 70       	andi	r24, 0x07	; 7
    506a:	87 70       	andi	r24, 0x07	; 7
    506c:	98 2f       	mov	r25, r24
    506e:	99 0f       	add	r25, r25
    5070:	99 0f       	add	r25, r25
    5072:	80 91 e1 00 	lds	r24, 0x00E1
    5076:	83 7e       	andi	r24, 0xE3	; 227
    5078:	89 2b       	or	r24, r25
    507a:	80 93 e1 00 	sts	0x00E1, r24
//motor_pin1.logic = MOTOR->dc_motor[1].status;
	if (NULL == MOTOR){
    507e:	8a 81       	ldd	r24, Y+2	; 0x02
    5080:	9b 81       	ldd	r25, Y+3	; 0x03
    5082:	00 97       	sbiw	r24, 0x00	; 0
    5084:	11 f4       	brne	.+4      	; 0x508a <DC_MOTOR_move_left+0x8e>
		return_value = E_NOK;
    5086:	19 82       	std	Y+1, r1	; 0x01
    5088:	0a c0       	rjmp	.+20     	; 0x509e <DC_MOTOR_move_left+0xa2>
	}
	else {
		DIO_write_pin_logic(&motor_pin1,DIO_LOW);
    508a:	80 ee       	ldi	r24, 0xE0	; 224
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	60 e0       	ldi	r22, 0x00	; 0
    5090:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
		DIO_write_pin_logic(&motor_pin2,DIO_HIGH);
    5094:	81 ee       	ldi	r24, 0xE1	; 225
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	61 e0       	ldi	r22, 0x01	; 1
    509a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
	}
	return return_value;
    509e:	89 81       	ldd	r24, Y+1	; 0x01
}
    50a0:	0f 90       	pop	r0
    50a2:	0f 90       	pop	r0
    50a4:	0f 90       	pop	r0
    50a6:	cf 91       	pop	r28
    50a8:	df 91       	pop	r29
    50aa:	08 95       	ret

000050ac <DC_MOTOR_stop>:
/* name   DC_MOTOR_stop
 * description   stop motor movement
 * arguments     first =>  MOTOR : pointer to the MOTOR pin configurations
 * return        (E_OK,E_NOK)
 */
Std_ReturnType DC_MOTOR_stop ( const DC_MOTOR_t *MOTOR){
    50ac:	df 93       	push	r29
    50ae:	cf 93       	push	r28
    50b0:	00 d0       	rcall	.+0      	; 0x50b2 <DC_MOTOR_stop+0x6>
    50b2:	0f 92       	push	r0
    50b4:	cd b7       	in	r28, 0x3d	; 61
    50b6:	de b7       	in	r29, 0x3e	; 62
    50b8:	9b 83       	std	Y+3, r25	; 0x03
    50ba:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType return_value = E_NOK;
    50bc:	19 82       	std	Y+1, r1	; 0x01
motor_pin1.port = MOTOR->dc_motor[0].port;
    50be:	ea 81       	ldd	r30, Y+2	; 0x02
    50c0:	fb 81       	ldd	r31, Y+3	; 0x03
    50c2:	80 81       	ld	r24, Z
    50c4:	83 70       	andi	r24, 0x03	; 3
    50c6:	98 2f       	mov	r25, r24
    50c8:	93 70       	andi	r25, 0x03	; 3
    50ca:	80 91 e0 00 	lds	r24, 0x00E0
    50ce:	8c 7f       	andi	r24, 0xFC	; 252
    50d0:	89 2b       	or	r24, r25
    50d2:	80 93 e0 00 	sts	0x00E0, r24
motor_pin1.pin = MOTOR->dc_motor[0].pin;
    50d6:	ea 81       	ldd	r30, Y+2	; 0x02
    50d8:	fb 81       	ldd	r31, Y+3	; 0x03
    50da:	80 81       	ld	r24, Z
    50dc:	86 95       	lsr	r24
    50de:	86 95       	lsr	r24
    50e0:	87 70       	andi	r24, 0x07	; 7
    50e2:	87 70       	andi	r24, 0x07	; 7
    50e4:	98 2f       	mov	r25, r24
    50e6:	99 0f       	add	r25, r25
    50e8:	99 0f       	add	r25, r25
    50ea:	80 91 e0 00 	lds	r24, 0x00E0
    50ee:	83 7e       	andi	r24, 0xE3	; 227
    50f0:	89 2b       	or	r24, r25
    50f2:	80 93 e0 00 	sts	0x00E0, r24
//motor_pin1.logic = MOTOR->dc_motor[0].status;
motor_pin2.port = MOTOR->dc_motor[1].port;
    50f6:	ea 81       	ldd	r30, Y+2	; 0x02
    50f8:	fb 81       	ldd	r31, Y+3	; 0x03
    50fa:	81 81       	ldd	r24, Z+1	; 0x01
    50fc:	83 70       	andi	r24, 0x03	; 3
    50fe:	98 2f       	mov	r25, r24
    5100:	93 70       	andi	r25, 0x03	; 3
    5102:	80 91 e1 00 	lds	r24, 0x00E1
    5106:	8c 7f       	andi	r24, 0xFC	; 252
    5108:	89 2b       	or	r24, r25
    510a:	80 93 e1 00 	sts	0x00E1, r24
motor_pin2.pin = MOTOR->dc_motor[1].pin;
    510e:	ea 81       	ldd	r30, Y+2	; 0x02
    5110:	fb 81       	ldd	r31, Y+3	; 0x03
    5112:	81 81       	ldd	r24, Z+1	; 0x01
    5114:	86 95       	lsr	r24
    5116:	86 95       	lsr	r24
    5118:	87 70       	andi	r24, 0x07	; 7
    511a:	87 70       	andi	r24, 0x07	; 7
    511c:	98 2f       	mov	r25, r24
    511e:	99 0f       	add	r25, r25
    5120:	99 0f       	add	r25, r25
    5122:	80 91 e1 00 	lds	r24, 0x00E1
    5126:	83 7e       	andi	r24, 0xE3	; 227
    5128:	89 2b       	or	r24, r25
    512a:	80 93 e1 00 	sts	0x00E1, r24
//motor_pin1.logic = MOTOR->dc_motor[1].status;
	if (NULL == MOTOR){
    512e:	8a 81       	ldd	r24, Y+2	; 0x02
    5130:	9b 81       	ldd	r25, Y+3	; 0x03
    5132:	00 97       	sbiw	r24, 0x00	; 0
    5134:	11 f4       	brne	.+4      	; 0x513a <DC_MOTOR_stop+0x8e>
		return_value = E_NOK;
    5136:	19 82       	std	Y+1, r1	; 0x01
    5138:	0a c0       	rjmp	.+20     	; 0x514e <DC_MOTOR_stop+0xa2>
	}
	else {
		DIO_write_pin_logic(&motor_pin1,DIO_HIGH);
    513a:	80 ee       	ldi	r24, 0xE0	; 224
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	61 e0       	ldi	r22, 0x01	; 1
    5140:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
		DIO_write_pin_logic(&motor_pin2,DIO_HIGH);
    5144:	81 ee       	ldi	r24, 0xE1	; 225
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	61 e0       	ldi	r22, 0x01	; 1
    514a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <DIO_write_pin_logic>
	}
	return return_value;
    514e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5150:	0f 90       	pop	r0
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	cf 91       	pop	r28
    5158:	df 91       	pop	r29
    515a:	08 95       	ret

0000515c <BTN_init>:
/*Name:			BTN_init
 * Description: Initialize switch pins
 * Arguments: 	void
 * Return :	  	return_value {E_ok,E-NOK}
  */
Std_ReturnType BTN_init (void){
    515c:	df 93       	push	r29
    515e:	cf 93       	push	r28
    5160:	0f 92       	push	r0
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType return_value= E_OK;
    5166:	81 e0       	ldi	r24, 0x01	; 1
    5168:	89 83       	std	Y+1, r24	; 0x01
	DIO_init();
    516a:	0e 94 19 11 	call	0x2232	; 0x2232 <DIO_init>
	return return_value;
    516e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5170:	0f 90       	pop	r0
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	08 95       	ret

00005178 <BTN_read_state>:
 * description   Read switch state
 * arguments     first =>  BTN : pointer to the switch pin configurations
 * 				 Second => BTN_state : pointer to return switch stae
 * return        (E_OK,E_NOK)
 */
Std_ReturnType BTN_read_state(const BTN_t *BTN,BTN_status_t *BTN_state ){
    5178:	df 93       	push	r29
    517a:	cf 93       	push	r28
    517c:	00 d0       	rcall	.+0      	; 0x517e <BTN_read_state+0x6>
    517e:	00 d0       	rcall	.+0      	; 0x5180 <BTN_read_state+0x8>
    5180:	00 d0       	rcall	.+0      	; 0x5182 <BTN_read_state+0xa>
    5182:	cd b7       	in	r28, 0x3d	; 61
    5184:	de b7       	in	r29, 0x3e	; 62
    5186:	9c 83       	std	Y+4, r25	; 0x04
    5188:	8b 83       	std	Y+3, r24	; 0x03
    518a:	7e 83       	std	Y+6, r23	; 0x06
    518c:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType return_value = E_NOK;
    518e:	19 82       	std	Y+1, r1	; 0x01
	DIO_logic_t BTN_pin_logic = DIO_LOW;
    5190:	1a 82       	std	Y+2, r1	; 0x02
	if ((BTN ==  NULL)||(BTN_state == NULL)){
    5192:	8b 81       	ldd	r24, Y+3	; 0x03
    5194:	9c 81       	ldd	r25, Y+4	; 0x04
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	21 f0       	breq	.+8      	; 0x51a2 <BTN_read_state+0x2a>
    519a:	8d 81       	ldd	r24, Y+5	; 0x05
    519c:	9e 81       	ldd	r25, Y+6	; 0x06
    519e:	00 97       	sbiw	r24, 0x00	; 0
    51a0:	11 f4       	brne	.+4      	; 0x51a6 <BTN_read_state+0x2e>
		return_value = E_NOK;
    51a2:	19 82       	std	Y+1, r1	; 0x01
    51a4:	31 c0       	rjmp	.+98     	; 0x5208 <BTN_read_state+0x90>
	}
	else {
		DIO_read_pin_logic(&BTN->BTN_pin,&BTN_pin_logic);
    51a6:	8b 81       	ldd	r24, Y+3	; 0x03
    51a8:	9c 81       	ldd	r25, Y+4	; 0x04
    51aa:	9e 01       	movw	r18, r28
    51ac:	2e 5f       	subi	r18, 0xFE	; 254
    51ae:	3f 4f       	sbci	r19, 0xFF	; 255
    51b0:	b9 01       	movw	r22, r18
    51b2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <DIO_read_pin_logic>
		if (BTN_ACTIVE_HIGH == BTN->BTN_connection){
    51b6:	eb 81       	ldd	r30, Y+3	; 0x03
    51b8:	fc 81       	ldd	r31, Y+4	; 0x04
    51ba:	82 81       	ldd	r24, Z+2	; 0x02
    51bc:	88 23       	and	r24, r24
    51be:	79 f4       	brne	.+30     	; 0x51de <BTN_read_state+0x66>
			if (DIO_LOW == BTN_pin_logic){
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	88 23       	and	r24, r24
    51c4:	21 f4       	brne	.+8      	; 0x51ce <BTN_read_state+0x56>
				*BTN_state = BTN_PRESSED;
    51c6:	ed 81       	ldd	r30, Y+5	; 0x05
    51c8:	fe 81       	ldd	r31, Y+6	; 0x06
    51ca:	10 82       	st	Z, r1
    51cc:	1b c0       	rjmp	.+54     	; 0x5204 <BTN_read_state+0x8c>
			}
			else if (DIO_HIGH == BTN_pin_logic){
    51ce:	8a 81       	ldd	r24, Y+2	; 0x02
    51d0:	81 30       	cpi	r24, 0x01	; 1
    51d2:	c1 f4       	brne	.+48     	; 0x5204 <BTN_read_state+0x8c>
				*BTN_state = BTN_RELEASED;
    51d4:	ed 81       	ldd	r30, Y+5	; 0x05
    51d6:	fe 81       	ldd	r31, Y+6	; 0x06
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	80 83       	st	Z, r24
    51dc:	13 c0       	rjmp	.+38     	; 0x5204 <BTN_read_state+0x8c>
			}
		}
		else if (BTN_ACTIVE_LOW == BTN->BTN_connection ){
    51de:	eb 81       	ldd	r30, Y+3	; 0x03
    51e0:	fc 81       	ldd	r31, Y+4	; 0x04
    51e2:	82 81       	ldd	r24, Z+2	; 0x02
    51e4:	81 30       	cpi	r24, 0x01	; 1
    51e6:	71 f4       	brne	.+28     	; 0x5204 <BTN_read_state+0x8c>
			if (DIO_LOW == BTN_pin_logic){
    51e8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ea:	88 23       	and	r24, r24
    51ec:	29 f4       	brne	.+10     	; 0x51f8 <BTN_read_state+0x80>
							*BTN_state = BTN_RELEASED;
    51ee:	ed 81       	ldd	r30, Y+5	; 0x05
    51f0:	fe 81       	ldd	r31, Y+6	; 0x06
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	80 83       	st	Z, r24
    51f6:	06 c0       	rjmp	.+12     	; 0x5204 <BTN_read_state+0x8c>
						}
						else if (DIO_HIGH == BTN_pin_logic){
    51f8:	8a 81       	ldd	r24, Y+2	; 0x02
    51fa:	81 30       	cpi	r24, 0x01	; 1
    51fc:	19 f4       	brne	.+6      	; 0x5204 <BTN_read_state+0x8c>
							*BTN_state = BTN_PRESSED;
    51fe:	ed 81       	ldd	r30, Y+5	; 0x05
    5200:	fe 81       	ldd	r31, Y+6	; 0x06
    5202:	10 82       	st	Z, r1
						}

		}
		else {/*nothing to do */}
		return_value = E_OK;
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	89 83       	std	Y+1, r24	; 0x01
	}

	return return_value;
    5208:	89 81       	ldd	r24, Y+1	; 0x01
}
    520a:	26 96       	adiw	r28, 0x06	; 6
    520c:	0f b6       	in	r0, 0x3f	; 63
    520e:	f8 94       	cli
    5210:	de bf       	out	0x3e, r29	; 62
    5212:	0f be       	out	0x3f, r0	; 63
    5214:	cd bf       	out	0x3d, r28	; 61
    5216:	cf 91       	pop	r28
    5218:	df 91       	pop	r29
    521a:	08 95       	ret

0000521c <main>:

 };

u16 x;
u8 flag=1;
int main() {
    521c:	df 93       	push	r29
    521e:	cf 93       	push	r28
    5220:	0f 92       	push	r0
    5222:	cd b7       	in	r28, 0x3d	; 61
    5224:	de b7       	in	r29, 0x3e	; 62
 *DIO_u8_DDRD_REG |= 0XFF;
    5226:	e1 e3       	ldi	r30, 0x31	; 49
    5228:	f0 e0       	ldi	r31, 0x00	; 0
    522a:	80 81       	ld	r24, Z
    522c:	e1 e3       	ldi	r30, 0x31	; 49
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	80 83       	st	Z, r24

	UART_init(&uart);
    5234:	89 ec       	ldi	r24, 0xC9	; 201
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_init>

	while (1){
		UART_ASYNC_write_byte(&uart,'a');
    523c:	89 ec       	ldi	r24, 0xC9	; 201
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	61 e6       	ldi	r22, 0x61	; 97
    5242:	70 e0       	ldi	r23, 0x00	; 0
    5244:	0e 94 33 09 	call	0x1266	; 0x1266 <UART_ASYNC_write_byte>
    5248:	f9 cf       	rjmp	.-14     	; 0x523c <main+0x20>

0000524a <app_init>:

 }
 else {
 DIO_write_pin_logic(&led1,DIO_LOW);
 }*/
void app_init(void){
    524a:	df 93       	push	r29
    524c:	cf 93       	push	r28
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
ECU_init();
    5252:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <ECU_init>
}
    5256:	cf 91       	pop	r28
    5258:	df 91       	pop	r29
    525a:	08 95       	ret

0000525c <isr_init>:
void isr_init(void){
    525c:	df 93       	push	r29
    525e:	cf 93       	push	r28
    5260:	cd b7       	in	r28, 0x3d	; 61
    5262:	de b7       	in	r29, 0x3e	; 62
	DIO_toggle_port_logic(DIO_PORTB);
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_toggle_port_logic>
}
    526a:	cf 91       	pop	r28
    526c:	df 91       	pop	r29
    526e:	08 95       	ret

00005270 <tim0_handler>:
void tim0_handler (void){
    5270:	df 93       	push	r29
    5272:	cf 93       	push	r28
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
	DIO_toggle_port_logic(DIO_PORTA);
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	0e 94 8f 14 	call	0x291e	; 0x291e <DIO_toggle_port_logic>
}
    527e:	cf 91       	pop	r28
    5280:	df 91       	pop	r29
    5282:	08 95       	ret

00005284 <__prologue_saves__>:
    5284:	2f 92       	push	r2
    5286:	3f 92       	push	r3
    5288:	4f 92       	push	r4
    528a:	5f 92       	push	r5
    528c:	6f 92       	push	r6
    528e:	7f 92       	push	r7
    5290:	8f 92       	push	r8
    5292:	9f 92       	push	r9
    5294:	af 92       	push	r10
    5296:	bf 92       	push	r11
    5298:	cf 92       	push	r12
    529a:	df 92       	push	r13
    529c:	ef 92       	push	r14
    529e:	ff 92       	push	r15
    52a0:	0f 93       	push	r16
    52a2:	1f 93       	push	r17
    52a4:	cf 93       	push	r28
    52a6:	df 93       	push	r29
    52a8:	cd b7       	in	r28, 0x3d	; 61
    52aa:	de b7       	in	r29, 0x3e	; 62
    52ac:	ca 1b       	sub	r28, r26
    52ae:	db 0b       	sbc	r29, r27
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	09 94       	ijmp

000052bc <__epilogue_restores__>:
    52bc:	2a 88       	ldd	r2, Y+18	; 0x12
    52be:	39 88       	ldd	r3, Y+17	; 0x11
    52c0:	48 88       	ldd	r4, Y+16	; 0x10
    52c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    52c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    52c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    52c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    52ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    52cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    52ce:	b9 84       	ldd	r11, Y+9	; 0x09
    52d0:	c8 84       	ldd	r12, Y+8	; 0x08
    52d2:	df 80       	ldd	r13, Y+7	; 0x07
    52d4:	ee 80       	ldd	r14, Y+6	; 0x06
    52d6:	fd 80       	ldd	r15, Y+5	; 0x05
    52d8:	0c 81       	ldd	r16, Y+4	; 0x04
    52da:	1b 81       	ldd	r17, Y+3	; 0x03
    52dc:	aa 81       	ldd	r26, Y+2	; 0x02
    52de:	b9 81       	ldd	r27, Y+1	; 0x01
    52e0:	ce 0f       	add	r28, r30
    52e2:	d1 1d       	adc	r29, r1
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	f8 94       	cli
    52e8:	de bf       	out	0x3e, r29	; 62
    52ea:	0f be       	out	0x3f, r0	; 63
    52ec:	cd bf       	out	0x3d, r28	; 61
    52ee:	ed 01       	movw	r28, r26
    52f0:	08 95       	ret

000052f2 <memset>:
    52f2:	dc 01       	movw	r26, r24
    52f4:	01 c0       	rjmp	.+2      	; 0x52f8 <memset+0x6>
    52f6:	6d 93       	st	X+, r22
    52f8:	41 50       	subi	r20, 0x01	; 1
    52fa:	50 40       	sbci	r21, 0x00	; 0
    52fc:	e0 f7       	brcc	.-8      	; 0x52f6 <memset+0x4>
    52fe:	08 95       	ret

00005300 <sprintf>:
    5300:	ae e0       	ldi	r26, 0x0E	; 14
    5302:	b0 e0       	ldi	r27, 0x00	; 0
    5304:	e6 e8       	ldi	r30, 0x86	; 134
    5306:	f9 e2       	ldi	r31, 0x29	; 41
    5308:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <__prologue_saves__+0x1c>
    530c:	0d 89       	ldd	r16, Y+21	; 0x15
    530e:	1e 89       	ldd	r17, Y+22	; 0x16
    5310:	86 e0       	ldi	r24, 0x06	; 6
    5312:	8c 83       	std	Y+4, r24	; 0x04
    5314:	1a 83       	std	Y+2, r17	; 0x02
    5316:	09 83       	std	Y+1, r16	; 0x01
    5318:	8f ef       	ldi	r24, 0xFF	; 255
    531a:	9f e7       	ldi	r25, 0x7F	; 127
    531c:	9e 83       	std	Y+6, r25	; 0x06
    531e:	8d 83       	std	Y+5, r24	; 0x05
    5320:	9e 01       	movw	r18, r28
    5322:	27 5e       	subi	r18, 0xE7	; 231
    5324:	3f 4f       	sbci	r19, 0xFF	; 255
    5326:	ce 01       	movw	r24, r28
    5328:	01 96       	adiw	r24, 0x01	; 1
    532a:	6f 89       	ldd	r22, Y+23	; 0x17
    532c:	78 8d       	ldd	r23, Y+24	; 0x18
    532e:	a9 01       	movw	r20, r18
    5330:	0e 94 a4 29 	call	0x5348	; 0x5348 <vfprintf>
    5334:	2f 81       	ldd	r18, Y+7	; 0x07
    5336:	38 85       	ldd	r19, Y+8	; 0x08
    5338:	02 0f       	add	r16, r18
    533a:	13 1f       	adc	r17, r19
    533c:	f8 01       	movw	r30, r16
    533e:	10 82       	st	Z, r1
    5340:	2e 96       	adiw	r28, 0x0e	; 14
    5342:	e4 e0       	ldi	r30, 0x04	; 4
    5344:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <__epilogue_restores__+0x1c>

00005348 <vfprintf>:
    5348:	ab e0       	ldi	r26, 0x0B	; 11
    534a:	b0 e0       	ldi	r27, 0x00	; 0
    534c:	ea ea       	ldi	r30, 0xAA	; 170
    534e:	f9 e2       	ldi	r31, 0x29	; 41
    5350:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__prologue_saves__>
    5354:	3c 01       	movw	r6, r24
    5356:	2b 01       	movw	r4, r22
    5358:	5a 01       	movw	r10, r20
    535a:	fc 01       	movw	r30, r24
    535c:	17 82       	std	Z+7, r1	; 0x07
    535e:	16 82       	std	Z+6, r1	; 0x06
    5360:	83 81       	ldd	r24, Z+3	; 0x03
    5362:	81 fd       	sbrc	r24, 1
    5364:	03 c0       	rjmp	.+6      	; 0x536c <vfprintf+0x24>
    5366:	6f ef       	ldi	r22, 0xFF	; 255
    5368:	7f ef       	ldi	r23, 0xFF	; 255
    536a:	c6 c1       	rjmp	.+908    	; 0x56f8 <vfprintf+0x3b0>
    536c:	9a e0       	ldi	r25, 0x0A	; 10
    536e:	89 2e       	mov	r8, r25
    5370:	1e 01       	movw	r2, r28
    5372:	08 94       	sec
    5374:	21 1c       	adc	r2, r1
    5376:	31 1c       	adc	r3, r1
    5378:	f3 01       	movw	r30, r6
    537a:	23 81       	ldd	r18, Z+3	; 0x03
    537c:	f2 01       	movw	r30, r4
    537e:	23 fd       	sbrc	r18, 3
    5380:	85 91       	lpm	r24, Z+
    5382:	23 ff       	sbrs	r18, 3
    5384:	81 91       	ld	r24, Z+
    5386:	2f 01       	movw	r4, r30
    5388:	88 23       	and	r24, r24
    538a:	09 f4       	brne	.+2      	; 0x538e <vfprintf+0x46>
    538c:	b2 c1       	rjmp	.+868    	; 0x56f2 <vfprintf+0x3aa>
    538e:	85 32       	cpi	r24, 0x25	; 37
    5390:	39 f4       	brne	.+14     	; 0x53a0 <vfprintf+0x58>
    5392:	23 fd       	sbrc	r18, 3
    5394:	85 91       	lpm	r24, Z+
    5396:	23 ff       	sbrs	r18, 3
    5398:	81 91       	ld	r24, Z+
    539a:	2f 01       	movw	r4, r30
    539c:	85 32       	cpi	r24, 0x25	; 37
    539e:	29 f4       	brne	.+10     	; 0x53aa <vfprintf+0x62>
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	b3 01       	movw	r22, r6
    53a4:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    53a8:	e7 cf       	rjmp	.-50     	; 0x5378 <vfprintf+0x30>
    53aa:	98 2f       	mov	r25, r24
    53ac:	ff 24       	eor	r15, r15
    53ae:	ee 24       	eor	r14, r14
    53b0:	99 24       	eor	r9, r9
    53b2:	ff e1       	ldi	r31, 0x1F	; 31
    53b4:	ff 15       	cp	r31, r15
    53b6:	d0 f0       	brcs	.+52     	; 0x53ec <vfprintf+0xa4>
    53b8:	9b 32       	cpi	r25, 0x2B	; 43
    53ba:	69 f0       	breq	.+26     	; 0x53d6 <vfprintf+0x8e>
    53bc:	9c 32       	cpi	r25, 0x2C	; 44
    53be:	28 f4       	brcc	.+10     	; 0x53ca <vfprintf+0x82>
    53c0:	90 32       	cpi	r25, 0x20	; 32
    53c2:	59 f0       	breq	.+22     	; 0x53da <vfprintf+0x92>
    53c4:	93 32       	cpi	r25, 0x23	; 35
    53c6:	91 f4       	brne	.+36     	; 0x53ec <vfprintf+0xa4>
    53c8:	0e c0       	rjmp	.+28     	; 0x53e6 <vfprintf+0x9e>
    53ca:	9d 32       	cpi	r25, 0x2D	; 45
    53cc:	49 f0       	breq	.+18     	; 0x53e0 <vfprintf+0x98>
    53ce:	90 33       	cpi	r25, 0x30	; 48
    53d0:	69 f4       	brne	.+26     	; 0x53ec <vfprintf+0xa4>
    53d2:	41 e0       	ldi	r20, 0x01	; 1
    53d4:	24 c0       	rjmp	.+72     	; 0x541e <vfprintf+0xd6>
    53d6:	52 e0       	ldi	r21, 0x02	; 2
    53d8:	f5 2a       	or	r15, r21
    53da:	84 e0       	ldi	r24, 0x04	; 4
    53dc:	f8 2a       	or	r15, r24
    53de:	28 c0       	rjmp	.+80     	; 0x5430 <vfprintf+0xe8>
    53e0:	98 e0       	ldi	r25, 0x08	; 8
    53e2:	f9 2a       	or	r15, r25
    53e4:	25 c0       	rjmp	.+74     	; 0x5430 <vfprintf+0xe8>
    53e6:	e0 e1       	ldi	r30, 0x10	; 16
    53e8:	fe 2a       	or	r15, r30
    53ea:	22 c0       	rjmp	.+68     	; 0x5430 <vfprintf+0xe8>
    53ec:	f7 fc       	sbrc	r15, 7
    53ee:	29 c0       	rjmp	.+82     	; 0x5442 <vfprintf+0xfa>
    53f0:	89 2f       	mov	r24, r25
    53f2:	80 53       	subi	r24, 0x30	; 48
    53f4:	8a 30       	cpi	r24, 0x0A	; 10
    53f6:	70 f4       	brcc	.+28     	; 0x5414 <vfprintf+0xcc>
    53f8:	f6 fe       	sbrs	r15, 6
    53fa:	05 c0       	rjmp	.+10     	; 0x5406 <vfprintf+0xbe>
    53fc:	98 9c       	mul	r9, r8
    53fe:	90 2c       	mov	r9, r0
    5400:	11 24       	eor	r1, r1
    5402:	98 0e       	add	r9, r24
    5404:	15 c0       	rjmp	.+42     	; 0x5430 <vfprintf+0xe8>
    5406:	e8 9c       	mul	r14, r8
    5408:	e0 2c       	mov	r14, r0
    540a:	11 24       	eor	r1, r1
    540c:	e8 0e       	add	r14, r24
    540e:	f0 e2       	ldi	r31, 0x20	; 32
    5410:	ff 2a       	or	r15, r31
    5412:	0e c0       	rjmp	.+28     	; 0x5430 <vfprintf+0xe8>
    5414:	9e 32       	cpi	r25, 0x2E	; 46
    5416:	29 f4       	brne	.+10     	; 0x5422 <vfprintf+0xda>
    5418:	f6 fc       	sbrc	r15, 6
    541a:	6b c1       	rjmp	.+726    	; 0x56f2 <vfprintf+0x3aa>
    541c:	40 e4       	ldi	r20, 0x40	; 64
    541e:	f4 2a       	or	r15, r20
    5420:	07 c0       	rjmp	.+14     	; 0x5430 <vfprintf+0xe8>
    5422:	9c 36       	cpi	r25, 0x6C	; 108
    5424:	19 f4       	brne	.+6      	; 0x542c <vfprintf+0xe4>
    5426:	50 e8       	ldi	r21, 0x80	; 128
    5428:	f5 2a       	or	r15, r21
    542a:	02 c0       	rjmp	.+4      	; 0x5430 <vfprintf+0xe8>
    542c:	98 36       	cpi	r25, 0x68	; 104
    542e:	49 f4       	brne	.+18     	; 0x5442 <vfprintf+0xfa>
    5430:	f2 01       	movw	r30, r4
    5432:	23 fd       	sbrc	r18, 3
    5434:	95 91       	lpm	r25, Z+
    5436:	23 ff       	sbrs	r18, 3
    5438:	91 91       	ld	r25, Z+
    543a:	2f 01       	movw	r4, r30
    543c:	99 23       	and	r25, r25
    543e:	09 f0       	breq	.+2      	; 0x5442 <vfprintf+0xfa>
    5440:	b8 cf       	rjmp	.-144    	; 0x53b2 <vfprintf+0x6a>
    5442:	89 2f       	mov	r24, r25
    5444:	85 54       	subi	r24, 0x45	; 69
    5446:	83 30       	cpi	r24, 0x03	; 3
    5448:	18 f0       	brcs	.+6      	; 0x5450 <vfprintf+0x108>
    544a:	80 52       	subi	r24, 0x20	; 32
    544c:	83 30       	cpi	r24, 0x03	; 3
    544e:	38 f4       	brcc	.+14     	; 0x545e <vfprintf+0x116>
    5450:	44 e0       	ldi	r20, 0x04	; 4
    5452:	50 e0       	ldi	r21, 0x00	; 0
    5454:	a4 0e       	add	r10, r20
    5456:	b5 1e       	adc	r11, r21
    5458:	5f e3       	ldi	r21, 0x3F	; 63
    545a:	59 83       	std	Y+1, r21	; 0x01
    545c:	0f c0       	rjmp	.+30     	; 0x547c <vfprintf+0x134>
    545e:	93 36       	cpi	r25, 0x63	; 99
    5460:	31 f0       	breq	.+12     	; 0x546e <vfprintf+0x126>
    5462:	93 37       	cpi	r25, 0x73	; 115
    5464:	79 f0       	breq	.+30     	; 0x5484 <vfprintf+0x13c>
    5466:	93 35       	cpi	r25, 0x53	; 83
    5468:	09 f0       	breq	.+2      	; 0x546c <vfprintf+0x124>
    546a:	56 c0       	rjmp	.+172    	; 0x5518 <vfprintf+0x1d0>
    546c:	20 c0       	rjmp	.+64     	; 0x54ae <vfprintf+0x166>
    546e:	f5 01       	movw	r30, r10
    5470:	80 81       	ld	r24, Z
    5472:	89 83       	std	Y+1, r24	; 0x01
    5474:	42 e0       	ldi	r20, 0x02	; 2
    5476:	50 e0       	ldi	r21, 0x00	; 0
    5478:	a4 0e       	add	r10, r20
    547a:	b5 1e       	adc	r11, r21
    547c:	61 01       	movw	r12, r2
    547e:	01 e0       	ldi	r16, 0x01	; 1
    5480:	10 e0       	ldi	r17, 0x00	; 0
    5482:	12 c0       	rjmp	.+36     	; 0x54a8 <vfprintf+0x160>
    5484:	f5 01       	movw	r30, r10
    5486:	c0 80       	ld	r12, Z
    5488:	d1 80       	ldd	r13, Z+1	; 0x01
    548a:	f6 fc       	sbrc	r15, 6
    548c:	03 c0       	rjmp	.+6      	; 0x5494 <vfprintf+0x14c>
    548e:	6f ef       	ldi	r22, 0xFF	; 255
    5490:	7f ef       	ldi	r23, 0xFF	; 255
    5492:	02 c0       	rjmp	.+4      	; 0x5498 <vfprintf+0x150>
    5494:	69 2d       	mov	r22, r9
    5496:	70 e0       	ldi	r23, 0x00	; 0
    5498:	42 e0       	ldi	r20, 0x02	; 2
    549a:	50 e0       	ldi	r21, 0x00	; 0
    549c:	a4 0e       	add	r10, r20
    549e:	b5 1e       	adc	r11, r21
    54a0:	c6 01       	movw	r24, r12
    54a2:	0e 94 8c 2b 	call	0x5718	; 0x5718 <strnlen>
    54a6:	8c 01       	movw	r16, r24
    54a8:	5f e7       	ldi	r21, 0x7F	; 127
    54aa:	f5 22       	and	r15, r21
    54ac:	14 c0       	rjmp	.+40     	; 0x54d6 <vfprintf+0x18e>
    54ae:	f5 01       	movw	r30, r10
    54b0:	c0 80       	ld	r12, Z
    54b2:	d1 80       	ldd	r13, Z+1	; 0x01
    54b4:	f6 fc       	sbrc	r15, 6
    54b6:	03 c0       	rjmp	.+6      	; 0x54be <vfprintf+0x176>
    54b8:	6f ef       	ldi	r22, 0xFF	; 255
    54ba:	7f ef       	ldi	r23, 0xFF	; 255
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <vfprintf+0x17a>
    54be:	69 2d       	mov	r22, r9
    54c0:	70 e0       	ldi	r23, 0x00	; 0
    54c2:	42 e0       	ldi	r20, 0x02	; 2
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	a4 0e       	add	r10, r20
    54c8:	b5 1e       	adc	r11, r21
    54ca:	c6 01       	movw	r24, r12
    54cc:	0e 94 81 2b 	call	0x5702	; 0x5702 <strnlen_P>
    54d0:	8c 01       	movw	r16, r24
    54d2:	50 e8       	ldi	r21, 0x80	; 128
    54d4:	f5 2a       	or	r15, r21
    54d6:	f3 fe       	sbrs	r15, 3
    54d8:	07 c0       	rjmp	.+14     	; 0x54e8 <vfprintf+0x1a0>
    54da:	1a c0       	rjmp	.+52     	; 0x5510 <vfprintf+0x1c8>
    54dc:	80 e2       	ldi	r24, 0x20	; 32
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	b3 01       	movw	r22, r6
    54e2:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    54e6:	ea 94       	dec	r14
    54e8:	8e 2d       	mov	r24, r14
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	08 17       	cp	r16, r24
    54ee:	19 07       	cpc	r17, r25
    54f0:	a8 f3       	brcs	.-22     	; 0x54dc <vfprintf+0x194>
    54f2:	0e c0       	rjmp	.+28     	; 0x5510 <vfprintf+0x1c8>
    54f4:	f6 01       	movw	r30, r12
    54f6:	f7 fc       	sbrc	r15, 7
    54f8:	85 91       	lpm	r24, Z+
    54fa:	f7 fe       	sbrs	r15, 7
    54fc:	81 91       	ld	r24, Z+
    54fe:	6f 01       	movw	r12, r30
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	b3 01       	movw	r22, r6
    5504:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    5508:	e1 10       	cpse	r14, r1
    550a:	ea 94       	dec	r14
    550c:	01 50       	subi	r16, 0x01	; 1
    550e:	10 40       	sbci	r17, 0x00	; 0
    5510:	01 15       	cp	r16, r1
    5512:	11 05       	cpc	r17, r1
    5514:	79 f7       	brne	.-34     	; 0x54f4 <vfprintf+0x1ac>
    5516:	ea c0       	rjmp	.+468    	; 0x56ec <vfprintf+0x3a4>
    5518:	94 36       	cpi	r25, 0x64	; 100
    551a:	11 f0       	breq	.+4      	; 0x5520 <vfprintf+0x1d8>
    551c:	99 36       	cpi	r25, 0x69	; 105
    551e:	69 f5       	brne	.+90     	; 0x557a <vfprintf+0x232>
    5520:	f7 fe       	sbrs	r15, 7
    5522:	08 c0       	rjmp	.+16     	; 0x5534 <vfprintf+0x1ec>
    5524:	f5 01       	movw	r30, r10
    5526:	20 81       	ld	r18, Z
    5528:	31 81       	ldd	r19, Z+1	; 0x01
    552a:	42 81       	ldd	r20, Z+2	; 0x02
    552c:	53 81       	ldd	r21, Z+3	; 0x03
    552e:	84 e0       	ldi	r24, 0x04	; 4
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	0a c0       	rjmp	.+20     	; 0x5548 <vfprintf+0x200>
    5534:	f5 01       	movw	r30, r10
    5536:	80 81       	ld	r24, Z
    5538:	91 81       	ldd	r25, Z+1	; 0x01
    553a:	9c 01       	movw	r18, r24
    553c:	44 27       	eor	r20, r20
    553e:	37 fd       	sbrc	r19, 7
    5540:	40 95       	com	r20
    5542:	54 2f       	mov	r21, r20
    5544:	82 e0       	ldi	r24, 0x02	; 2
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	a8 0e       	add	r10, r24
    554a:	b9 1e       	adc	r11, r25
    554c:	9f e6       	ldi	r25, 0x6F	; 111
    554e:	f9 22       	and	r15, r25
    5550:	57 ff       	sbrs	r21, 7
    5552:	09 c0       	rjmp	.+18     	; 0x5566 <vfprintf+0x21e>
    5554:	50 95       	com	r21
    5556:	40 95       	com	r20
    5558:	30 95       	com	r19
    555a:	21 95       	neg	r18
    555c:	3f 4f       	sbci	r19, 0xFF	; 255
    555e:	4f 4f       	sbci	r20, 0xFF	; 255
    5560:	5f 4f       	sbci	r21, 0xFF	; 255
    5562:	e0 e8       	ldi	r30, 0x80	; 128
    5564:	fe 2a       	or	r15, r30
    5566:	ca 01       	movw	r24, r20
    5568:	b9 01       	movw	r22, r18
    556a:	a1 01       	movw	r20, r2
    556c:	2a e0       	ldi	r18, 0x0A	; 10
    556e:	30 e0       	ldi	r19, 0x00	; 0
    5570:	0e 94 c3 2b 	call	0x5786	; 0x5786 <__ultoa_invert>
    5574:	d8 2e       	mov	r13, r24
    5576:	d2 18       	sub	r13, r2
    5578:	40 c0       	rjmp	.+128    	; 0x55fa <vfprintf+0x2b2>
    557a:	95 37       	cpi	r25, 0x75	; 117
    557c:	29 f4       	brne	.+10     	; 0x5588 <vfprintf+0x240>
    557e:	1f 2d       	mov	r17, r15
    5580:	1f 7e       	andi	r17, 0xEF	; 239
    5582:	2a e0       	ldi	r18, 0x0A	; 10
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	1d c0       	rjmp	.+58     	; 0x55c2 <vfprintf+0x27a>
    5588:	1f 2d       	mov	r17, r15
    558a:	19 7f       	andi	r17, 0xF9	; 249
    558c:	9f 36       	cpi	r25, 0x6F	; 111
    558e:	61 f0       	breq	.+24     	; 0x55a8 <vfprintf+0x260>
    5590:	90 37       	cpi	r25, 0x70	; 112
    5592:	20 f4       	brcc	.+8      	; 0x559c <vfprintf+0x254>
    5594:	98 35       	cpi	r25, 0x58	; 88
    5596:	09 f0       	breq	.+2      	; 0x559a <vfprintf+0x252>
    5598:	ac c0       	rjmp	.+344    	; 0x56f2 <vfprintf+0x3aa>
    559a:	0f c0       	rjmp	.+30     	; 0x55ba <vfprintf+0x272>
    559c:	90 37       	cpi	r25, 0x70	; 112
    559e:	39 f0       	breq	.+14     	; 0x55ae <vfprintf+0x266>
    55a0:	98 37       	cpi	r25, 0x78	; 120
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <vfprintf+0x25e>
    55a4:	a6 c0       	rjmp	.+332    	; 0x56f2 <vfprintf+0x3aa>
    55a6:	04 c0       	rjmp	.+8      	; 0x55b0 <vfprintf+0x268>
    55a8:	28 e0       	ldi	r18, 0x08	; 8
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	0a c0       	rjmp	.+20     	; 0x55c2 <vfprintf+0x27a>
    55ae:	10 61       	ori	r17, 0x10	; 16
    55b0:	14 fd       	sbrc	r17, 4
    55b2:	14 60       	ori	r17, 0x04	; 4
    55b4:	20 e1       	ldi	r18, 0x10	; 16
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	04 c0       	rjmp	.+8      	; 0x55c2 <vfprintf+0x27a>
    55ba:	14 fd       	sbrc	r17, 4
    55bc:	16 60       	ori	r17, 0x06	; 6
    55be:	20 e1       	ldi	r18, 0x10	; 16
    55c0:	32 e0       	ldi	r19, 0x02	; 2
    55c2:	17 ff       	sbrs	r17, 7
    55c4:	08 c0       	rjmp	.+16     	; 0x55d6 <vfprintf+0x28e>
    55c6:	f5 01       	movw	r30, r10
    55c8:	60 81       	ld	r22, Z
    55ca:	71 81       	ldd	r23, Z+1	; 0x01
    55cc:	82 81       	ldd	r24, Z+2	; 0x02
    55ce:	93 81       	ldd	r25, Z+3	; 0x03
    55d0:	44 e0       	ldi	r20, 0x04	; 4
    55d2:	50 e0       	ldi	r21, 0x00	; 0
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <vfprintf+0x29e>
    55d6:	f5 01       	movw	r30, r10
    55d8:	80 81       	ld	r24, Z
    55da:	91 81       	ldd	r25, Z+1	; 0x01
    55dc:	bc 01       	movw	r22, r24
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	42 e0       	ldi	r20, 0x02	; 2
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	a4 0e       	add	r10, r20
    55e8:	b5 1e       	adc	r11, r21
    55ea:	a1 01       	movw	r20, r2
    55ec:	0e 94 c3 2b 	call	0x5786	; 0x5786 <__ultoa_invert>
    55f0:	d8 2e       	mov	r13, r24
    55f2:	d2 18       	sub	r13, r2
    55f4:	8f e7       	ldi	r24, 0x7F	; 127
    55f6:	f8 2e       	mov	r15, r24
    55f8:	f1 22       	and	r15, r17
    55fa:	f6 fe       	sbrs	r15, 6
    55fc:	0b c0       	rjmp	.+22     	; 0x5614 <vfprintf+0x2cc>
    55fe:	5e ef       	ldi	r21, 0xFE	; 254
    5600:	f5 22       	and	r15, r21
    5602:	d9 14       	cp	r13, r9
    5604:	38 f4       	brcc	.+14     	; 0x5614 <vfprintf+0x2cc>
    5606:	f4 fe       	sbrs	r15, 4
    5608:	07 c0       	rjmp	.+14     	; 0x5618 <vfprintf+0x2d0>
    560a:	f2 fc       	sbrc	r15, 2
    560c:	05 c0       	rjmp	.+10     	; 0x5618 <vfprintf+0x2d0>
    560e:	8f ee       	ldi	r24, 0xEF	; 239
    5610:	f8 22       	and	r15, r24
    5612:	02 c0       	rjmp	.+4      	; 0x5618 <vfprintf+0x2d0>
    5614:	1d 2d       	mov	r17, r13
    5616:	01 c0       	rjmp	.+2      	; 0x561a <vfprintf+0x2d2>
    5618:	19 2d       	mov	r17, r9
    561a:	f4 fe       	sbrs	r15, 4
    561c:	0d c0       	rjmp	.+26     	; 0x5638 <vfprintf+0x2f0>
    561e:	fe 01       	movw	r30, r28
    5620:	ed 0d       	add	r30, r13
    5622:	f1 1d       	adc	r31, r1
    5624:	80 81       	ld	r24, Z
    5626:	80 33       	cpi	r24, 0x30	; 48
    5628:	19 f4       	brne	.+6      	; 0x5630 <vfprintf+0x2e8>
    562a:	99 ee       	ldi	r25, 0xE9	; 233
    562c:	f9 22       	and	r15, r25
    562e:	08 c0       	rjmp	.+16     	; 0x5640 <vfprintf+0x2f8>
    5630:	1f 5f       	subi	r17, 0xFF	; 255
    5632:	f2 fe       	sbrs	r15, 2
    5634:	05 c0       	rjmp	.+10     	; 0x5640 <vfprintf+0x2f8>
    5636:	03 c0       	rjmp	.+6      	; 0x563e <vfprintf+0x2f6>
    5638:	8f 2d       	mov	r24, r15
    563a:	86 78       	andi	r24, 0x86	; 134
    563c:	09 f0       	breq	.+2      	; 0x5640 <vfprintf+0x2f8>
    563e:	1f 5f       	subi	r17, 0xFF	; 255
    5640:	0f 2d       	mov	r16, r15
    5642:	f3 fc       	sbrc	r15, 3
    5644:	14 c0       	rjmp	.+40     	; 0x566e <vfprintf+0x326>
    5646:	f0 fe       	sbrs	r15, 0
    5648:	0f c0       	rjmp	.+30     	; 0x5668 <vfprintf+0x320>
    564a:	1e 15       	cp	r17, r14
    564c:	10 f0       	brcs	.+4      	; 0x5652 <vfprintf+0x30a>
    564e:	9d 2c       	mov	r9, r13
    5650:	0b c0       	rjmp	.+22     	; 0x5668 <vfprintf+0x320>
    5652:	9d 2c       	mov	r9, r13
    5654:	9e 0c       	add	r9, r14
    5656:	91 1a       	sub	r9, r17
    5658:	1e 2d       	mov	r17, r14
    565a:	06 c0       	rjmp	.+12     	; 0x5668 <vfprintf+0x320>
    565c:	80 e2       	ldi	r24, 0x20	; 32
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	b3 01       	movw	r22, r6
    5662:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    5666:	1f 5f       	subi	r17, 0xFF	; 255
    5668:	1e 15       	cp	r17, r14
    566a:	c0 f3       	brcs	.-16     	; 0x565c <vfprintf+0x314>
    566c:	04 c0       	rjmp	.+8      	; 0x5676 <vfprintf+0x32e>
    566e:	1e 15       	cp	r17, r14
    5670:	10 f4       	brcc	.+4      	; 0x5676 <vfprintf+0x32e>
    5672:	e1 1a       	sub	r14, r17
    5674:	01 c0       	rjmp	.+2      	; 0x5678 <vfprintf+0x330>
    5676:	ee 24       	eor	r14, r14
    5678:	04 ff       	sbrs	r16, 4
    567a:	0f c0       	rjmp	.+30     	; 0x569a <vfprintf+0x352>
    567c:	80 e3       	ldi	r24, 0x30	; 48
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	b3 01       	movw	r22, r6
    5682:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    5686:	02 ff       	sbrs	r16, 2
    5688:	1d c0       	rjmp	.+58     	; 0x56c4 <vfprintf+0x37c>
    568a:	01 fd       	sbrc	r16, 1
    568c:	03 c0       	rjmp	.+6      	; 0x5694 <vfprintf+0x34c>
    568e:	88 e7       	ldi	r24, 0x78	; 120
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	0e c0       	rjmp	.+28     	; 0x56b0 <vfprintf+0x368>
    5694:	88 e5       	ldi	r24, 0x58	; 88
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	0b c0       	rjmp	.+22     	; 0x56b0 <vfprintf+0x368>
    569a:	80 2f       	mov	r24, r16
    569c:	86 78       	andi	r24, 0x86	; 134
    569e:	91 f0       	breq	.+36     	; 0x56c4 <vfprintf+0x37c>
    56a0:	01 ff       	sbrs	r16, 1
    56a2:	02 c0       	rjmp	.+4      	; 0x56a8 <vfprintf+0x360>
    56a4:	8b e2       	ldi	r24, 0x2B	; 43
    56a6:	01 c0       	rjmp	.+2      	; 0x56aa <vfprintf+0x362>
    56a8:	80 e2       	ldi	r24, 0x20	; 32
    56aa:	f7 fc       	sbrc	r15, 7
    56ac:	8d e2       	ldi	r24, 0x2D	; 45
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	b3 01       	movw	r22, r6
    56b2:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    56b6:	06 c0       	rjmp	.+12     	; 0x56c4 <vfprintf+0x37c>
    56b8:	80 e3       	ldi	r24, 0x30	; 48
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	b3 01       	movw	r22, r6
    56be:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    56c2:	9a 94       	dec	r9
    56c4:	d9 14       	cp	r13, r9
    56c6:	c0 f3       	brcs	.-16     	; 0x56b8 <vfprintf+0x370>
    56c8:	da 94       	dec	r13
    56ca:	f1 01       	movw	r30, r2
    56cc:	ed 0d       	add	r30, r13
    56ce:	f1 1d       	adc	r31, r1
    56d0:	80 81       	ld	r24, Z
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	b3 01       	movw	r22, r6
    56d6:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    56da:	dd 20       	and	r13, r13
    56dc:	a9 f7       	brne	.-22     	; 0x56c8 <vfprintf+0x380>
    56de:	06 c0       	rjmp	.+12     	; 0x56ec <vfprintf+0x3a4>
    56e0:	80 e2       	ldi	r24, 0x20	; 32
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	b3 01       	movw	r22, r6
    56e6:	0e 94 97 2b 	call	0x572e	; 0x572e <fputc>
    56ea:	ea 94       	dec	r14
    56ec:	ee 20       	and	r14, r14
    56ee:	c1 f7       	brne	.-16     	; 0x56e0 <vfprintf+0x398>
    56f0:	43 ce       	rjmp	.-890    	; 0x5378 <vfprintf+0x30>
    56f2:	f3 01       	movw	r30, r6
    56f4:	66 81       	ldd	r22, Z+6	; 0x06
    56f6:	77 81       	ldd	r23, Z+7	; 0x07
    56f8:	cb 01       	movw	r24, r22
    56fa:	2b 96       	adiw	r28, 0x0b	; 11
    56fc:	e2 e1       	ldi	r30, 0x12	; 18
    56fe:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <__epilogue_restores__>

00005702 <strnlen_P>:
    5702:	fc 01       	movw	r30, r24
    5704:	05 90       	lpm	r0, Z+
    5706:	61 50       	subi	r22, 0x01	; 1
    5708:	70 40       	sbci	r23, 0x00	; 0
    570a:	01 10       	cpse	r0, r1
    570c:	d8 f7       	brcc	.-10     	; 0x5704 <strnlen_P+0x2>
    570e:	80 95       	com	r24
    5710:	90 95       	com	r25
    5712:	8e 0f       	add	r24, r30
    5714:	9f 1f       	adc	r25, r31
    5716:	08 95       	ret

00005718 <strnlen>:
    5718:	fc 01       	movw	r30, r24
    571a:	61 50       	subi	r22, 0x01	; 1
    571c:	70 40       	sbci	r23, 0x00	; 0
    571e:	01 90       	ld	r0, Z+
    5720:	01 10       	cpse	r0, r1
    5722:	d8 f7       	brcc	.-10     	; 0x571a <strnlen+0x2>
    5724:	80 95       	com	r24
    5726:	90 95       	com	r25
    5728:	8e 0f       	add	r24, r30
    572a:	9f 1f       	adc	r25, r31
    572c:	08 95       	ret

0000572e <fputc>:
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	8c 01       	movw	r16, r24
    5738:	eb 01       	movw	r28, r22
    573a:	8b 81       	ldd	r24, Y+3	; 0x03
    573c:	81 ff       	sbrs	r24, 1
    573e:	1b c0       	rjmp	.+54     	; 0x5776 <fputc+0x48>
    5740:	82 ff       	sbrs	r24, 2
    5742:	0d c0       	rjmp	.+26     	; 0x575e <fputc+0x30>
    5744:	2e 81       	ldd	r18, Y+6	; 0x06
    5746:	3f 81       	ldd	r19, Y+7	; 0x07
    5748:	8c 81       	ldd	r24, Y+4	; 0x04
    574a:	9d 81       	ldd	r25, Y+5	; 0x05
    574c:	28 17       	cp	r18, r24
    574e:	39 07       	cpc	r19, r25
    5750:	64 f4       	brge	.+24     	; 0x576a <fputc+0x3c>
    5752:	e8 81       	ld	r30, Y
    5754:	f9 81       	ldd	r31, Y+1	; 0x01
    5756:	01 93       	st	Z+, r16
    5758:	f9 83       	std	Y+1, r31	; 0x01
    575a:	e8 83       	st	Y, r30
    575c:	06 c0       	rjmp	.+12     	; 0x576a <fputc+0x3c>
    575e:	e8 85       	ldd	r30, Y+8	; 0x08
    5760:	f9 85       	ldd	r31, Y+9	; 0x09
    5762:	80 2f       	mov	r24, r16
    5764:	09 95       	icall
    5766:	89 2b       	or	r24, r25
    5768:	31 f4       	brne	.+12     	; 0x5776 <fputc+0x48>
    576a:	8e 81       	ldd	r24, Y+6	; 0x06
    576c:	9f 81       	ldd	r25, Y+7	; 0x07
    576e:	01 96       	adiw	r24, 0x01	; 1
    5770:	9f 83       	std	Y+7, r25	; 0x07
    5772:	8e 83       	std	Y+6, r24	; 0x06
    5774:	02 c0       	rjmp	.+4      	; 0x577a <fputc+0x4c>
    5776:	0f ef       	ldi	r16, 0xFF	; 255
    5778:	1f ef       	ldi	r17, 0xFF	; 255
    577a:	c8 01       	movw	r24, r16
    577c:	df 91       	pop	r29
    577e:	cf 91       	pop	r28
    5780:	1f 91       	pop	r17
    5782:	0f 91       	pop	r16
    5784:	08 95       	ret

00005786 <__ultoa_invert>:
    5786:	fa 01       	movw	r30, r20
    5788:	aa 27       	eor	r26, r26
    578a:	28 30       	cpi	r18, 0x08	; 8
    578c:	51 f1       	breq	.+84     	; 0x57e2 <__ultoa_invert+0x5c>
    578e:	20 31       	cpi	r18, 0x10	; 16
    5790:	81 f1       	breq	.+96     	; 0x57f2 <__ultoa_invert+0x6c>
    5792:	e8 94       	clt
    5794:	6f 93       	push	r22
    5796:	6e 7f       	andi	r22, 0xFE	; 254
    5798:	6e 5f       	subi	r22, 0xFE	; 254
    579a:	7f 4f       	sbci	r23, 0xFF	; 255
    579c:	8f 4f       	sbci	r24, 0xFF	; 255
    579e:	9f 4f       	sbci	r25, 0xFF	; 255
    57a0:	af 4f       	sbci	r26, 0xFF	; 255
    57a2:	b1 e0       	ldi	r27, 0x01	; 1
    57a4:	3e d0       	rcall	.+124    	; 0x5822 <__ultoa_invert+0x9c>
    57a6:	b4 e0       	ldi	r27, 0x04	; 4
    57a8:	3c d0       	rcall	.+120    	; 0x5822 <__ultoa_invert+0x9c>
    57aa:	67 0f       	add	r22, r23
    57ac:	78 1f       	adc	r23, r24
    57ae:	89 1f       	adc	r24, r25
    57b0:	9a 1f       	adc	r25, r26
    57b2:	a1 1d       	adc	r26, r1
    57b4:	68 0f       	add	r22, r24
    57b6:	79 1f       	adc	r23, r25
    57b8:	8a 1f       	adc	r24, r26
    57ba:	91 1d       	adc	r25, r1
    57bc:	a1 1d       	adc	r26, r1
    57be:	6a 0f       	add	r22, r26
    57c0:	71 1d       	adc	r23, r1
    57c2:	81 1d       	adc	r24, r1
    57c4:	91 1d       	adc	r25, r1
    57c6:	a1 1d       	adc	r26, r1
    57c8:	20 d0       	rcall	.+64     	; 0x580a <__ultoa_invert+0x84>
    57ca:	09 f4       	brne	.+2      	; 0x57ce <__ultoa_invert+0x48>
    57cc:	68 94       	set
    57ce:	3f 91       	pop	r19
    57d0:	2a e0       	ldi	r18, 0x0A	; 10
    57d2:	26 9f       	mul	r18, r22
    57d4:	11 24       	eor	r1, r1
    57d6:	30 19       	sub	r19, r0
    57d8:	30 5d       	subi	r19, 0xD0	; 208
    57da:	31 93       	st	Z+, r19
    57dc:	de f6       	brtc	.-74     	; 0x5794 <__ultoa_invert+0xe>
    57de:	cf 01       	movw	r24, r30
    57e0:	08 95       	ret
    57e2:	46 2f       	mov	r20, r22
    57e4:	47 70       	andi	r20, 0x07	; 7
    57e6:	40 5d       	subi	r20, 0xD0	; 208
    57e8:	41 93       	st	Z+, r20
    57ea:	b3 e0       	ldi	r27, 0x03	; 3
    57ec:	0f d0       	rcall	.+30     	; 0x580c <__ultoa_invert+0x86>
    57ee:	c9 f7       	brne	.-14     	; 0x57e2 <__ultoa_invert+0x5c>
    57f0:	f6 cf       	rjmp	.-20     	; 0x57de <__ultoa_invert+0x58>
    57f2:	46 2f       	mov	r20, r22
    57f4:	4f 70       	andi	r20, 0x0F	; 15
    57f6:	40 5d       	subi	r20, 0xD0	; 208
    57f8:	4a 33       	cpi	r20, 0x3A	; 58
    57fa:	18 f0       	brcs	.+6      	; 0x5802 <__ultoa_invert+0x7c>
    57fc:	49 5d       	subi	r20, 0xD9	; 217
    57fe:	31 fd       	sbrc	r19, 1
    5800:	40 52       	subi	r20, 0x20	; 32
    5802:	41 93       	st	Z+, r20
    5804:	02 d0       	rcall	.+4      	; 0x580a <__ultoa_invert+0x84>
    5806:	a9 f7       	brne	.-22     	; 0x57f2 <__ultoa_invert+0x6c>
    5808:	ea cf       	rjmp	.-44     	; 0x57de <__ultoa_invert+0x58>
    580a:	b4 e0       	ldi	r27, 0x04	; 4
    580c:	a6 95       	lsr	r26
    580e:	97 95       	ror	r25
    5810:	87 95       	ror	r24
    5812:	77 95       	ror	r23
    5814:	67 95       	ror	r22
    5816:	ba 95       	dec	r27
    5818:	c9 f7       	brne	.-14     	; 0x580c <__ultoa_invert+0x86>
    581a:	00 97       	sbiw	r24, 0x00	; 0
    581c:	61 05       	cpc	r22, r1
    581e:	71 05       	cpc	r23, r1
    5820:	08 95       	ret
    5822:	9b 01       	movw	r18, r22
    5824:	ac 01       	movw	r20, r24
    5826:	0a 2e       	mov	r0, r26
    5828:	06 94       	lsr	r0
    582a:	57 95       	ror	r21
    582c:	47 95       	ror	r20
    582e:	37 95       	ror	r19
    5830:	27 95       	ror	r18
    5832:	ba 95       	dec	r27
    5834:	c9 f7       	brne	.-14     	; 0x5828 <__ultoa_invert+0xa2>
    5836:	62 0f       	add	r22, r18
    5838:	73 1f       	adc	r23, r19
    583a:	84 1f       	adc	r24, r20
    583c:	95 1f       	adc	r25, r21
    583e:	a0 1d       	adc	r26, r0
    5840:	08 95       	ret

00005842 <_exit>:
    5842:	f8 94       	cli

00005844 <__stop_program>:
    5844:	ff cf       	rjmp	.-2      	; 0x5844 <__stop_program>
